
ALL_IN_ONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080087f8  080087f8  000097f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  0000a1a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800885c  0800885c  0000a1a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0000985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008860  08008860  00009860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008864  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  080088cc  0000a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  0800896c  0000a108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000974  200001a8  08008a0c  0000a1a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b1c  08008a0c  0000ab1c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e978  00000000  00000000  0000a1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047be  00000000  00000000  00028b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001950  00000000  00000000  0002d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001396  00000000  00000000  0002ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005ce9  00000000  00000000  0002fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021e85  00000000  00000000  00035cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010cc77  00000000  00000000  00057b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001647db  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006edc  00000000  00000000  00164820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  0016b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080087e0 	.word	0x080087e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	080087e0 	.word	0x080087e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8000620:	f001 f85e 	bl	80016e0 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000624:	f000 fcbe 	bl	8000fa4 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000628:	2200      	movs	r2, #0
 800062a:	2110      	movs	r1, #16
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <ILI9341_SPI_Init+0x1c>)
 800062e:	f002 fff7 	bl	8003620 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020c00 	.word	0x40020c00

0800063c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000646:	1df9      	adds	r1, r7, #7
 8000648:	2301      	movs	r3, #1
 800064a:	2201      	movs	r2, #1
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <ILI9341_SPI_Send+0x20>)
 800064e:	f004 fb84 	bl	8004d5a <HAL_SPI_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000031c 	.word	0x2000031c

08000660 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2110      	movs	r1, #16
 800066e:	480a      	ldr	r0, [pc, #40]	@ (8000698 <ILI9341_Write_Command+0x38>)
 8000670:	f002 ffd6 	bl	8003620 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000674:	2200      	movs	r2, #0
 8000676:	2102      	movs	r1, #2
 8000678:	4808      	ldr	r0, [pc, #32]	@ (800069c <ILI9341_Write_Command+0x3c>)
 800067a:	f002 ffd1 	bl	8003620 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffdb 	bl	800063c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <ILI9341_Write_Command+0x38>)
 800068c:	f002 ffc8 	bl	8003620 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020c00 	.word	0x40020c00
 800069c:	40021800 	.word	0x40021800

080006a0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80006aa:	2201      	movs	r2, #1
 80006ac:	2102      	movs	r1, #2
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <ILI9341_Write_Data+0x38>)
 80006b0:	f002 ffb6 	bl	8003620 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2110      	movs	r1, #16
 80006b8:	4808      	ldr	r0, [pc, #32]	@ (80006dc <ILI9341_Write_Data+0x3c>)
 80006ba:	f002 ffb1 	bl	8003620 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffbb 	bl	800063c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2110      	movs	r1, #16
 80006ca:	4804      	ldr	r0, [pc, #16]	@ (80006dc <ILI9341_Write_Data+0x3c>)
 80006cc:	f002 ffa8 	bl	8003620 <HAL_GPIO_WritePin>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021800 	.word	0x40021800
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4604      	mov	r4, r0
 80006e8:	4608      	mov	r0, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	4603      	mov	r3, r0
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	807b      	strh	r3, [r7, #2]
 80006fa:	4613      	mov	r3, r2
 80006fc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80006fe:	202a      	movs	r0, #42	@ 0x2a
 8000700:	f7ff ffae 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b29b      	uxth	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffc7 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffc2 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffbb 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800072a:	887b      	ldrh	r3, [r7, #2]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffb6 	bl	80006a0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000734:	202b      	movs	r0, #43	@ 0x2b
 8000736:	f7ff ff93 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b29b      	uxth	r3, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffac 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000748:	88bb      	ldrh	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffa7 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000752:	883b      	ldrh	r3, [r7, #0]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffa0 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000760:	883b      	ldrh	r3, [r7, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff9b 	bl	80006a0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800076a:	202c      	movs	r0, #44	@ 0x2c
 800076c:	f7ff ff78 	bl	8000660 <ILI9341_Write_Command>
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bd90      	pop	{r4, r7, pc}

08000778 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <ILI9341_Reset+0x34>)
 8000782:	f002 ff4d 	bl	8003620 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000786:	20c8      	movs	r0, #200	@ 0xc8
 8000788:	f001 fcb8 	bl	80020fc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2110      	movs	r1, #16
 8000790:	4806      	ldr	r0, [pc, #24]	@ (80007ac <ILI9341_Reset+0x34>)
 8000792:	f002 ff45 	bl	8003620 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000796:	20c8      	movs	r0, #200	@ 0xc8
 8000798:	f001 fcb0 	bl	80020fc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800079c:	2201      	movs	r2, #1
 800079e:	2108      	movs	r1, #8
 80007a0:	4802      	ldr	r0, [pc, #8]	@ (80007ac <ILI9341_Reset+0x34>)
 80007a2:	f002 ff3d 	bl	8003620 <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40020c00 	.word	0x40020c00

080007b0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80007be:	2036      	movs	r0, #54	@ 0x36
 80007c0:	f7ff ff4e 	bl	8000660 <ILI9341_Write_Command>
HAL_Delay(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f001 fc99 	bl	80020fc <HAL_Delay>
	
switch(screen_rotation) 
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d837      	bhi.n	8000840 <ILI9341_Set_Rotation+0x90>
 80007d0:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <ILI9341_Set_Rotation+0x28>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	080007ff 	.word	0x080007ff
 80007e0:	08000815 	.word	0x08000815
 80007e4:	0800082b 	.word	0x0800082b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80007e8:	2048      	movs	r0, #72	@ 0x48
 80007ea:	f7ff ff59 	bl	80006a0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <ILI9341_Set_Rotation+0x9c>)
 80007f0:	22f0      	movs	r2, #240	@ 0xf0
 80007f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <ILI9341_Set_Rotation+0xa0>)
 80007f6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007fa:	801a      	strh	r2, [r3, #0]
			break;
 80007fc:	e021      	b.n	8000842 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80007fe:	2028      	movs	r0, #40	@ 0x28
 8000800:	f7ff ff4e 	bl	80006a0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <ILI9341_Set_Rotation+0x9c>)
 8000806:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800080a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <ILI9341_Set_Rotation+0xa0>)
 800080e:	22f0      	movs	r2, #240	@ 0xf0
 8000810:	801a      	strh	r2, [r3, #0]
			break;
 8000812:	e016      	b.n	8000842 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000814:	2088      	movs	r0, #136	@ 0x88
 8000816:	f7ff ff43 	bl	80006a0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <ILI9341_Set_Rotation+0x9c>)
 800081c:	22f0      	movs	r2, #240	@ 0xf0
 800081e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <ILI9341_Set_Rotation+0xa0>)
 8000822:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000826:	801a      	strh	r2, [r3, #0]
			break;
 8000828:	e00b      	b.n	8000842 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800082a:	20e8      	movs	r0, #232	@ 0xe8
 800082c:	f7ff ff38 	bl	80006a0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <ILI9341_Set_Rotation+0x9c>)
 8000832:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000836:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <ILI9341_Set_Rotation+0xa0>)
 800083a:	22f0      	movs	r2, #240	@ 0xf0
 800083c:	801a      	strh	r2, [r3, #0]
			break;
 800083e:	e000      	b.n	8000842 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000840:	bf00      	nop
	}
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000002 	.word	0x20000002
 8000850:	20000000 	.word	0x20000000

08000854 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2108      	movs	r1, #8
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <ILI9341_Enable+0x14>)
 800085e:	f002 fedf 	bl	8003620 <HAL_GPIO_WritePin>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020c00 	.word	0x40020c00

0800086c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000870:	f7ff fff0 	bl	8000854 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000874:	f7ff fed2 	bl	800061c <ILI9341_SPI_Init>
ILI9341_Reset();
 8000878:	f7ff ff7e 	bl	8000778 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff feef 	bl	8000660 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000886:	f001 fc39 	bl	80020fc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800088a:	20cb      	movs	r0, #203	@ 0xcb
 800088c:	f7ff fee8 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000890:	2039      	movs	r0, #57	@ 0x39
 8000892:	f7ff ff05 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000896:	202c      	movs	r0, #44	@ 0x2c
 8000898:	f7ff ff02 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff feff 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80008a2:	2034      	movs	r0, #52	@ 0x34
 80008a4:	f7ff fefc 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fef9 	bl	80006a0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80008ae:	20cf      	movs	r0, #207	@ 0xcf
 80008b0:	f7ff fed6 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fef3 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80008ba:	20c1      	movs	r0, #193	@ 0xc1
 80008bc:	f7ff fef0 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80008c0:	2030      	movs	r0, #48	@ 0x30
 80008c2:	f7ff feed 	bl	80006a0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80008c6:	20e8      	movs	r0, #232	@ 0xe8
 80008c8:	f7ff feca 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80008cc:	2085      	movs	r0, #133	@ 0x85
 80008ce:	f7ff fee7 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fee4 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80008d8:	2078      	movs	r0, #120	@ 0x78
 80008da:	f7ff fee1 	bl	80006a0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80008de:	20ea      	movs	r0, #234	@ 0xea
 80008e0:	f7ff febe 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fedb 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff fed8 	bl	80006a0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80008f0:	20ed      	movs	r0, #237	@ 0xed
 80008f2:	f7ff feb5 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80008f6:	2064      	movs	r0, #100	@ 0x64
 80008f8:	f7ff fed2 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f7ff fecf 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000902:	2012      	movs	r0, #18
 8000904:	f7ff fecc 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000908:	2081      	movs	r0, #129	@ 0x81
 800090a:	f7ff fec9 	bl	80006a0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800090e:	20f7      	movs	r0, #247	@ 0xf7
 8000910:	f7ff fea6 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000914:	2020      	movs	r0, #32
 8000916:	f7ff fec3 	bl	80006a0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800091a:	20c0      	movs	r0, #192	@ 0xc0
 800091c:	f7ff fea0 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000920:	2023      	movs	r0, #35	@ 0x23
 8000922:	f7ff febd 	bl	80006a0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000926:	20c1      	movs	r0, #193	@ 0xc1
 8000928:	f7ff fe9a 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800092c:	2010      	movs	r0, #16
 800092e:	f7ff feb7 	bl	80006a0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000932:	20c5      	movs	r0, #197	@ 0xc5
 8000934:	f7ff fe94 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000938:	203e      	movs	r0, #62	@ 0x3e
 800093a:	f7ff feb1 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800093e:	2028      	movs	r0, #40	@ 0x28
 8000940:	f7ff feae 	bl	80006a0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000944:	20c7      	movs	r0, #199	@ 0xc7
 8000946:	f7ff fe8b 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800094a:	2086      	movs	r0, #134	@ 0x86
 800094c:	f7ff fea8 	bl	80006a0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000950:	2036      	movs	r0, #54	@ 0x36
 8000952:	f7ff fe85 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000956:	2048      	movs	r0, #72	@ 0x48
 8000958:	f7ff fea2 	bl	80006a0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800095c:	203a      	movs	r0, #58	@ 0x3a
 800095e:	f7ff fe7f 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000962:	2055      	movs	r0, #85	@ 0x55
 8000964:	f7ff fe9c 	bl	80006a0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000968:	20b1      	movs	r0, #177	@ 0xb1
 800096a:	f7ff fe79 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fe96 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000974:	2018      	movs	r0, #24
 8000976:	f7ff fe93 	bl	80006a0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800097a:	20b6      	movs	r0, #182	@ 0xb6
 800097c:	f7ff fe70 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000980:	2008      	movs	r0, #8
 8000982:	f7ff fe8d 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000986:	2082      	movs	r0, #130	@ 0x82
 8000988:	f7ff fe8a 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800098c:	2027      	movs	r0, #39	@ 0x27
 800098e:	f7ff fe87 	bl	80006a0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000992:	20f2      	movs	r0, #242	@ 0xf2
 8000994:	f7ff fe64 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fe81 	bl	80006a0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800099e:	2026      	movs	r0, #38	@ 0x26
 80009a0:	f7ff fe5e 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fe7b 	bl	80006a0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80009aa:	20e0      	movs	r0, #224	@ 0xe0
 80009ac:	f7ff fe58 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80009b0:	200f      	movs	r0, #15
 80009b2:	f7ff fe75 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009b6:	2031      	movs	r0, #49	@ 0x31
 80009b8:	f7ff fe72 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80009bc:	202b      	movs	r0, #43	@ 0x2b
 80009be:	f7ff fe6f 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009c2:	200c      	movs	r0, #12
 80009c4:	f7ff fe6c 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009c8:	200e      	movs	r0, #14
 80009ca:	f7ff fe69 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ce:	2008      	movs	r0, #8
 80009d0:	f7ff fe66 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80009d4:	204e      	movs	r0, #78	@ 0x4e
 80009d6:	f7ff fe63 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80009da:	20f1      	movs	r0, #241	@ 0xf1
 80009dc:	f7ff fe60 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80009e0:	2037      	movs	r0, #55	@ 0x37
 80009e2:	f7ff fe5d 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f7ff fe5a 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80009ec:	2010      	movs	r0, #16
 80009ee:	f7ff fe57 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f7ff fe54 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff fe51 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80009fe:	2009      	movs	r0, #9
 8000a00:	f7ff fe4e 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fe4b 	bl	80006a0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000a0a:	20e1      	movs	r0, #225	@ 0xe1
 8000a0c:	f7ff fe28 	bl	8000660 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fe45 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a16:	200e      	movs	r0, #14
 8000a18:	f7ff fe42 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000a1c:	2014      	movs	r0, #20
 8000a1e:	f7ff fe3f 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f7ff fe3c 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000a28:	2011      	movs	r0, #17
 8000a2a:	f7ff fe39 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f7ff fe36 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a34:	2031      	movs	r0, #49	@ 0x31
 8000a36:	f7ff fe33 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a3a:	20c1      	movs	r0, #193	@ 0xc1
 8000a3c:	f7ff fe30 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000a40:	2048      	movs	r0, #72	@ 0x48
 8000a42:	f7ff fe2d 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f7ff fe2a 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a4c:	200f      	movs	r0, #15
 8000a4e:	f7ff fe27 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a52:	200c      	movs	r0, #12
 8000a54:	f7ff fe24 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a58:	2031      	movs	r0, #49	@ 0x31
 8000a5a:	f7ff fe21 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a5e:	2036      	movs	r0, #54	@ 0x36
 8000a60:	f7ff fe1e 	bl	80006a0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a64:	200f      	movs	r0, #15
 8000a66:	f7ff fe1b 	bl	80006a0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a6a:	2011      	movs	r0, #17
 8000a6c:	f7ff fdf8 	bl	8000660 <ILI9341_Write_Command>
HAL_Delay(120);
 8000a70:	2078      	movs	r0, #120	@ 0x78
 8000a72:	f001 fb43 	bl	80020fc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a76:	2029      	movs	r0, #41	@ 0x29
 8000a78:	f7ff fdf2 	bl	8000660 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fe97 	bl	80007b0 <ILI9341_Set_Rotation>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	b08d      	sub	sp, #52	@ 0x34
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	6039      	str	r1, [r7, #0]
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	466b      	mov	r3, sp
 8000a98:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000aa6:	d202      	bcs.n	8000aae <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aac:	e002      	b.n	8000ab4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000aae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	483e      	ldr	r0, [pc, #248]	@ (8000bb4 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000aba:	f002 fdb1 	bl	8003620 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	483d      	ldr	r0, [pc, #244]	@ (8000bb8 <ILI9341_Draw_Colour_Burst+0x130>)
 8000ac4:	f002 fdac 	bl	8003620 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8000ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	2300      	movs	r3, #0
 8000adc:	4688      	mov	r8, r1
 8000ade:	4699      	mov	r9, r3
 8000ae0:	f04f 0200 	mov.w	r2, #0
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000af0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000af4:	2300      	movs	r3, #0
 8000af6:	460c      	mov	r4, r1
 8000af8:	461d      	mov	r5, r3
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	00eb      	lsls	r3, r5, #3
 8000b04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b08:	00e2      	lsls	r2, r4, #3
 8000b0a:	1dcb      	adds	r3, r1, #7
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	ebad 0d03 	sub.w	sp, sp, r3
 8000b14:	466b      	mov	r3, sp
 8000b16:	3300      	adds	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b1e:	e00e      	b.n	8000b3e <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b24:	4413      	add	r3, r2
 8000b26:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000b2a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2e:	3301      	adds	r3, #1
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	b2d1      	uxtb	r1, r2
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3ec      	bcc.n	8000b20 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b54:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b60:	fb01 f202 	mul.w	r2, r1, r2
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d010      	beq.n	8000b90 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b72:	e009      	b.n	8000b88 <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	230a      	movs	r3, #10
 8000b7a:	69b9      	ldr	r1, [r7, #24]
 8000b7c:	480f      	ldr	r0, [pc, #60]	@ (8000bbc <ILI9341_Draw_Colour_Burst+0x134>)
 8000b7e:	f004 f8ec 	bl	8004d5a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	3301      	adds	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3f1      	bcc.n	8000b74 <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	230a      	movs	r3, #10
 8000b96:	69b9      	ldr	r1, [r7, #24]
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <ILI9341_Draw_Colour_Burst+0x134>)
 8000b9a:	f004 f8de 	bl	8004d5a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <ILI9341_Draw_Colour_Burst+0x130>)
 8000ba4:	f002 fd3c 	bl	8003620 <HAL_GPIO_WritePin>
 8000ba8:	46b5      	mov	sp, r6
}
 8000baa:	bf00      	nop
 8000bac:	3734      	adds	r7, #52	@ 0x34
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	2000031c 	.word	0x2000031c

08000bc0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <ILI9341_Fill_Screen+0x44>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <ILI9341_Fill_Screen+0x48>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fd81 	bl	80006e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <ILI9341_Fill_Screen+0x44>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <ILI9341_Fill_Screen+0x48>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff46 	bl	8000a88 <ILI9341_Draw_Colour_Burst>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000002 	.word	0x20000002
 8000c08:	20000000 	.word	0x20000000

08000c0c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c20:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <MX_ADC3_Init+0x9c>)
 8000c22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_ADC3_Init+0xa0>)
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c6c:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c6e:	f001 fa69 	bl	8002144 <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 fce4 	bl	8001644 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c84:	2307      	movs	r3, #7
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_ADC3_Init+0x98>)
 8000c8e:	f001 fbcb 	bl	8002428 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 fcd4 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200001c4 	.word	0x200001c4
 8000ca8:	40012200 	.word	0x40012200
 8000cac:	0f000001 	.word	0x0f000001

08000cb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	@ 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d84 <HAL_ADC_MspInit+0xd4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d154      	bne.n	8000d7c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000cd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cea:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a26      	ldr	r2, [pc, #152]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_ADC_MspInit+0xd8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = ADC3_09_R4_Pin|ADC3_15_R5_Pin|ADC3_08_R6_Pin;
 8000d32:	f44f 6385 	mov.w	r3, #1064	@ 0x428
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <HAL_ADC_MspInit+0xdc>)
 8000d48:	f002 fabe 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC3_10_R2_Pin|ADC3_13_R3_Pin;
 8000d4c:	2309      	movs	r3, #9
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <HAL_ADC_MspInit+0xe0>)
 8000d60:	f002 fab2 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC3_03_R1_Pin;
 8000d64:	2308      	movs	r3, #8
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC3_03_R1_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <HAL_ADC_MspInit+0xe4>)
 8000d78:	f002 faa6 	bl	80032c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	@ 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40012200 	.word	0x40012200
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40021400 	.word	0x40021400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020000 	.word	0x40020000

08000d98 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000d9e:	4a20      	ldr	r2, [pc, #128]	@ (8000e20 <MX_ETH_Init+0x88>)
 8000da0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000da2:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000db0:	22e1      	movs	r2, #225	@ 0xe1
 8000db2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000dc8:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <MX_ETH_Init+0x8c>)
 8000dca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000dce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dd2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000dd6:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <MX_ETH_Init+0x90>)
 8000dd8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000ddc:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <MX_ETH_Init+0x94>)
 8000dde:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000de2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000de6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <MX_ETH_Init+0x84>)
 8000dea:	f001 ff1f 	bl	8002c2c <HAL_ETH_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000df4:	f000 fc26 	bl	8001644 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000df8:	2238      	movs	r2, #56	@ 0x38
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_ETH_Init+0x98>)
 8000dfe:	f007 f871 	bl	8007ee4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_ETH_Init+0x98>)
 8000e04:	2221      	movs	r2, #33	@ 0x21
 8000e06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_ETH_Init+0x98>)
 8000e0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000e0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <MX_ETH_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000244 	.word	0x20000244
 8000e20:	40028000 	.word	0x40028000
 8000e24:	200002f4 	.word	0x200002f4
 8000e28:	20000108 	.word	0x20000108
 8000e2c:	20000068 	.word	0x20000068
 8000e30:	2000020c 	.word	0x2000020c

08000e34 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	@ 0x38
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	@ (8000f8c <HAL_ETH_MspInit+0x158>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f040 8096 	bne.w	8000f84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e58:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e6c:	623b      	str	r3, [r7, #32]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	4b47      	ldr	r3, [pc, #284]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	4a46      	ldr	r2, [pc, #280]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7c:	4b44      	ldr	r3, [pc, #272]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4b41      	ldr	r3, [pc, #260]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	4a40      	ldr	r2, [pc, #256]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e94:	4b3e      	ldr	r3, [pc, #248]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b38      	ldr	r3, [pc, #224]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b35      	ldr	r3, [pc, #212]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a34      	ldr	r2, [pc, #208]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec4:	4b32      	ldr	r3, [pc, #200]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000edc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f00:	2332      	movs	r3, #50	@ 0x32
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f10:	230b      	movs	r3, #11
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481e      	ldr	r0, [pc, #120]	@ (8000f94 <HAL_ETH_MspInit+0x160>)
 8000f1c:	f002 f9d4 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f20:	2386      	movs	r3, #134	@ 0x86
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f30:	230b      	movs	r3, #11
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <HAL_ETH_MspInit+0x164>)
 8000f3c:	f002 f9c4 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <HAL_ETH_MspInit+0x168>)
 8000f5e:	f002 f9b3 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f74:	230b      	movs	r3, #11
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <HAL_ETH_MspInit+0x16c>)
 8000f80:	f002 f9a2 	bl	80032c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	@ 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40028000 	.word	0x40028000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40021800 	.word	0x40021800

08000fa4 <MX_GPIO_Init>:
        * EXTI
     PF0   ------> I2C2_SDA
     PF1   ------> I2C2_SCL
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	@ 0x38
 8000fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	4b8e      	ldr	r3, [pc, #568]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a8d      	ldr	r2, [pc, #564]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b88      	ldr	r3, [pc, #544]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a87      	ldr	r2, [pc, #540]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b85      	ldr	r3, [pc, #532]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	4b82      	ldr	r3, [pc, #520]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a81      	ldr	r2, [pc, #516]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b7c      	ldr	r3, [pc, #496]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a7b      	ldr	r2, [pc, #492]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b79      	ldr	r3, [pc, #484]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <MX_GPIO_Init+0x250>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a75      	ldr	r2, [pc, #468]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b73      	ldr	r3, [pc, #460]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b70      	ldr	r3, [pc, #448]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a6f      	ldr	r2, [pc, #444]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b6d      	ldr	r3, [pc, #436]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104a:	4b6a      	ldr	r3, [pc, #424]	@ (80011f4 <MX_GPIO_Init+0x250>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a69      	ldr	r2, [pc, #420]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b67      	ldr	r3, [pc, #412]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	4b64      	ldr	r3, [pc, #400]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a63      	ldr	r2, [pc, #396]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b61      	ldr	r3, [pc, #388]	@ (80011f4 <MX_GPIO_Init+0x250>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_CS_Pin|T_MOSI_Pin|LED7_Pin
 800107a:	2200      	movs	r2, #0
 800107c:	f642 2154 	movw	r1, #10836	@ 0x2a54
 8001080:	485d      	ldr	r0, [pc, #372]	@ (80011f8 <MX_GPIO_Init+0x254>)
 8001082:	f002 facd 	bl	8003620 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f244 0181 	movw	r1, #16513	@ 0x4081
 800108c:	485b      	ldr	r0, [pc, #364]	@ (80011fc <MX_GPIO_Init+0x258>)
 800108e:	f002 fac7 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED8_Pin|LED5_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001098:	4859      	ldr	r0, [pc, #356]	@ (8001200 <MX_GPIO_Init+0x25c>)
 800109a:	f002 fac1 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DC_Pin|USB_PowerSwitchOn_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f244 2142 	movw	r1, #16962	@ 0x4242
 80010a4:	4857      	ldr	r0, [pc, #348]	@ (8001204 <MX_GPIO_Init+0x260>)
 80010a6:	f002 fabb 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RST_Pin|CS_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2118      	movs	r1, #24
 80010ae:	4856      	ldr	r0, [pc, #344]	@ (8001208 <MX_GPIO_Init+0x264>)
 80010b0:	f002 fab6 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 80010b4:	2344      	movs	r3, #68	@ 0x44
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	484b      	ldr	r0, [pc, #300]	@ (80011f8 <MX_GPIO_Init+0x254>)
 80010cc:	f002 f8fc 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80010d0:	2328      	movs	r3, #40	@ 0x28
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4845      	ldr	r0, [pc, #276]	@ (80011f8 <MX_GPIO_Init+0x254>)
 80010e4:	f002 f8f0 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CS_Pin LED7_Pin LED6_Pin LED4_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin|LED7_Pin|LED6_Pin|LED4_Pin;
 80010e8:	f642 2310 	movw	r3, #10768	@ 0x2a10
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	483d      	ldr	r0, [pc, #244]	@ (80011f8 <MX_GPIO_Init+0x254>)
 8001102:	f002 f8e1 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin EXTI_09_BTN1_Pin EXTI_10_BTN2_Pin EXTI_11_BTN3_Pin
                           EXTI_12_BTN4_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|EXTI_09_BTN1_Pin|EXTI_10_BTN2_Pin|EXTI_11_BTN3_Pin
 8001106:	f44f 5378 	mov.w	r3, #15872	@ 0x3e00
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |EXTI_12_BTN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	483b      	ldr	r0, [pc, #236]	@ (800120c <MX_GPIO_Init+0x268>)
 800111e:	f002 f8d3 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001122:	2303      	movs	r3, #3
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001132:	2304      	movs	r3, #4
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4830      	ldr	r0, [pc, #192]	@ (8001200 <MX_GPIO_Init+0x25c>)
 800113e:	f002 f8c3 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001142:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4828      	ldr	r0, [pc, #160]	@ (80011fc <MX_GPIO_Init+0x258>)
 800115c:	f002 f8b4 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED8_Pin LED5_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|LED5_Pin|LED3_Pin;
 8001160:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4821      	ldr	r0, [pc, #132]	@ (8001200 <MX_GPIO_Init+0x25c>)
 800117a:	f002 f8a5 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	481b      	ldr	r0, [pc, #108]	@ (8001204 <MX_GPIO_Init+0x260>)
 8001196:	f002 f897 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LED1_Pin|LED2_Pin;
 800119a:	f244 2340 	movw	r3, #16960	@ 0x4240
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4814      	ldr	r0, [pc, #80]	@ (8001204 <MX_GPIO_Init+0x260>)
 80011b4:	f002 f888 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MX_GPIO_Init+0x260>)
 80011cc:	f002 f87c 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|CS_Pin;
 80011d0:	2318      	movs	r3, #24
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_GPIO_Init+0x264>)
 80011e8:	f002 f86e 	bl	80032c8 <HAL_GPIO_Init>

}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020800 	.word	0x40020800

08001210 <RGB_Set>:
static volatile int end_val = 3002;   // เริ่มนับจาก 1002 (คู่)
static volatile uint8_t done = 0;         // ครบงานแล้ว

/* PWM helper: TIM3 period จาก Cube = 65535 */
#define TIM3_ARR   (htim3.Init.Period)
static inline void RGB_Set(uint16_t r, uint16_t g, uint16_t b) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	460b      	mov	r3, r1
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, r); // RED  PA6
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <RGB_Set+0x38>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, g); // GREEN PC7
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <RGB_Set+0x38>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	88ba      	ldrh	r2, [r7, #4]
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, b); // BLUE  PC8
 8001232:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <RGB_Set+0x38>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200003d0 	.word	0x200003d0

0800124c <RGB_SetPercent>:
static inline void RGB_SetPercent(uint8_t r, uint8_t g, uint8_t b) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	460b      	mov	r3, r1
 8001258:	71bb      	strb	r3, [r7, #6]
 800125a:	4613      	mov	r3, r2
 800125c:	717b      	strb	r3, [r7, #5]
    uint32_t rr = (uint32_t)r * TIM3_ARR / 100;
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <RGB_SetPercent+0x68>)
 8001262:	68d2      	ldr	r2, [r2, #12]
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <RGB_SetPercent+0x6c>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	617b      	str	r3, [r7, #20]
    uint32_t gg = (uint32_t)g * TIM3_ARR / 100;
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <RGB_SetPercent+0x68>)
 8001276:	68d2      	ldr	r2, [r2, #12]
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <RGB_SetPercent+0x6c>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	613b      	str	r3, [r7, #16]
    uint32_t bb = (uint32_t)b * TIM3_ARR / 100;
 8001286:	797b      	ldrb	r3, [r7, #5]
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <RGB_SetPercent+0x68>)
 800128a:	68d2      	ldr	r2, [r2, #12]
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <RGB_SetPercent+0x6c>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	60fb      	str	r3, [r7, #12]
    RGB_Set((uint16_t)rr, (uint16_t)gg, (uint16_t)bb);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	b29b      	uxth	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	b291      	uxth	r1, r2
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	b292      	uxth	r2, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffb2 	bl	8001210 <RGB_Set>
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003d0 	.word	0x200003d0
 80012b8:	51eb851f 	.word	0x51eb851f

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 febe 	bl	8002042 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f861 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f7ff fe6b 	bl	8000fa4 <MX_GPIO_Init>
  MX_ETH_Init();
 80012ce:	f7ff fd63 	bl	8000d98 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012d2:	f000 fd4d 	bl	8001d70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012d6:	f000 fde3 	bl	8001ea0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 80012da:	f7ff fc97 	bl	8000c0c <MX_ADC3_Init>
  MX_RNG_Init();
 80012de:	f000 f9b7 	bl	8001650 <MX_RNG_Init>
  MX_TIM2_Init();
 80012e2:	f000 fb69 	bl	80019b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012e6:	f000 fbb5 	bl	8001a54 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012ea:	f000 fc41 	bl	8001b70 <MX_TIM5_Init>
  MX_SPI5_Init();
 80012ee:	f000 f9f7 	bl	80016e0 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */


  uint16_t ADC_MIN = 80;
 80012f2:	2350      	movs	r3, #80	@ 0x50
 80012f4:	82fb      	strh	r3, [r7, #22]
  uint16_t ADC_MAX = 4020;
 80012f6:	f640 73b4 	movw	r3, #4020	@ 0xfb4
 80012fa:	82bb      	strh	r3, [r7, #20]
  uint16_t ADC_PERIOD = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	827b      	strh	r3, [r7, #18]
  uint16_t ADC_SCALE = (ADC_MAX - ADC_MIN) / ADC_PERIOD;
 8001300:	8aba      	ldrh	r2, [r7, #20]
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	1ad2      	subs	r2, r2, r3
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	fb92 f3f3 	sdiv	r3, r2, r3
 800130c:	823b      	strh	r3, [r7, #16]


  uint16_t pos_x = 120;
 800130e:	2378      	movs	r3, #120	@ 0x78
 8001310:	81fb      	strh	r3, [r7, #14]
  uint16_t pos_y = 160;
 8001312:	23a0      	movs	r3, #160	@ 0xa0
 8001314:	81bb      	strh	r3, [r7, #12]
  uint16_t r = 20;
 8001316:	2314      	movs	r3, #20
 8001318:	817b      	strh	r3, [r7, #10]
  uint16_t c = YELLOW;
 800131a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800131e:	813b      	strh	r3, [r7, #8]
  uint16_t now_state = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	80fb      	strh	r3, [r7, #6]
  uint16_t bg = GREEN;
 8001324:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001328:	80bb      	strh	r3, [r7, #4]

  ILI9341_Init();
 800132a:	f7ff fa9f 	bl	800086c <ILI9341_Init>
  // EXTI 9..5 (เช่น PC9, PC10, PC11)
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2101      	movs	r1, #1
 8001332:	2017      	movs	r0, #23
 8001334:	f001 fbb1 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001338:	2017      	movs	r0, #23
 800133a:	f001 fbca 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  // EXTI 15..10 (เช่น PC13 USER, PC12)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2101      	movs	r1, #1
 8001342:	2028      	movs	r0, #40	@ 0x28
 8001344:	f001 fba9 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001348:	2028      	movs	r0, #40	@ 0x28
 800134a:	f001 fbc2 	bl	8002ad2 <HAL_NVIC_EnableIRQ>


  /* Start TIM5 as 1ms tick */
  HAL_TIM_Base_Start_IT(&htim5);
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <main+0xc8>)
 8001350:	f004 f85a 	bl	8005408 <HAL_TIM_Base_Start_IT>

  /* Start TIM3 PWM channels for RGB */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // RED
 8001354:	2100      	movs	r1, #0
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <main+0xcc>)
 8001358:	f004 f960 	bl	800561c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // GREEN
 800135c:	2104      	movs	r1, #4
 800135e:	480a      	ldr	r0, [pc, #40]	@ (8001388 <main+0xcc>)
 8001360:	f004 f95c 	bl	800561c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // BLUE
 8001364:	2108      	movs	r1, #8
 8001366:	4808      	ldr	r0, [pc, #32]	@ (8001388 <main+0xcc>)
 8001368:	f004 f958 	bl	800561c <HAL_TIM_PWM_Start>
  RGB_Set(0,0,0); // ปิดไฟแรกเริ่ม
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff4d 	bl	8001210 <RGB_Set>

//char temp_buff[16] ;
//char humid_buff[16] ;
//uint16_t t = 30;
//uint16_t h = 40;
ILI9341_Fill_Screen(WHITE);
 8001376:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800137a:	f7ff fc21 	bl	8000bc0 <ILI9341_Fill_Screen>
//ILI9341_Draw_Filled_Circle(120, 180, 24, RED);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137e:	bf00      	nop
 8001380:	e7fd      	b.n	800137e <main+0xc2>
 8001382:	bf00      	nop
 8001384:	2000041c 	.word	0x2000041c
 8001388:	200003d0 	.word	0x200003d0

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2234      	movs	r2, #52	@ 0x34
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fda2 	bl	8007ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013b0:	f002 faa2 	bl	80038f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <SystemClock_Config+0xd8>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001464 <SystemClock_Config+0xd8>)
 80013ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013be:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <SystemClock_Config+0xd8>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013cc:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <SystemClock_Config+0xdc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <SystemClock_Config+0xdc>)
 80013d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <SystemClock_Config+0xdc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013fc:	23d8      	movs	r3, #216	@ 0xd8
 80013fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001404:	2309      	movs	r3, #9
 8001406:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fad1 	bl	80039b8 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800141c:	f000 f912 	bl	8001644 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001420:	f002 fa7a 	bl	8003918 <HAL_PWREx_EnableOverDrive>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800142a:	f000 f90b 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142e:	230f      	movs	r3, #15
 8001430:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2302      	movs	r3, #2
 8001434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800143a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800143e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001444:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2107      	movs	r1, #7
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fd61 	bl	8003f14 <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001458:	f000 f8f4 	bl	8001644 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3750      	adds	r7, #80	@ 0x50
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000

0800146c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]

    if (done) return;
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_GPIO_EXTI_Callback+0x40>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10f      	bne.n	80014a0 <HAL_GPIO_EXTI_Callback+0x34>

    if (GPIO_Pin == EXTI_09_BTN1_Pin) {
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001486:	d10c      	bne.n	80014a2 <HAL_GPIO_EXTI_Callback+0x36>
        if (!paused) {
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x44>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d107      	bne.n	80014a2 <HAL_GPIO_EXTI_Callback+0x36>
            paused = 1;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
            pause_ms = 0;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x48>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_EXTI_Callback+0x36>
    if (done) return;
 80014a0:	bf00      	nop
//            RGB_V2
//            RGB_SetPercent(100, 0, 0);
        }
    }
}
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000308 	.word	0x20000308
 80014b0:	20000300 	.word	0x20000300
 80014b4:	20000304 	.word	0x20000304

080014b8 <uart_print_num>:
}


extern UART_HandleTypeDef huart3;

static void uart_print_num(int v) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    char buf[32];
    int n = snprintf(buf, sizeof(buf), "%d\r\n", v);
 80014c0:	f107 000c 	add.w	r0, r7, #12
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <uart_print_num+0x34>)
 80014c8:	2120      	movs	r1, #32
 80014ca:	f006 fcd5 	bl	8007e78 <sniprintf>
 80014ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, (uint16_t)n, HAL_MAX_DELAY);
 80014d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 010c 	add.w	r1, r7, #12
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <uart_print_num+0x38>)
 80014de:	f005 f963 	bl	80067a8 <HAL_UART_Transmit>
}
 80014e2:	bf00      	nop
 80014e4:	3730      	adds	r7, #48	@ 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080087f8 	.word	0x080087f8
 80014f0:	20000468 	.word	0x20000468

080014f4 <uart_print_stop>:

static void uart_print_stop(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
    const char *s = "STOP\r\n";
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <uart_print_stop+0x28>)
 80014fc:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)s, (uint16_t)strlen(s), HAL_MAX_DELAY);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7fe fe9e 	bl	8000240 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4804      	ldr	r0, [pc, #16]	@ (8001520 <uart_print_stop+0x2c>)
 8001510:	f005 f94a 	bl	80067a8 <HAL_UART_Transmit>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	08008800 	.word	0x08008800
 8001520:	20000468 	.word	0x20000468

08001524 <HAL_TIM_PeriodElapsedCallback>:

/* Cube HAL calls this on timer update event */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    if (done) return;
 800152c:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d170      	bne.n	8001618 <HAL_TIM_PeriodElapsedCallback+0xf4>

    if (htim->Instance == TIM5) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a3b      	ldr	r2, [pc, #236]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d16e      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0xfa>
        ms_tick++;
 8001540:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a39      	ldr	r2, [pc, #228]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001548:	6013      	str	r3, [r2, #0]

        if (paused) {
 800154a:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d040      	beq.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0xb2>
            pause_ms++;
 8001554:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a36      	ldr	r2, [pc, #216]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800155c:	6013      	str	r3, [r2, #0]

            if (pause_ms == 1)   {
 800155e:	4b35      	ldr	r3, [pc, #212]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d104      	bne.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x4c>
//            	0-1
//            	RGB_V2
            	RGB_SetPercent(0, 100, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2164      	movs	r1, #100	@ 0x64
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fe6e 	bl	800124c <RGB_SetPercent>
            }
            if (pause_ms == 500) {
 8001570:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001578:	d104      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x60>
//            	1-2
//            	set_led(all_lds[2], GPIO_PIN_SET);
            	//            	RGB_V2
				RGB_SetPercent(0, 75, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	214b      	movs	r1, #75	@ 0x4b
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fe64 	bl	800124c <RGB_SetPercent>
			}
            if (pause_ms == 2000) {
 8001584:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800158c:	d104      	bne.n	8001598 <HAL_TIM_PeriodElapsedCallback+0x74>
//            	2-3
//            	set_led(all_lds[1], GPIO_PIN_SET);
            	//            	RGB_V2
            	RGB_SetPercent(0, 50, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2132      	movs	r1, #50	@ 0x32
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fe5a 	bl	800124c <RGB_SetPercent>
            }
            if (pause_ms == 3000) {
 8001598:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d104      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x8a>
//            	3-4
//            	set_led(all_lds[0], GPIO_PIN_SET);
            	//            	RGB_V2
            	RGB_SetPercent(0, 25, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2119      	movs	r1, #25
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fe4f 	bl	800124c <RGB_SetPercent>
            }
            if (pause_ms == 4000) {
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80015b6:	d131      	bne.n	800161c <HAL_TIM_PeriodElapsedCallback+0xf8>

//            	set_led(all_lds[2], GPIO_PIN_RESET);
//            	set_led(all_lds[1], GPIO_PIN_RESET);
//            	set_led(all_lds[0], GPIO_PIN_RESET);
            	//            	RGB_V2
                RGB_SetPercent(0, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fe45 	bl	800124c <RGB_SetPercent>
                paused = 0;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
                pause_ms = 0;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
                ms_tick = 0; // รีเซ็ต 1s accumulator ให้เที่ยงตรงก่อนนับต่อ
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
            }
            return;
 80015d4:	e022      	b.n	800161c <HAL_TIM_PeriodElapsedCallback+0xf8>
        }

        /* กรณีปกติ: พิมพ์ทุก 1000ms */
        if (ms_tick >= 1000) {
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015de:	d31e      	bcc.n	800161e <HAL_TIM_PeriodElapsedCallback+0xfa>
            ms_tick = 0;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

            /* พิมพ์ค่าปัจจุบัน */
            uart_print_num(current_val);
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff64 	bl	80014b8 <uart_print_num>

            /* เดินไปเลขคู่ถัดไป */
            current_val -= 2;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3b02      	subs	r3, #2
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80015f8:	6013      	str	r3, [r2, #0]

            /* จบที่ 1030 แล้ว STOP */
            if (current_val < end_val) {
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	da0b      	bge.n	800161e <HAL_TIM_PeriodElapsedCallback+0xfa>
                uart_print_stop();
 8001606:	f7ff ff75 	bl	80014f4 <uart_print_stop>
                /* ปิด timer interrupt และหยุดโปรแกรม */
                HAL_TIM_Base_Stop_IT(&htim5);
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800160c:	f003 ff74 	bl	80054f8 <HAL_TIM_Base_Stop_IT>
                done = 1;
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e002      	b.n	800161e <HAL_TIM_PeriodElapsedCallback+0xfa>
    if (done) return;
 8001618:	bf00      	nop
 800161a:	e000      	b.n	800161e <HAL_TIM_PeriodElapsedCallback+0xfa>
            return;
 800161c:	bf00      	nop
            }
        }
    }
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000308 	.word	0x20000308
 8001628:	40000c00 	.word	0x40000c00
 800162c:	200002fc 	.word	0x200002fc
 8001630:	20000300 	.word	0x20000300
 8001634:	20000304 	.word	0x20000304
 8001638:	20000004 	.word	0x20000004
 800163c:	20000008 	.word	0x20000008
 8001640:	2000041c 	.word	0x2000041c

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <Error_Handler+0x8>

08001650 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_RNG_Init+0x20>)
 8001656:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <MX_RNG_Init+0x24>)
 8001658:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_RNG_Init+0x20>)
 800165c:	f003 faa8 	bl	8004bb0 <HAL_RNG_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001666:	f7ff ffed 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000030c 	.word	0x2000030c
 8001674:	50060800 	.word	0x50060800

08001678 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0a8      	sub	sp, #160	@ 0xa0
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2290      	movs	r2, #144	@ 0x90
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fc2b 	bl	8007ee4 <memset>
  if(rngHandle->Instance==RNG)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <HAL_RNG_MspInit+0x60>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d11b      	bne.n	80016d0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001698:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800169c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fe59 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80016b4:	f7ff ffc6 	bl	8001644 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_RNG_MspInit+0x64>)
 80016ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_RNG_MspInit+0x64>)
 80016be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_RNG_MspInit+0x64>)
 80016c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80016d0:	bf00      	nop
 80016d2:	37a0      	adds	r7, #160	@ 0xa0
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	50060800 	.word	0x50060800
 80016dc:	40023800 	.word	0x40023800

080016e0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <MX_SPI5_Init+0x74>)
 80016e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001758 <MX_SPI5_Init+0x78>)
 80016e8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_SPI5_Init+0x74>)
 80016ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016f0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_SPI5_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <MX_SPI5_Init+0x74>)
 80016fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016fe:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_SPI5_Init+0x74>)
 800170e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001712:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_SPI5_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_SPI5_Init+0x74>)
 800172e:	2207      	movs	r2, #7
 8001730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_SPI5_Init+0x74>)
 800173a:	2208      	movs	r2, #8
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_SPI5_Init+0x74>)
 8001740:	f003 fa60 	bl	8004c04 <HAL_SPI_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800174a:	f7ff ff7b 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000031c 	.word	0x2000031c
 8001758:	40015000 	.word	0x40015000

0800175c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <HAL_SPI_MspInit+0x7c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d128      	bne.n	80017d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800177e:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <HAL_SPI_MspInit+0x80>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a16      	ldr	r2, [pc, #88]	@ (80017dc <HAL_SPI_MspInit+0x80>)
 8001784:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_SPI_MspInit+0x80>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_SPI_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	@ (80017dc <HAL_SPI_MspInit+0x80>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_SPI_MspInit+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80017ae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017c0:	2305      	movs	r3, #5
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <HAL_SPI_MspInit+0x84>)
 80017cc:	f001 fd7c 	bl	80032c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	@ 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40015000 	.word	0x40015000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40021400 	.word	0x40021400

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_MspInit+0x44>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <HAL_MspInit+0x44>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <HAL_MspInit+0x44>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_MspInit+0x44>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a08      	ldr	r2, [pc, #32]	@ (8001828 <HAL_MspInit+0x44>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_MspInit+0x44>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001882:	f000 fc1b 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM2_IRQHandler+0x10>)
 8001892:	f003 ffbd 	bl	8005810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000384 	.word	0x20000384

080018a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <TIM3_IRQHandler+0x10>)
 80018a6:	f003 ffb3 	bl	8005810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200003d0 	.word	0x200003d0

080018b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <USART3_IRQHandler+0x10>)
 80018ba:	f004 ffff 	bl	80068bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000468 	.word	0x20000468

080018c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <TIM5_IRQHandler+0x10>)
 80018ce:	f003 ff9f 	bl	8005810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000041c 	.word	0x2000041c

080018dc <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
// EXTI 9..5
void EXTI9_5_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(EXTI_09_BTN1_Pin);
 80018e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018e4:	f001 feb6 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI_10_BTN2_Pin);
 80018e8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018ec:	f001 feb2 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI_11_BTN3_Pin);
 80018f0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80018f4:	f001 feae 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <EXTI15_10_IRQHandler>:

// EXTI 15..10 (เช่น ปุ่ม USER PC13)
void EXTI15_10_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001900:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001904:	f001 fea6 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI_12_BTN4_Pin);
 8001908:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800190c:	f001 fea2 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    HAL_ADC_IRQHandler(&hadc3);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <ADC_IRQHandler+0x10>)
 800191a:	f000 fc57 	bl	80021cc <HAL_ADC_IRQHandler>
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200001c4 	.word	0x200001c4

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f006 facc 	bl	8007ef4 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20080000 	.word	0x20080000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000380 	.word	0x20000380
 8001990:	20000b20 	.word	0x20000b20

08001994 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <MX_TIM2_Init+0x98>)
 80019d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <MX_TIM2_Init+0x98>)
 80019e0:	226b      	movs	r2, #107	@ 0x6b
 80019e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <MX_TIM2_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <MX_TIM2_Init+0x98>)
 80019ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <MX_TIM2_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <MX_TIM2_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019fe:	4814      	ldr	r0, [pc, #80]	@ (8001a50 <MX_TIM2_Init+0x98>)
 8001a00:	f003 fcaa 	bl	8005358 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a0a:	f7ff fe1b 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <MX_TIM2_Init+0x98>)
 8001a1c:	f004 f914 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a26:	f7ff fe0d 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <MX_TIM2_Init+0x98>)
 8001a38:	f004 fdbc 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a42:	f7ff fdff 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000384 	.word	0x20000384

08001a54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	@ 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001a88:	4a38      	ldr	r2, [pc, #224]	@ (8001b6c <MX_TIM3_Init+0x118>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8001a8c:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001a8e:	226b      	movs	r2, #107	@ 0x6b
 8001a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001a98:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001a9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aac:	482e      	ldr	r0, [pc, #184]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001aae:	f003 fc53 	bl	8005358 <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ab8:	f7ff fdc4 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4827      	ldr	r0, [pc, #156]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001aca:	f004 f8bd 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ad4:	f7ff fdb6 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ad8:	4823      	ldr	r0, [pc, #140]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001ada:	f003 fd3d 	bl	8005558 <HAL_TIM_PWM_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ae4:	f7ff fdae 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	481c      	ldr	r0, [pc, #112]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001af8:	f004 fd5c 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b02:	f7ff fd9f 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b06:	2360      	movs	r3, #96	@ 0x60
 8001b08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4812      	ldr	r0, [pc, #72]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001b1e:	f003 ff7f 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b28:	f7ff fd8c 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001b34:	f003 ff74 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b3e:	f7ff fd81 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	2208      	movs	r2, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001b4a:	f003 ff69 	bl	8005a20 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b54:	f7ff fd76 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b58:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <MX_TIM3_Init+0x114>)
 8001b5a:	f000 f8b3 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3738      	adds	r7, #56	@ 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200003d0 	.word	0x200003d0
 8001b6c:	40000400 	.word	0x40000400

08001b70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001b90:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <MX_TIM5_Init+0x98>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001b96:	226b      	movs	r2, #107	@ 0x6b
 8001b98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001ba2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bb4:	4813      	ldr	r0, [pc, #76]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bb6:	f003 fbcf 	bl	8005358 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001bc0:	f7ff fd40 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bd2:	f004 f839 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001bdc:	f7ff fd32 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_TIM5_Init+0x94>)
 8001bee:	f004 fce1 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f7ff fd24 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000041c 	.word	0x2000041c
 8001c08:	40000c00 	.word	0x40000c00

08001c0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c1c:	d114      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1e:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	201c      	movs	r0, #28
 8001c3c:	f000 ff2d 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c40:	201c      	movs	r0, #28
 8001c42:	f000 ff46 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001c46:	e032      	b.n	8001cae <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <HAL_TIM_Base_MspInit+0xb0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d114      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	201d      	movs	r0, #29
 8001c70:	f000 ff13 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c74:	201d      	movs	r0, #29
 8001c76:	f000 ff2c 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
}
 8001c7a:	e018      	b.n	8001cae <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xb4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xac>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2032      	movs	r0, #50	@ 0x32
 8001ca4:	f000 fef9 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ca8:	2032      	movs	r0, #50	@ 0x32
 8001caa:	f000 ff12 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40000c00 	.word	0x40000c00

08001cc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <HAL_TIM_MspPostInit+0x9c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d138      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_TIM_MspPostInit+0xa0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <HAL_TIM_MspPostInit+0xa0>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_TIM_MspPostInit+0xa0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_TIM_MspPostInit+0xa0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <HAL_TIM_MspPostInit+0xa0>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_TIM_MspPostInit+0xa0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM3_1_RED_Pin;
 8001d16:	2340      	movs	r3, #64	@ 0x40
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM3_1_RED_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <HAL_TIM_MspPostInit+0xa4>)
 8001d32:	f001 fac9 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_2_GREEN_Pin|TIM3_3_BLUE_Pin;
 8001d36:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <HAL_TIM_MspPostInit+0xa8>)
 8001d54:	f001 fab8 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	@ 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020800 	.word	0x40020800

08001d70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d74:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <MX_USART3_UART_Init+0x5c>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d82:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d96:	220c      	movs	r2, #12
 8001d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001db4:	f004 fcaa 	bl	800670c <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dbe:	f7ff fc41 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000468 	.word	0x20000468
 8001dcc:	40004800 	.word	0x40004800

08001dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0ae      	sub	sp, #184	@ 0xb8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2290      	movs	r2, #144	@ 0x90
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f006 f877 	bl	8007ee4 <memset>
  if(uartHandle->Instance==USART3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a26      	ldr	r2, [pc, #152]	@ (8001e94 <HAL_UART_MspInit+0xc4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d144      	bne.n	8001e8a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 faa6 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e1a:	f7ff fc13 	bl	8001644 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_UART_MspInit+0xc8>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_UART_MspInit+0xc8>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_UART_MspInit+0xc8>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_UART_MspInit+0xc8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4a17      	ldr	r2, [pc, #92]	@ (8001e98 <HAL_UART_MspInit+0xc8>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_UART_MspInit+0xc8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4809      	ldr	r0, [pc, #36]	@ (8001e9c <HAL_UART_MspInit+0xcc>)
 8001e76:	f001 fa27 	bl	80032c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2027      	movs	r0, #39	@ 0x27
 8001e80:	f000 fe0b 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e84:	2027      	movs	r0, #39	@ 0x27
 8001e86:	f000 fe24 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	37b8      	adds	r7, #184	@ 0xb8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40004800 	.word	0x40004800
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020c00 	.word	0x40020c00

08001ea0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001eaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eae:	2206      	movs	r2, #6
 8001eb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ee4:	f001 fbce 	bl	8003684 <HAL_PCD_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001eee:	f7ff fba9 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200004f0 	.word	0x200004f0

08001efc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0ae      	sub	sp, #184	@ 0xb8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2290      	movs	r2, #144	@ 0x90
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f005 ffe1 	bl	8007ee4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f2a:	d159      	bne.n	8001fe0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fa0f 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f48:	f7ff fb7c 	bl	8001644 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	4a25      	ldr	r2, [pc, #148]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f64:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001f68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f7e:	230a      	movs	r3, #10
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4818      	ldr	r0, [pc, #96]	@ (8001fec <HAL_PCD_MspInit+0xf0>)
 8001f8c:	f001 f99c 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4810      	ldr	r0, [pc, #64]	@ (8001fec <HAL_PCD_MspInit+0xf0>)
 8001fac:	f001 f98c 	bl	80032c8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fba:	6353      	str	r3, [r2, #52]	@ 0x34
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <HAL_PCD_MspInit+0xec>)
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	37b8      	adds	r7, #184	@ 0xb8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ff4:	f7ff fcce 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffa:	490d      	ldr	r1, [pc, #52]	@ (8002030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002010:	4c0a      	ldr	r4, [pc, #40]	@ (800203c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800201e:	f005 ff6f 	bl	8007f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7ff f94b 	bl	80012bc <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002034:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 8002038:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 800203c:	20000b1c 	.word	0x20000b1c

08002040 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <CAN1_RX0_IRQHandler>

08002042 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002046:	2003      	movs	r0, #3
 8002048:	f000 fd1c 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f805 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002052:	f7ff fbc7 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd37 	bl	8002aee <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 fcff 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	@ (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000000c 	.word	0x2000000c
 80020b4:	20000014 	.word	0x20000014
 80020b8:	20000010 	.word	0x20000010

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000014 	.word	0x20000014
 80020e0:	200009d0 	.word	0x200009d0

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	200009d0 	.word	0x200009d0

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000014 	.word	0x20000014

08002144 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e031      	b.n	80021be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fda4 	bl	8000cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <HAL_ADC_Init+0x84>)
 8002188:	4013      	ands	r3, r2
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 faa2 	bl	80026dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80021ae:	e001      	b.n	80021b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	ffffeefd 	.word	0xffffeefd

080021cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d049      	beq.n	8002296 <HAL_ADC_IRQHandler+0xca>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d046      	beq.n	8002296 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12b      	bne.n	8002286 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d127      	bne.n	8002286 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800224e:	2b00      	cmp	r3, #0
 8002250:	d119      	bne.n	8002286 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0220 	bic.w	r2, r2, #32
 8002260:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8b0 	bl	80023ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0212 	mvn.w	r2, #18
 8002294:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d057      	beq.n	800235c <HAL_ADC_IRQHandler+0x190>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d054      	beq.n	800235c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d139      	bne.n	800234c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022de:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d12b      	bne.n	800234c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d124      	bne.n	800234c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11d      	bne.n	800234c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d119      	bne.n	800234c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002326:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fabf 	bl	80028d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 020c 	mvn.w	r2, #12
 800235a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d017      	beq.n	80023a2 <HAL_ADC_IRQHandler+0x1d6>
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d014      	beq.n	80023a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d10d      	bne.n	80023a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f834 	bl	8002400 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0201 	mvn.w	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x218>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0220 	mvn.w	r2, #32
 80023d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f81d 	bl	8002414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f06f 0220 	mvn.w	r2, #32
 80023e2:	601a      	str	r2, [r3, #0]
  }
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e13a      	b.n	80026ba <HAL_ADC_ConfigChannel+0x292>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d93a      	bls.n	80024ca <HAL_ADC_ConfigChannel+0xa2>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800245c:	d035      	beq.n	80024ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68d9      	ldr	r1, [r3, #12]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	3b1e      	subs	r3, #30
 8002474:	2207      	movs	r2, #7
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a8f      	ldr	r2, [pc, #572]	@ (80026c8 <HAL_ADC_ConfigChannel+0x2a0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10a      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68d9      	ldr	r1, [r3, #12]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	061a      	lsls	r2, r3, #24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a2:	e039      	b.n	8002518 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68d9      	ldr	r1, [r3, #12]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4403      	add	r3, r0
 80024bc:	3b1e      	subs	r3, #30
 80024be:	409a      	lsls	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c8:	e026      	b.n	8002518 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2207      	movs	r2, #7
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	4603      	mov	r3, r0
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4403      	add	r3, r0
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	409a      	lsls	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d824      	bhi.n	800256a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b05      	subs	r3, #5
 8002532:	221f      	movs	r2, #31
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43da      	mvns	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	400a      	ands	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b05      	subs	r3, #5
 800255c:	fa00 f203 	lsl.w	r2, r0, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34
 8002568:	e04c      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d824      	bhi.n	80025bc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b23      	subs	r3, #35	@ 0x23
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b23      	subs	r3, #35	@ 0x23
 80025ae:	fa00 f203 	lsl.w	r2, r0, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80025ba:	e023      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	3b41      	subs	r3, #65	@ 0x41
 80025ce:	221f      	movs	r2, #31
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b41      	subs	r3, #65	@ 0x41
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_ADC_ConfigChannel+0x2a4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1fc>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002616:	d105      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002618:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a2c      	ldr	r2, [pc, #176]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800261e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002622:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a28      	ldr	r2, [pc, #160]	@ (80026cc <HAL_ADC_ConfigChannel+0x2a4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10f      	bne.n	800264e <HAL_ADC_ConfigChannel+0x226>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b12      	cmp	r3, #18
 8002634:	d10b      	bne.n	800264e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002636:	4b26      	ldr	r3, [pc, #152]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a25      	ldr	r2, [pc, #148]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800263c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002640:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002642:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002648:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800264c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_ADC_ConfigChannel+0x2a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d12b      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x288>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1a      	ldr	r2, [pc, #104]	@ (80026c8 <HAL_ADC_ConfigChannel+0x2a0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <HAL_ADC_ConfigChannel+0x242>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b11      	cmp	r3, #17
 8002668:	d122      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800266a:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002670:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002674:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002676:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800267c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002680:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a10      	ldr	r2, [pc, #64]	@ (80026c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d111      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_ADC_ConfigChannel+0x2ac>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_ConfigChannel+0x2b0>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0c9a      	lsrs	r2, r3, #18
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026a2:	e002      	b.n	80026aa <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f9      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	10000012 	.word	0x10000012
 80026cc:	40012000 	.word	0x40012000
 80026d0:	40012300 	.word	0x40012300
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	431bde83 	.word	0x431bde83

080026dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026e4:	4b78      	ldr	r3, [pc, #480]	@ (80028c8 <ADC_Init+0x1ec>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a77      	ldr	r2, [pc, #476]	@ (80028c8 <ADC_Init+0x1ec>)
 80026ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80026ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026f0:	4b75      	ldr	r3, [pc, #468]	@ (80028c8 <ADC_Init+0x1ec>)
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4973      	ldr	r1, [pc, #460]	@ (80028c8 <ADC_Init+0x1ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800270c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	021a      	lsls	r2, r3, #8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	4a58      	ldr	r2, [pc, #352]	@ (80028cc <ADC_Init+0x1f0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800277e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e00f      	b.n	80027d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0202 	bic.w	r2, r2, #2
 80027e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	005a      	lsls	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	3b01      	subs	r3, #1
 8002830:	035a      	lsls	r2, r3, #13
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	e007      	b.n	800284c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800284a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	3b01      	subs	r3, #1
 8002868:	051a      	lsls	r2, r3, #20
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800288e:	025a      	lsls	r2, r3, #9
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6899      	ldr	r1, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	029a      	lsls	r2, r3, #10
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012300 	.word	0x40012300
 80028cc:	0f000001 	.word	0x0f000001

080028d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <__NVIC_SetPriorityGrouping+0x40>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <__NVIC_SetPriorityGrouping+0x40>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00
 8002928:	05fa0000 	.word	0x05fa0000

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	@ (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	@ (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	@ 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff8e 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff29 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff3e 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff8e 	bl	80029d8 <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5d 	bl	8002984 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff31 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fae6 	bl	80020e4 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d008      	beq.n	8002b38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e052      	b.n	8002bde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0216 	bic.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <HAL_DMA_Abort+0x62>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0208 	bic.w	r2, r2, #8
 8002b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b88:	e013      	b.n	8002bb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8a:	f7ff faab 	bl	80020e4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d90c      	bls.n	8002bb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e015      	b.n	8002bde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e4      	bne.n	8002b8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	223f      	movs	r2, #63	@ 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2280      	movs	r2, #128	@ 0x80
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e00c      	b.n	8002c1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2205      	movs	r2, #5
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e086      	b.n	8002d4c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe f8ef 	bl	8000e34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <HAL_ETH_Init+0x128>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d54 <HAL_ETH_Init+0x128>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c62:	4b3c      	ldr	r3, [pc, #240]	@ (8002d54 <HAL_ETH_Init+0x128>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d58 <HAL_ETH_Init+0x12c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a39      	ldr	r2, [pc, #228]	@ (8002d58 <HAL_ETH_Init+0x12c>)
 8002c74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c78:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c7a:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <HAL_ETH_Init+0x12c>)
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4935      	ldr	r1, [pc, #212]	@ (8002d58 <HAL_ETH_Init+0x12c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c88:	4b33      	ldr	r3, [pc, #204]	@ (8002d58 <HAL_ETH_Init+0x12c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ca2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca4:	f7ff fa1e 	bl	80020e4 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002caa:	e011      	b.n	8002cd0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002cac:	f7ff fa1a 	bl	80020e4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002cba:	d909      	bls.n	8002cd0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	22e0      	movs	r2, #224	@ 0xe0
 8002cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e03d      	b.n	8002d4c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e4      	bne.n	8002cac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f97a 	bl	8002fdc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fa25 	bl	8003138 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa7b 	bl	80031ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f9e3 	bl	80030c8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002d10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_ETH_Init+0x130>)
 8002d20:	430b      	orrs	r3, r1
 8002d22:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002d36:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	00020060 	.word	0x00020060

08002d60 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <ETH_SetMACConfig+0x164>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	7b9b      	ldrb	r3, [r3, #14]
 8002d7e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	7c12      	ldrb	r2, [r2, #16]
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d102      	bne.n	8002d8e <ETH_SetMACConfig+0x2e>
 8002d88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d8c:	e000      	b.n	8002d90 <ETH_SetMACConfig+0x30>
 8002d8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	7c52      	ldrb	r2, [r2, #17]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d102      	bne.n	8002da0 <ETH_SetMACConfig+0x40>
 8002d9a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d9e:	e000      	b.n	8002da2 <ETH_SetMACConfig+0x42>
 8002da0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002da2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002da8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	7fdb      	ldrb	r3, [r3, #31]
 8002dae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002db0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002db6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	7f92      	ldrb	r2, [r2, #30]
 8002dbc:	2a00      	cmp	r2, #0
 8002dbe:	d102      	bne.n	8002dc6 <ETH_SetMACConfig+0x66>
 8002dc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dc4:	e000      	b.n	8002dc8 <ETH_SetMACConfig+0x68>
 8002dc6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	7f1b      	ldrb	r3, [r3, #28]
 8002dce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dd0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	791b      	ldrb	r3, [r3, #4]
 8002ddc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d102      	bne.n	8002df0 <ETH_SetMACConfig+0x90>
 8002dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dee:	e000      	b.n	8002df2 <ETH_SetMACConfig+0x92>
 8002df0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002df2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	7bdb      	ldrb	r3, [r3, #15]
 8002df8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dfa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7ff f96a 	bl	80020fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	d101      	bne.n	8002e56 <ETH_SetMACConfig+0xf6>
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	e000      	b.n	8002e58 <ETH_SetMACConfig+0xf8>
 8002e56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002e66:	2a01      	cmp	r2, #1
 8002e68:	d101      	bne.n	8002e6e <ETH_SetMACConfig+0x10e>
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	e000      	b.n	8002e70 <ETH_SetMACConfig+0x110>
 8002e6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002e78:	2a01      	cmp	r2, #1
 8002e7a:	d101      	bne.n	8002e80 <ETH_SetMACConfig+0x120>
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	e000      	b.n	8002e82 <ETH_SetMACConfig+0x122>
 8002e80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002e8a:	2a01      	cmp	r2, #1
 8002e8c:	d101      	bne.n	8002e92 <ETH_SetMACConfig+0x132>
 8002e8e:	2202      	movs	r2, #2
 8002e90:	e000      	b.n	8002e94 <ETH_SetMACConfig+0x134>
 8002e92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e94:	4313      	orrs	r3, r2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7ff f925 	bl	80020fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	fd20810f 	.word	0xfd20810f

08002ec8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <ETH_SetDMAConfig+0x110>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	7b1b      	ldrb	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <ETH_SetDMAConfig+0x2c>
 8002eee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ef2:	e000      	b.n	8002ef6 <ETH_SetDMAConfig+0x2e>
 8002ef4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	7b5b      	ldrb	r3, [r3, #13]
 8002efa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002efc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	7f52      	ldrb	r2, [r2, #29]
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	d102      	bne.n	8002f0c <ETH_SetDMAConfig+0x44>
 8002f06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f0a:	e000      	b.n	8002f0e <ETH_SetDMAConfig+0x46>
 8002f0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7b9b      	ldrb	r3, [r3, #14]
 8002f14:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f16:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	7f1b      	ldrb	r3, [r3, #28]
 8002f22:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	7f9b      	ldrb	r3, [r3, #30]
 8002f2a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f2c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f3a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7ff f8cc 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	791b      	ldrb	r3, [r3, #4]
 8002f76:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f7c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f82:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f88:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f90:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f92:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f9a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fa0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002faa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7ff f89d 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	f8de3f23 	.word	0xf8de3f23

08002fdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0a6      	sub	sp, #152	@ 0x98
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800301e:	2300      	movs	r3, #0
 8003020:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003028:	2300      	movs	r3, #0
 800302a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003044:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003048:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800304a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003056:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fe7f 	bl	8002d60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003062:	2301      	movs	r3, #1
 8003064:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003066:	2301      	movs	r3, #1
 8003068:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003070:	2301      	movs	r3, #1
 8003072:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003092:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003096:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003098:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800309c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800309e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030a2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff05 	bl	8002ec8 <ETH_SetDMAConfig>
}
 80030be:	bf00      	nop
 80030c0:	3798      	adds	r7, #152	@ 0x98
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3305      	adds	r3, #5
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	3204      	adds	r2, #4
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <ETH_MACAddressConfig+0x68>)
 80030ea:	4413      	add	r3, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3303      	adds	r3, #3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	061a      	lsls	r2, r3, #24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3302      	adds	r3, #2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	4313      	orrs	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <ETH_MACAddressConfig+0x6c>)
 800311a:	4413      	add	r3, r2
 800311c:	461a      	mov	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6013      	str	r3, [r2, #0]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40028040 	.word	0x40028040
 8003134:	40028044 	.word	0x40028044

08003138 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e03e      	b.n	80031c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	3206      	adds	r2, #6
 8003178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d80c      	bhi.n	80031a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	461a      	mov	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e004      	b.n	80031b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3301      	adds	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d9bd      	bls.n	8003146 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031dc:	611a      	str	r2, [r3, #16]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e048      	b.n	800328a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6919      	ldr	r1, [r3, #16]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003234:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	3212      	adds	r2, #18
 8003256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d80c      	bhi.n	800327a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6919      	ldr	r1, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e004      	b.n	8003284 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d9b3      	bls.n	80031f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ba:	60da      	str	r2, [r3, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e175      	b.n	80035d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 8164 	bne.w	80035ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d005      	beq.n	800331e <HAL_GPIO_Init+0x56>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d130      	bne.n	8003380 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0201 	and.w	r2, r3, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d017      	beq.n	80033bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d123      	bne.n	8003410 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	220f      	movs	r2, #15
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80be 	beq.w	80035ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	4b66      	ldr	r3, [pc, #408]	@ (80035ec <HAL_GPIO_Init+0x324>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003456:	4a65      	ldr	r2, [pc, #404]	@ (80035ec <HAL_GPIO_Init+0x324>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800345c:	6453      	str	r3, [r2, #68]	@ 0x44
 800345e:	4b63      	ldr	r3, [pc, #396]	@ (80035ec <HAL_GPIO_Init+0x324>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800346a:	4a61      	ldr	r2, [pc, #388]	@ (80035f0 <HAL_GPIO_Init+0x328>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	@ (80035f4 <HAL_GPIO_Init+0x32c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d037      	beq.n	8003506 <HAL_GPIO_Init+0x23e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a57      	ldr	r2, [pc, #348]	@ (80035f8 <HAL_GPIO_Init+0x330>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_GPIO_Init+0x23a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a56      	ldr	r2, [pc, #344]	@ (80035fc <HAL_GPIO_Init+0x334>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02b      	beq.n	80034fe <HAL_GPIO_Init+0x236>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a55      	ldr	r2, [pc, #340]	@ (8003600 <HAL_GPIO_Init+0x338>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x232>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a54      	ldr	r2, [pc, #336]	@ (8003604 <HAL_GPIO_Init+0x33c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x22e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a53      	ldr	r2, [pc, #332]	@ (8003608 <HAL_GPIO_Init+0x340>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x22a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	@ (800360c <HAL_GPIO_Init+0x344>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x226>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a51      	ldr	r2, [pc, #324]	@ (8003610 <HAL_GPIO_Init+0x348>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x222>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a50      	ldr	r2, [pc, #320]	@ (8003614 <HAL_GPIO_Init+0x34c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003618 <HAL_GPIO_Init+0x350>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x21a>
 80034de:	2309      	movs	r3, #9
 80034e0:	e012      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e2:	230a      	movs	r3, #10
 80034e4:	e010      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e00e      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ea:	2307      	movs	r3, #7
 80034ec:	e00c      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00a      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f2:	2305      	movs	r3, #5
 80034f4:	e008      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e004      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fe:	2302      	movs	r3, #2
 8003500:	e002      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003506:	2300      	movs	r3, #0
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f002 0203 	and.w	r2, r2, #3
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	4093      	lsls	r3, r2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003518:	4935      	ldr	r1, [pc, #212]	@ (80035f0 <HAL_GPIO_Init+0x328>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_GPIO_Init+0x354>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800354a:	4a34      	ldr	r2, [pc, #208]	@ (800361c <HAL_GPIO_Init+0x354>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_GPIO_Init+0x354>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003574:	4a29      	ldr	r2, [pc, #164]	@ (800361c <HAL_GPIO_Init+0x354>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800357a:	4b28      	ldr	r3, [pc, #160]	@ (800361c <HAL_GPIO_Init+0x354>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800359e:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_GPIO_Init+0x354>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_GPIO_Init+0x354>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <HAL_GPIO_Init+0x354>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	f67f ae86 	bls.w	80032e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3724      	adds	r7, #36	@ 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020c00 	.word	0x40020c00
 8003604:	40021000 	.word	0x40021000
 8003608:	40021400 	.word	0x40021400
 800360c:	40021800 	.word	0x40021800
 8003610:	40021c00 	.word	0x40021c00
 8003614:	40022000 	.word	0x40022000
 8003618:	40022400 	.word	0x40022400
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fefa 	bl	800146c <HAL_GPIO_EXTI_Callback>
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af02      	add	r7, sp, #8
 800368a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e108      	b.n	80038a8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fe fc23 	bl	8001efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c4:	d102      	bne.n	80036cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f004 f935 	bl	8007940 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	7c1a      	ldrb	r2, [r3, #16]
 80036de:	f88d 2000 	strb.w	r2, [sp]
 80036e2:	3304      	adds	r3, #4
 80036e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e6:	f004 f8d1 	bl	800788c <USB_CoreInit>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0d5      	b.n	80038a8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f004 f92d 	bl	8007962 <USB_SetCurrentMode>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0c6      	b.n	80038a8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e04a      	b.n	80037b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3315      	adds	r3, #21
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3314      	adds	r3, #20
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	b298      	uxth	r0, r3
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	332e      	adds	r3, #46	@ 0x2e
 800375c:	4602      	mov	r2, r0
 800375e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3318      	adds	r3, #24
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	331c      	adds	r3, #28
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3320      	adds	r3, #32
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3324      	adds	r3, #36	@ 0x24
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	3301      	adds	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	791b      	ldrb	r3, [r3, #4]
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3af      	bcc.n	8003720 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e044      	b.n	8003850 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	3301      	adds	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	791b      	ldrb	r3, [r3, #4]
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3b5      	bcc.n	80037c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7c1a      	ldrb	r2, [r3, #16]
 8003862:	f88d 2000 	strb.w	r2, [sp]
 8003866:	3304      	adds	r3, #4
 8003868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386a:	f004 f8c7 	bl	80079fc <USB_DevInit>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e013      	b.n	80038a8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7b1b      	ldrb	r3, [r3, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d102      	bne.n	800389c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f80a 	bl	80038b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 fa82 	bl	8007daa <USB_DevDisconnect>

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	10000003 	.word	0x10000003

080038f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40007000 	.word	0x40007000

08003918 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	4a22      	ldr	r2, [pc, #136]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	@ 0x40
 800392e:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800393a:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003946:	f7fe fbcd 	bl	80020e4 <HAL_GetTick>
 800394a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800394c:	e009      	b.n	8003962 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800394e:	f7fe fbc9 	bl	80020e4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800395c:	d901      	bls.n	8003962 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e022      	b.n	80039a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003962:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396e:	d1ee      	bne.n	800394e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003970:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0f      	ldr	r2, [pc, #60]	@ (80039b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800397c:	f7fe fbb2 	bl	80020e4 <HAL_GetTick>
 8003980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003982:	e009      	b.n	8003998 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003984:	f7fe fbae 	bl	80020e4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003992:	d901      	bls.n	8003998 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e007      	b.n	80039a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003998:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a4:	d1ee      	bne.n	8003984 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e29b      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8087 	beq.w	8003aea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039dc:	4b96      	ldr	r3, [pc, #600]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e8:	4b93      	ldr	r3, [pc, #588]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d112      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62>
 80039f4:	4b90      	ldr	r3, [pc, #576]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a00:	d10b      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	4b8d      	ldr	r3, [pc, #564]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x130>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d168      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e275      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x7a>
 8003a24:	4b84      	ldr	r3, [pc, #528]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a83      	ldr	r2, [pc, #524]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02e      	b.n	8003a90 <HAL_RCC_OscConfig+0xd8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x9c>
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b7c      	ldr	r3, [pc, #496]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0xd8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	4b76      	ldr	r3, [pc, #472]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b73      	ldr	r3, [pc, #460]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a72      	ldr	r2, [pc, #456]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xd8>
 8003a78:	4b6f      	ldr	r3, [pc, #444]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b6c      	ldr	r3, [pc, #432]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6b      	ldr	r2, [pc, #428]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fb24 	bl	80020e4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fb20 	bl	80020e4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e229      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b61      	ldr	r3, [pc, #388]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fb10 	bl	80020e4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fb0c 	bl	80020e4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	@ 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e215      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	4b57      	ldr	r3, [pc, #348]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x110>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d069      	beq.n	8003bca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	4b50      	ldr	r3, [pc, #320]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b4d      	ldr	r3, [pc, #308]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x190>
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d116      	bne.n	8003b48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	4b47      	ldr	r3, [pc, #284]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1e9      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b41      	ldr	r3, [pc, #260]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	493d      	ldr	r1, [pc, #244]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	e040      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d023      	beq.n	8003b98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a38      	ldr	r2, [pc, #224]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fac2 	bl	80020e4 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe fabe 	bl	80020e4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1c7      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b30      	ldr	r3, [pc, #192]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b2d      	ldr	r3, [pc, #180]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4929      	ldr	r1, [pc, #164]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
 8003b96:	e018      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b98:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fa9e 	bl	80020e4 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe fa9a 	bl	80020e4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1a3      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d038      	beq.n	8003c48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d019      	beq.n	8003c12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7fe fa7b 	bl	80020e4 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fa77 	bl	80020e4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e180      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c04:	4b0c      	ldr	r3, [pc, #48]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x23a>
 8003c10:	e01a      	b.n	8003c48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	4a08      	ldr	r2, [pc, #32]	@ (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fa61 	bl	80020e4 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe fa5d 	bl	80020e4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d903      	bls.n	8003c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e166      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
 8003c38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	4b92      	ldr	r3, [pc, #584]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ee      	bne.n	8003c26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a4 	beq.w	8003d9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b8c      	ldr	r3, [pc, #560]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10d      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	4b89      	ldr	r3, [pc, #548]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	4a88      	ldr	r2, [pc, #544]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6e:	4b86      	ldr	r3, [pc, #536]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7e:	4b83      	ldr	r3, [pc, #524]	@ (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d118      	bne.n	8003cbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c8a:	4b80      	ldr	r3, [pc, #512]	@ (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7f      	ldr	r2, [pc, #508]	@ (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fe fa25 	bl	80020e4 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7fe fa21 	bl	80020e4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	@ 0x64
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e12a      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb0:	4b76      	ldr	r3, [pc, #472]	@ (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x31a>
 8003cc4:	4b70      	ldr	r3, [pc, #448]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc8:	4a6f      	ldr	r2, [pc, #444]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd0:	e02d      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x33c>
 8003cda:	4b6b      	ldr	r3, [pc, #428]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	4a6a      	ldr	r2, [pc, #424]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce6:	4b68      	ldr	r3, [pc, #416]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cea:	4a67      	ldr	r2, [pc, #412]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf2:	e01c      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d10c      	bne.n	8003d16 <HAL_RCC_OscConfig+0x35e>
 8003cfc:	4b62      	ldr	r3, [pc, #392]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	4a61      	ldr	r2, [pc, #388]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d08:	4b5f      	ldr	r3, [pc, #380]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d14:	e00b      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
 8003d16:	4b5c      	ldr	r3, [pc, #368]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d22:	4b59      	ldr	r3, [pc, #356]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	4a58      	ldr	r2, [pc, #352]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d015      	beq.n	8003d62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fe f9d5 	bl	80020e4 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe f9d1 	bl	80020e4 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0d8      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	4b4c      	ldr	r3, [pc, #304]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ee      	beq.n	8003d3e <HAL_RCC_OscConfig+0x386>
 8003d60:	e014      	b.n	8003d8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe f9bf 	bl	80020e4 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fe f9bb 	bl	80020e4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0c2      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ee      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b3d      	ldr	r3, [pc, #244]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	4a3c      	ldr	r2, [pc, #240]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80ae 	beq.w	8003f04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da8:	4b37      	ldr	r3, [pc, #220]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d06d      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d14b      	bne.n	8003e54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbc:	4b32      	ldr	r3, [pc, #200]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a31      	ldr	r2, [pc, #196]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f98c 	bl	80020e4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe f988 	bl	80020e4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e091      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b29      	ldr	r3, [pc, #164]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	071b      	lsls	r3, r3, #28
 8003e1a:	491b      	ldr	r1, [pc, #108]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e20:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f95a 	bl	80020e4 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe f956 	bl	80020e4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e05f      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x47c>
 8003e52:	e057      	b.n	8003f04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0b      	ldr	r2, [pc, #44]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f940 	bl	80020e4 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f93c 	bl	80020e4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e045      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	4b03      	ldr	r3, [pc, #12]	@ (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4b0>
 8003e86:	e03d      	b.n	8003f04 <HAL_RCC_OscConfig+0x54c>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e90:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <HAL_RCC_OscConfig+0x558>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d030      	beq.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d129      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d122      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ec6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d119      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10f      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0d0      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d910      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b67      	ldr	r3, [pc, #412]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 020f 	bic.w	r2, r3, #15
 8003f42:	4965      	ldr	r1, [pc, #404]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b63      	ldr	r3, [pc, #396]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0b8      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d020      	beq.n	8003faa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f74:	4b59      	ldr	r3, [pc, #356]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4a58      	ldr	r2, [pc, #352]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f8c:	4b53      	ldr	r3, [pc, #332]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a52      	ldr	r2, [pc, #328]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f98:	4b50      	ldr	r3, [pc, #320]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	494d      	ldr	r1, [pc, #308]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d040      	beq.n	8004038 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d115      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07f      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	4b41      	ldr	r3, [pc, #260]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e073      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e06b      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4936      	ldr	r1, [pc, #216]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fe f86c 	bl	80020e4 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	e00a      	b.n	8004026 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004010:	f7fe f868 	bl	80020e4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e053      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	4b2d      	ldr	r3, [pc, #180]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 020c 	and.w	r2, r3, #12
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	429a      	cmp	r2, r3
 8004036:	d1eb      	bne.n	8004010 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004038:	4b27      	ldr	r3, [pc, #156]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d210      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b24      	ldr	r3, [pc, #144]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 020f 	bic.w	r2, r3, #15
 800404e:	4922      	ldr	r1, [pc, #136]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b20      	ldr	r3, [pc, #128]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e032      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004074:	4b19      	ldr	r3, [pc, #100]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4916      	ldr	r1, [pc, #88]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004092:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	490e      	ldr	r1, [pc, #56]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040a6:	f000 f821 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 80040aa:	4602      	mov	r2, r0
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	490a      	ldr	r1, [pc, #40]	@ (80040e0 <HAL_RCC_ClockConfig+0x1cc>)
 80040b8:	5ccb      	ldrb	r3, [r1, r3]
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	4a09      	ldr	r2, [pc, #36]	@ (80040e4 <HAL_RCC_ClockConfig+0x1d0>)
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1d4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd ffc8 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023c00 	.word	0x40023c00
 80040dc:	40023800 	.word	0x40023800
 80040e0:	08008808 	.word	0x08008808
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	20000010 	.word	0x20000010

080040ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b094      	sub	sp, #80	@ 0x50
 80040f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f8:	2300      	movs	r3, #0
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040fc:	2300      	movs	r3, #0
 80040fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004104:	4b79      	ldr	r3, [pc, #484]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b08      	cmp	r3, #8
 800410e:	d00d      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x40>
 8004110:	2b08      	cmp	r3, #8
 8004112:	f200 80e1 	bhi.w	80042d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x34>
 800411a:	2b04      	cmp	r3, #4
 800411c:	d003      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x3a>
 800411e:	e0db      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b73      	ldr	r3, [pc, #460]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004124:	e0db      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004126:	4b73      	ldr	r3, [pc, #460]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004128:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800412a:	e0d8      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800412c:	4b6f      	ldr	r3, [pc, #444]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004134:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004136:	4b6d      	ldr	r3, [pc, #436]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004142:	4b6a      	ldr	r3, [pc, #424]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	2200      	movs	r2, #0
 800414a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800414c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	633b      	str	r3, [r7, #48]	@ 0x30
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	@ 0x34
 800415a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	0159      	lsls	r1, r3, #5
 800416c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004170:	0150      	lsls	r0, r2, #5
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4621      	mov	r1, r4
 8004178:	1a51      	subs	r1, r2, r1
 800417a:	6139      	str	r1, [r7, #16]
 800417c:	4629      	mov	r1, r5
 800417e:	eb63 0301 	sbc.w	r3, r3, r1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004190:	4659      	mov	r1, fp
 8004192:	018b      	lsls	r3, r1, #6
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800419a:	4651      	mov	r1, sl
 800419c:	018a      	lsls	r2, r1, #6
 800419e:	4651      	mov	r1, sl
 80041a0:	ebb2 0801 	subs.w	r8, r2, r1
 80041a4:	4659      	mov	r1, fp
 80041a6:	eb63 0901 	sbc.w	r9, r3, r1
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041be:	4690      	mov	r8, r2
 80041c0:	4699      	mov	r9, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	eb18 0303 	adds.w	r3, r8, r3
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	462b      	mov	r3, r5
 80041cc:	eb49 0303 	adc.w	r3, r9, r3
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041de:	4629      	mov	r1, r5
 80041e0:	024b      	lsls	r3, r1, #9
 80041e2:	4621      	mov	r1, r4
 80041e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e8:	4621      	mov	r1, r4
 80041ea:	024a      	lsls	r2, r1, #9
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f2:	2200      	movs	r2, #0
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041fc:	f7fc f878 	bl	80002f0 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4613      	mov	r3, r2
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004208:	e058      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b38      	ldr	r3, [pc, #224]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	2200      	movs	r2, #0
 8004212:	4618      	mov	r0, r3
 8004214:	4611      	mov	r1, r2
 8004216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	2300      	movs	r3, #0
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	f04f 0000 	mov.w	r0, #0
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	0159      	lsls	r1, r3, #5
 8004232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004236:	0150      	lsls	r0, r2, #5
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4641      	mov	r1, r8
 800423e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004242:	4649      	mov	r1, r9
 8004244:	eb63 0b01 	sbc.w	fp, r3, r1
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800425c:	ebb2 040a 	subs.w	r4, r2, sl
 8004260:	eb63 050b 	sbc.w	r5, r3, fp
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	00eb      	lsls	r3, r5, #3
 800426e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004272:	00e2      	lsls	r2, r4, #3
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	4643      	mov	r3, r8
 800427a:	18e3      	adds	r3, r4, r3
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	464b      	mov	r3, r9
 8004280:	eb45 0303 	adc.w	r3, r5, r3
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004292:	4629      	mov	r1, r5
 8004294:	028b      	lsls	r3, r1, #10
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800429c:	4621      	mov	r1, r4
 800429e:	028a      	lsls	r2, r1, #10
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	61fa      	str	r2, [r7, #28]
 80042ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b0:	f7fc f81e 	bl	80002f0 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	3301      	adds	r3, #1
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d6:	e002      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3750      	adds	r7, #80	@ 0x50
 80042e4:	46bd      	mov	sp, r7
 80042e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800
 80042f0:	00f42400 	.word	0x00f42400
 80042f4:	007a1200 	.word	0x007a1200

080042f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b03      	ldr	r3, [pc, #12]	@ (800430c <HAL_RCC_GetHCLKFreq+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c

08004310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004314:	f7ff fff0 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4903      	ldr	r1, [pc, #12]	@ (8004334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023800 	.word	0x40023800
 8004334:	08008818 	.word	0x08008818

08004338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800433c:	f7ff ffdc 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0b5b      	lsrs	r3, r3, #13
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4903      	ldr	r1, [pc, #12]	@ (800435c <HAL_RCC_GetPCLK2Freq+0x24>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	08008818 	.word	0x08008818

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004388:	4b69      	ldr	r3, [pc, #420]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a68      	ldr	r2, [pc, #416]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	4b66      	ldr	r3, [pc, #408]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439c:	4964      	ldr	r1, [pc, #400]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	4959      	ldr	r1, [pc, #356]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043d8:	d101      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	494a      	ldr	r1, [pc, #296]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 808b 	beq.w	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004444:	4b3a      	ldr	r3, [pc, #232]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	4a39      	ldr	r2, [pc, #228]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004450:	4b37      	ldr	r3, [pc, #220]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800445c:	4b35      	ldr	r3, [pc, #212]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a34      	ldr	r2, [pc, #208]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fd fe3c 	bl	80020e4 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7fd fe38 	bl	80020e4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e38f      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004482:	4b2c      	ldr	r3, [pc, #176]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800448e:	4b28      	ldr	r3, [pc, #160]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004496:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d035      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d02e      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ac:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ce:	4a18      	ldr	r2, [pc, #96]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044d4:	4b16      	ldr	r3, [pc, #88]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d114      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd fe00 	bl	80020e4 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	e00a      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fd fdfc 	bl	80020e4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e351      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ee      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004516:	d111      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004518:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004526:	400b      	ands	r3, r1
 8004528:	4901      	ldr	r1, [pc, #4]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004530:	40023800 	.word	0x40023800
 8004534:	40007000 	.word	0x40007000
 8004538:	0ffffcff 	.word	0x0ffffcff
 800453c:	4bac      	ldr	r3, [pc, #688]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4aab      	ldr	r2, [pc, #684]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004542:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004546:	6093      	str	r3, [r2, #8]
 8004548:	4ba9      	ldr	r3, [pc, #676]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	49a6      	ldr	r1, [pc, #664]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	4313      	orrs	r3, r2
 8004558:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004566:	4ba2      	ldr	r3, [pc, #648]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800456c:	4aa0      	ldr	r2, [pc, #640]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004572:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004576:	4b9e      	ldr	r3, [pc, #632]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004578:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	499b      	ldr	r1, [pc, #620]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004594:	4b96      	ldr	r3, [pc, #600]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a2:	4993      	ldr	r1, [pc, #588]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b6:	4b8e      	ldr	r3, [pc, #568]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c4:	498a      	ldr	r1, [pc, #552]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d8:	4b85      	ldr	r3, [pc, #532]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e6:	4982      	ldr	r1, [pc, #520]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045fa:	4b7d      	ldr	r3, [pc, #500]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004608:	4979      	ldr	r1, [pc, #484]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461c:	4b74      	ldr	r3, [pc, #464]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	4971      	ldr	r1, [pc, #452]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463e:	4b6c      	ldr	r3, [pc, #432]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004644:	f023 020c 	bic.w	r2, r3, #12
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800464c:	4968      	ldr	r1, [pc, #416]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004660:	4b63      	ldr	r3, [pc, #396]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	4960      	ldr	r1, [pc, #384]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004682:	4b5b      	ldr	r3, [pc, #364]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004688:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004690:	4957      	ldr	r1, [pc, #348]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046a4:	4b52      	ldr	r3, [pc, #328]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	494f      	ldr	r1, [pc, #316]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046c6:	4b4a      	ldr	r3, [pc, #296]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	4946      	ldr	r1, [pc, #280]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046e8:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f6:	493e      	ldr	r1, [pc, #248]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800470a:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	4935      	ldr	r1, [pc, #212]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800472c:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800473a:	492d      	ldr	r1, [pc, #180]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800474e:	4b28      	ldr	r3, [pc, #160]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800475c:	4924      	ldr	r1, [pc, #144]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800476c:	d101      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478e:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004794:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479c:	4914      	ldr	r1, [pc, #80]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047b0:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c0:	490b      	ldr	r1, [pc, #44]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e4:	4902      	ldr	r1, [pc, #8]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047ec:	e002      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004800:	4b8a      	ldr	r3, [pc, #552]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004802:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004806:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004810:	4986      	ldr	r1, [pc, #536]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004824:	4b81      	ldr	r3, [pc, #516]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800482a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004834:	497d      	ldr	r1, [pc, #500]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d006      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80d6 	beq.w	80049fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004850:	4b76      	ldr	r3, [pc, #472]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a75      	ldr	r2, [pc, #468]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fd fc42 	bl	80020e4 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004864:	f7fd fc3e 	bl	80020e4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	@ 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e195      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004876:	4b6d      	ldr	r3, [pc, #436]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11d      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004896:	4b65      	ldr	r3, [pc, #404]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048a4:	4b61      	ldr	r3, [pc, #388]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048aa:	0e1b      	lsrs	r3, r3, #24
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	019a      	lsls	r2, r3, #6
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	071b      	lsls	r3, r3, #28
 80048ca:	4958      	ldr	r1, [pc, #352]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048fc:	d129      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048fe:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800490c:	4b47      	ldr	r3, [pc, #284]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004912:	0f1b      	lsrs	r3, r3, #28
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	019a      	lsls	r2, r3, #6
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	071b      	lsls	r3, r3, #28
 8004932:	493e      	ldr	r1, [pc, #248]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800493a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004940:	f023 021f 	bic.w	r2, r3, #31
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	3b01      	subs	r3, #1
 800494a:	4938      	ldr	r1, [pc, #224]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01d      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800495e:	4b33      	ldr	r3, [pc, #204]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800496c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004972:	0f1b      	lsrs	r3, r3, #28
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	019a      	lsls	r2, r3, #6
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	4926      	ldr	r1, [pc, #152]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	019a      	lsls	r2, r3, #6
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	491a      	ldr	r1, [pc, #104]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ca:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d6:	f7fd fb85 	bl	80020e4 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049de:	f7fd fb81 	bl	80020e4 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b64      	cmp	r3, #100	@ 0x64
 80049ea:	d901      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0d8      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	f040 80ce 	bne.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a08      	ldr	r2, [pc, #32]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fd fb68 	bl	80020e4 <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a16:	e00b      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a18:	f7fd fb64 	bl	80020e4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	@ 0x64
 8004a24:	d904      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0bb      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a30:	4b5e      	ldr	r3, [pc, #376]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a3c:	d0ec      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02e      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d12a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a66:	4b51      	ldr	r3, [pc, #324]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a74:	4b4d      	ldr	r3, [pc, #308]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7a:	0f1b      	lsrs	r3, r3, #28
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	019a      	lsls	r2, r3, #6
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	061b      	lsls	r3, r3, #24
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	4944      	ldr	r1, [pc, #272]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aa2:	4b42      	ldr	r3, [pc, #264]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aa8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	493d      	ldr	r1, [pc, #244]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d022      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ad0:	d11d      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae0:	4b32      	ldr	r3, [pc, #200]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae6:	0f1b      	lsrs	r3, r3, #28
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	019a      	lsls	r2, r3, #6
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	4929      	ldr	r1, [pc, #164]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d028      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b1a:	4b24      	ldr	r3, [pc, #144]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b20:	0e1b      	lsrs	r3, r3, #24
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b28:	4b20      	ldr	r3, [pc, #128]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	019a      	lsls	r2, r3, #6
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	071b      	lsls	r3, r3, #28
 8004b4e:	4917      	ldr	r1, [pc, #92]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b56:	4b15      	ldr	r3, [pc, #84]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	4911      	ldr	r1, [pc, #68]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0e      	ldr	r2, [pc, #56]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fd fab4 	bl	80020e4 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b80:	f7fd fab0 	bl	80020e4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e007      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b9e:	d1ef      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e01c      	b.n	8004bfc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	795b      	ldrb	r3, [r3, #5]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fd50 	bl	8001678 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0204 	orr.w	r2, r2, #4
 8004bec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e09d      	b.n	8004d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
 8004c2e:	e005      	b.n	8004c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fd80 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c7c:	d902      	bls.n	8004c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e002      	b.n	8004c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 0204 	and.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6a:	f7fd f9bb 	bl	80020e4 <HAL_GetTick>
 8004d6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d001      	beq.n	8004d84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
 8004d82:	e15c      	b.n	800503e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_Transmit+0x36>
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e154      	b.n	800503e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_SPI_Transmit+0x48>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e14d      	b.n	800503e <HAL_SPI_Transmit+0x2e4>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2203      	movs	r2, #3
 8004dae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df4:	d10f      	bne.n	8004e16 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d007      	beq.n	8004e34 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e3c:	d952      	bls.n	8004ee4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_SPI_Transmit+0xf2>
 8004e46:	8b7b      	ldrh	r3, [r7, #26]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d145      	bne.n	8004ed8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	881a      	ldrh	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e70:	e032      	b.n	8004ed8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d112      	bne.n	8004ea6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ea4:	e018      	b.n	8004ed8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea6:	f7fd f91d 	bl	80020e4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d803      	bhi.n	8004ebe <HAL_SPI_Transmit+0x164>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d102      	bne.n	8004ec4 <HAL_SPI_Transmit+0x16a>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0b2      	b.n	800503e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1c7      	bne.n	8004e72 <HAL_SPI_Transmit+0x118>
 8004ee2:	e083      	b.n	8004fec <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Transmit+0x198>
 8004eec:	8b7b      	ldrh	r3, [r7, #26]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d177      	bne.n	8004fe2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d912      	bls.n	8004f22 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	881a      	ldrh	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	1c9a      	adds	r2, r3, #2
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b02      	subs	r3, #2
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f20:	e05f      	b.n	8004fe2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	7812      	ldrb	r2, [r2, #0]
 8004f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f48:	e04b      	b.n	8004fe2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d12b      	bne.n	8004fb0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d912      	bls.n	8004f88 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	881a      	ldrh	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b02      	subs	r3, #2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f86:	e02c      	b.n	8004fe2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fae:	e018      	b.n	8004fe2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb0:	f7fd f898 	bl	80020e4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d803      	bhi.n	8004fc8 <HAL_SPI_Transmit+0x26e>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_Transmit+0x274>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e02d      	b.n	800503e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ae      	bne.n	8004f4a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f947 	bl	8005284 <SPI_EndRxTxTransaction>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
  }
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005058:	f7fd f844 	bl	80020e4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	4413      	add	r3, r2
 8005066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005068:	f7fd f83c 	bl	80020e4 <HAL_GetTick>
 800506c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800506e:	4b39      	ldr	r3, [pc, #228]	@ (8005154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	015b      	lsls	r3, r3, #5
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800507e:	e055      	b.n	800512c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d051      	beq.n	800512c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005088:	f7fd f82c 	bl	80020e4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	429a      	cmp	r2, r3
 8005096:	d902      	bls.n	800509e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d13d      	bne.n	800511a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050b6:	d111      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	d004      	beq.n	80050cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ca:	d107      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e4:	d10f      	bne.n	8005106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e018      	b.n	800514c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	e002      	b.n	800512c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3b01      	subs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4013      	ands	r3, r2
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	429a      	cmp	r2, r3
 8005148:	d19a      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000000c 	.word	0x2000000c

08005158 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	@ 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800516a:	f7fc ffbb 	bl	80020e4 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	4413      	add	r3, r2
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800517a:	f7fc ffb3 	bl	80020e4 <HAL_GetTick>
 800517e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005188:	4b3d      	ldr	r3, [pc, #244]	@ (8005280 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	00da      	lsls	r2, r3, #3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	0d1b      	lsrs	r3, r3, #20
 8005198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051a0:	e061      	b.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051a8:	d107      	bne.n	80051ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d051      	beq.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c2:	f7fc ff8f 	bl	80020e4 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d902      	bls.n	80051d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d13d      	bne.n	8005254 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f0:	d111      	bne.n	8005216 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fa:	d004      	beq.n	8005206 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005204:	d107      	bne.n	8005216 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005214:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800521e:	d10f      	bne.n	8005240 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800523e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e011      	b.n	8005278 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
 800525e:	e002      	b.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3b01      	subs	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d195      	bne.n	80051a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	2000000c 	.word	0x2000000c

08005284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff5b 	bl	8005158 <SPI_WaitFifoStateUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e046      	b.n	8005346 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <SPI_EndRxTxTransaction+0xcc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a25      	ldr	r2, [pc, #148]	@ (8005354 <SPI_EndRxTxTransaction+0xd0>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0d5b      	lsrs	r3, r3, #21
 80052c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052d6:	d112      	bne.n	80052fe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	2180      	movs	r1, #128	@ 0x80
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff feb0 	bl	8005048 <SPI_WaitFlagStateUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e023      	b.n	8005346 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3b01      	subs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	2b80      	cmp	r3, #128	@ 0x80
 8005316:	d0f2      	beq.n	80052fe <SPI_EndRxTxTransaction+0x7a>
 8005318:	e000      	b.n	800531c <SPI_EndRxTxTransaction+0x98>
        break;
 800531a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff ff15 	bl	8005158 <SPI_WaitFifoStateUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e000      	b.n	8005346 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	2000000c 	.word	0x2000000c
 8005354:	165e9f81 	.word	0x165e9f81

08005358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e049      	b.n	80053fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc fc44 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f000 fd48 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d001      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e054      	b.n	80054ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a26      	ldr	r2, [pc, #152]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544a:	d01d      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a22      	ldr	r2, [pc, #136]	@ (80054dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a21      	ldr	r2, [pc, #132]	@ (80054e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1f      	ldr	r2, [pc, #124]	@ (80054e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1e      	ldr	r2, [pc, #120]	@ (80054e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1c      	ldr	r2, [pc, #112]	@ (80054ec <HAL_TIM_Base_Start_IT+0xe4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1b      	ldr	r2, [pc, #108]	@ (80054f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d115      	bne.n	80054b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d015      	beq.n	80054c6 <HAL_TIM_Base_Start_IT+0xbe>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d011      	beq.n	80054c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40010400 	.word	0x40010400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40001800 	.word	0x40001800
 80054f4:	00010007 	.word	0x00010007

080054f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <HAL_TIM_Base_Stop_IT+0x5c>)
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <HAL_TIM_Base_Stop_IT+0x46>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	f240 4344 	movw	r3, #1092	@ 0x444
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d107      	bne.n	800553e <HAL_TIM_Base_Stop_IT+0x46>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	00111111 	.word	0x00111111

08005558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e049      	b.n	80055fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f841 	bl	8005606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f000 fc48 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <HAL_TIM_PWM_Start+0x24>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e03c      	b.n	80056ba <HAL_TIM_PWM_Start+0x9e>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d109      	bne.n	800565a <HAL_TIM_PWM_Start+0x3e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	bf14      	ite	ne
 8005652:	2301      	movne	r3, #1
 8005654:	2300      	moveq	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	e02f      	b.n	80056ba <HAL_TIM_PWM_Start+0x9e>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d109      	bne.n	8005674 <HAL_TIM_PWM_Start+0x58>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e022      	b.n	80056ba <HAL_TIM_PWM_Start+0x9e>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d109      	bne.n	800568e <HAL_TIM_PWM_Start+0x72>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	e015      	b.n	80056ba <HAL_TIM_PWM_Start+0x9e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b10      	cmp	r3, #16
 8005692:	d109      	bne.n	80056a8 <HAL_TIM_PWM_Start+0x8c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e008      	b.n	80056ba <HAL_TIM_PWM_Start+0x9e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	bf14      	ite	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	2300      	moveq	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e092      	b.n	80057e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_PWM_Start+0xb6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d0:	e023      	b.n	800571a <HAL_TIM_PWM_Start+0xfe>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_PWM_Start+0xc6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e0:	e01b      	b.n	800571a <HAL_TIM_PWM_Start+0xfe>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_PWM_Start+0xd6>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f0:	e013      	b.n	800571a <HAL_TIM_PWM_Start+0xfe>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_PWM_Start+0xe6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005700:	e00b      	b.n	800571a <HAL_TIM_PWM_Start+0xfe>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b10      	cmp	r3, #16
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Start+0xf6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005710:	e003      	b.n	800571a <HAL_TIM_PWM_Start+0xfe>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 ff20 	bl	8006568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a30      	ldr	r2, [pc, #192]	@ (80057f0 <HAL_TIM_PWM_Start+0x1d4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_PWM_Start+0x120>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2f      	ldr	r2, [pc, #188]	@ (80057f4 <HAL_TIM_PWM_Start+0x1d8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_TIM_PWM_Start+0x124>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_TIM_PWM_Start+0x126>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a25      	ldr	r2, [pc, #148]	@ (80057f0 <HAL_TIM_PWM_Start+0x1d4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d022      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005768:	d01d      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a22      	ldr	r2, [pc, #136]	@ (80057f8 <HAL_TIM_PWM_Start+0x1dc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a20      	ldr	r2, [pc, #128]	@ (80057fc <HAL_TIM_PWM_Start+0x1e0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1f      	ldr	r2, [pc, #124]	@ (8005800 <HAL_TIM_PWM_Start+0x1e4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <HAL_TIM_PWM_Start+0x1d8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1b      	ldr	r2, [pc, #108]	@ (8005804 <HAL_TIM_PWM_Start+0x1e8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x18a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a19      	ldr	r2, [pc, #100]	@ (8005808 <HAL_TIM_PWM_Start+0x1ec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d115      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4b17      	ldr	r3, [pc, #92]	@ (800580c <HAL_TIM_PWM_Start+0x1f0>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b06      	cmp	r3, #6
 80057b6:	d015      	beq.n	80057e4 <HAL_TIM_PWM_Start+0x1c8>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057be:	d011      	beq.n	80057e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	e008      	b.n	80057e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e000      	b.n	80057e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40014000 	.word	0x40014000
 8005808:	40001800 	.word	0x40001800
 800580c:	00010007 	.word	0x00010007

08005810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d020      	beq.n	8005874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01b      	beq.n	8005874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0202 	mvn.w	r2, #2
 8005844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fac8 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 faba 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 facb 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	d020      	beq.n	80058c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01b      	beq.n	80058c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0204 	mvn.w	r2, #4
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 faa2 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa94 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 faa5 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d020      	beq.n	800590c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0208 	mvn.w	r2, #8
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2204      	movs	r2, #4
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa7c 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa6e 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa7f 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0210 	mvn.w	r2, #16
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2208      	movs	r2, #8
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa56 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa48 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fa59 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0201 	mvn.w	r2, #1
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb fdd4 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00c      	beq.n	80059aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fe9d 	bl	80066e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fe95 	bl	80066f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fa13 	bl	8005e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f06f 0220 	mvn.w	r2, #32
 8005a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fe5d 	bl	80066d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e0ff      	b.n	8005c3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b14      	cmp	r3, #20
 8005a4a:	f200 80f0 	bhi.w	8005c2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005c2f 	.word	0x08005c2f
 8005a5c:	08005c2f 	.word	0x08005c2f
 8005a60:	08005c2f 	.word	0x08005c2f
 8005a64:	08005ae9 	.word	0x08005ae9
 8005a68:	08005c2f 	.word	0x08005c2f
 8005a6c:	08005c2f 	.word	0x08005c2f
 8005a70:	08005c2f 	.word	0x08005c2f
 8005a74:	08005b2b 	.word	0x08005b2b
 8005a78:	08005c2f 	.word	0x08005c2f
 8005a7c:	08005c2f 	.word	0x08005c2f
 8005a80:	08005c2f 	.word	0x08005c2f
 8005a84:	08005b6b 	.word	0x08005b6b
 8005a88:	08005c2f 	.word	0x08005c2f
 8005a8c:	08005c2f 	.word	0x08005c2f
 8005a90:	08005c2f 	.word	0x08005c2f
 8005a94:	08005bad 	.word	0x08005bad
 8005a98:	08005c2f 	.word	0x08005c2f
 8005a9c:	08005c2f 	.word	0x08005c2f
 8005aa0:	08005c2f 	.word	0x08005c2f
 8005aa4:	08005bed 	.word	0x08005bed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fa62 	bl	8005f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0208 	orr.w	r2, r2, #8
 8005ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0204 	bic.w	r2, r2, #4
 8005ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6999      	ldr	r1, [r3, #24]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	619a      	str	r2, [r3, #24]
      break;
 8005ae6:	e0a5      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fab4 	bl	800605c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6999      	ldr	r1, [r3, #24]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	021a      	lsls	r2, r3, #8
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	619a      	str	r2, [r3, #24]
      break;
 8005b28:	e084      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fb0b 	bl	800614c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0208 	orr.w	r2, r2, #8
 8005b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0204 	bic.w	r2, r2, #4
 8005b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69d9      	ldr	r1, [r3, #28]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	61da      	str	r2, [r3, #28]
      break;
 8005b68:	e064      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fb61 	bl	8006238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69d9      	ldr	r1, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	021a      	lsls	r2, r3, #8
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	61da      	str	r2, [r3, #28]
      break;
 8005baa:	e043      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fb98 	bl	80062e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0208 	orr.w	r2, r2, #8
 8005bc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bea:	e023      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fbca 	bl	800638c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c2c:	e002      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
      break;
 8005c32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop

08005c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0b4      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x186>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4b56      	ldr	r3, [pc, #344]	@ (8005dd8 <HAL_TIM_ConfigClockSource+0x190>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9c:	d03e      	beq.n	8005d1c <HAL_TIM_ConfigClockSource+0xd4>
 8005c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca2:	f200 8087 	bhi.w	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005caa:	f000 8086 	beq.w	8005dba <HAL_TIM_ConfigClockSource+0x172>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb2:	d87f      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b70      	cmp	r3, #112	@ 0x70
 8005cb6:	d01a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0xa6>
 8005cb8:	2b70      	cmp	r3, #112	@ 0x70
 8005cba:	d87b      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b60      	cmp	r3, #96	@ 0x60
 8005cbe:	d050      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x11a>
 8005cc0:	2b60      	cmp	r3, #96	@ 0x60
 8005cc2:	d877      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b50      	cmp	r3, #80	@ 0x50
 8005cc6:	d03c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0xfa>
 8005cc8:	2b50      	cmp	r3, #80	@ 0x50
 8005cca:	d873      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d058      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x13a>
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d86f      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b30      	cmp	r3, #48	@ 0x30
 8005cd6:	d064      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cd8:	2b30      	cmp	r3, #48	@ 0x30
 8005cda:	d86b      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d060      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d867      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d05a      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	e062      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	f000 fc13 	bl	8006528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	609a      	str	r2, [r3, #8]
      break;
 8005d1a:	e04f      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	f000 fbfc 	bl	8006528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d3e:	609a      	str	r2, [r3, #8]
      break;
 8005d40:	e03c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 fb70 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2150      	movs	r1, #80	@ 0x50
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fbc9 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8005d60:	e02c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f000 fb8f 	bl	8006492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2160      	movs	r1, #96	@ 0x60
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fbb9 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8005d80:	e01c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fb50 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2140      	movs	r1, #64	@ 0x40
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fba9 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8005da0:	e00c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f000 fba0 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8005db2:	e003      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e000      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	fffeff88 	.word	0xfffeff88

08005ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a43      	ldr	r2, [pc, #268]	@ (8005f4c <TIM_Base_SetConfig+0x120>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <TIM_Base_SetConfig+0x40>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4a:	d00f      	beq.n	8005e6c <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a40      	ldr	r2, [pc, #256]	@ (8005f50 <TIM_Base_SetConfig+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00b      	beq.n	8005e6c <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3f      	ldr	r2, [pc, #252]	@ (8005f54 <TIM_Base_SetConfig+0x128>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d007      	beq.n	8005e6c <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f58 <TIM_Base_SetConfig+0x12c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3d      	ldr	r2, [pc, #244]	@ (8005f5c <TIM_Base_SetConfig+0x130>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a32      	ldr	r2, [pc, #200]	@ (8005f4c <TIM_Base_SetConfig+0x120>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d02b      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8c:	d027      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2f      	ldr	r2, [pc, #188]	@ (8005f50 <TIM_Base_SetConfig+0x124>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d023      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2e      	ldr	r2, [pc, #184]	@ (8005f54 <TIM_Base_SetConfig+0x128>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01f      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f58 <TIM_Base_SetConfig+0x12c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01b      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f5c <TIM_Base_SetConfig+0x130>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d017      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005f60 <TIM_Base_SetConfig+0x134>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f64 <TIM_Base_SetConfig+0x138>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00f      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a29      	ldr	r2, [pc, #164]	@ (8005f68 <TIM_Base_SetConfig+0x13c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <TIM_Base_SetConfig+0x140>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a27      	ldr	r2, [pc, #156]	@ (8005f70 <TIM_Base_SetConfig+0x144>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	@ (8005f74 <TIM_Base_SetConfig+0x148>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a0e      	ldr	r2, [pc, #56]	@ (8005f4c <TIM_Base_SetConfig+0x120>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_Base_SetConfig+0xf2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a10      	ldr	r2, [pc, #64]	@ (8005f5c <TIM_Base_SetConfig+0x130>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d103      	bne.n	8005f26 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	601a      	str	r2, [r3, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800
 8005f6c:	40001800 	.word	0x40001800
 8005f70:	40001c00 	.word	0x40001c00
 8005f74:	40002000 	.word	0x40002000

08005f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 0201 	bic.w	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8006050 <TIM_OC1_SetConfig+0xd8>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 0302 	bic.w	r3, r3, #2
 8005fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a21      	ldr	r2, [pc, #132]	@ (8006054 <TIM_OC1_SetConfig+0xdc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC1_SetConfig+0x64>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a20      	ldr	r2, [pc, #128]	@ (8006058 <TIM_OC1_SetConfig+0xe0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10c      	bne.n	8005ff6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0308 	bic.w	r3, r3, #8
 8005fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 0304 	bic.w	r3, r3, #4
 8005ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a16      	ldr	r2, [pc, #88]	@ (8006054 <TIM_OC1_SetConfig+0xdc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_OC1_SetConfig+0x8e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a15      	ldr	r2, [pc, #84]	@ (8006058 <TIM_OC1_SetConfig+0xe0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d111      	bne.n	800602a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800600c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	fffeff8f 	.word	0xfffeff8f
 8006054:	40010000 	.word	0x40010000
 8006058:	40010400 	.word	0x40010400

0800605c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f023 0210 	bic.w	r2, r3, #16
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4b2e      	ldr	r3, [pc, #184]	@ (8006140 <TIM_OC2_SetConfig+0xe4>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0320 	bic.w	r3, r3, #32
 80060a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a23      	ldr	r2, [pc, #140]	@ (8006144 <TIM_OC2_SetConfig+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC2_SetConfig+0x68>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a22      	ldr	r2, [pc, #136]	@ (8006148 <TIM_OC2_SetConfig+0xec>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d10d      	bne.n	80060e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a18      	ldr	r2, [pc, #96]	@ (8006144 <TIM_OC2_SetConfig+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC2_SetConfig+0x94>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a17      	ldr	r2, [pc, #92]	@ (8006148 <TIM_OC2_SetConfig+0xec>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d113      	bne.n	8006118 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	feff8fff 	.word	0xfeff8fff
 8006144:	40010000 	.word	0x40010000
 8006148:	40010400 	.word	0x40010400

0800614c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4b2d      	ldr	r3, [pc, #180]	@ (800622c <TIM_OC3_SetConfig+0xe0>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a22      	ldr	r2, [pc, #136]	@ (8006230 <TIM_OC3_SetConfig+0xe4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_OC3_SetConfig+0x66>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a21      	ldr	r2, [pc, #132]	@ (8006234 <TIM_OC3_SetConfig+0xe8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10d      	bne.n	80061ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a17      	ldr	r2, [pc, #92]	@ (8006230 <TIM_OC3_SetConfig+0xe4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC3_SetConfig+0x92>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a16      	ldr	r2, [pc, #88]	@ (8006234 <TIM_OC3_SetConfig+0xe8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d113      	bne.n	8006206 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	621a      	str	r2, [r3, #32]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	fffeff8f 	.word	0xfffeff8f
 8006230:	40010000 	.word	0x40010000
 8006234:	40010400 	.word	0x40010400

08006238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4b1e      	ldr	r3, [pc, #120]	@ (80062dc <TIM_OC4_SetConfig+0xa4>)
 8006264:	4013      	ands	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800626e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	031b      	lsls	r3, r3, #12
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a13      	ldr	r2, [pc, #76]	@ (80062e0 <TIM_OC4_SetConfig+0xa8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <TIM_OC4_SetConfig+0x68>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a12      	ldr	r2, [pc, #72]	@ (80062e4 <TIM_OC4_SetConfig+0xac>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d109      	bne.n	80062b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	feff8fff 	.word	0xfeff8fff
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400

080062e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4b1b      	ldr	r3, [pc, #108]	@ (8006380 <TIM_OC5_SetConfig+0x98>)
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006328:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a12      	ldr	r2, [pc, #72]	@ (8006384 <TIM_OC5_SetConfig+0x9c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC5_SetConfig+0x5e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a11      	ldr	r2, [pc, #68]	@ (8006388 <TIM_OC5_SetConfig+0xa0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d109      	bne.n	800635a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	621a      	str	r2, [r3, #32]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	fffeff8f 	.word	0xfffeff8f
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006428 <TIM_OC6_SetConfig+0x9c>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	051b      	lsls	r3, r3, #20
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a13      	ldr	r2, [pc, #76]	@ (800642c <TIM_OC6_SetConfig+0xa0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC6_SetConfig+0x60>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a12      	ldr	r2, [pc, #72]	@ (8006430 <TIM_OC6_SetConfig+0xa4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d109      	bne.n	8006400 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	feff8fff 	.word	0xfeff8fff
 800642c:	40010000 	.word	0x40010000
 8006430:	40010400 	.word	0x40010400

08006434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800645e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 030a 	bic.w	r3, r3, #10
 8006470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f023 0210 	bic.w	r2, r3, #16
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	f043 0307 	orr.w	r3, r3, #7
 8006514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	609a      	str	r2, [r3, #8]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2201      	movs	r2, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	43db      	mvns	r3, r3
 800658a:	401a      	ands	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e06d      	b.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a30      	ldr	r2, [pc, #192]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2f      	ldr	r2, [pc, #188]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d108      	bne.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a20      	ldr	r2, [pc, #128]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d022      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663e:	d01d      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a15      	ldr	r2, [pc, #84]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a15      	ldr	r2, [pc, #84]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10c      	bne.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40001800 	.word	0x40001800

080066d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e040      	b.n	80067a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fb fb4e 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2224      	movs	r2, #36	@ 0x24
 8006738:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fe42 	bl	80073dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fbdb 	bl	8006f14 <UART_SetConfig>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e01b      	b.n	80067a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fec1 	bl	8007520 <UART_CheckIdleState>
 800679e:	4603      	mov	r3, r0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	@ 0x28
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d177      	bne.n	80068b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_UART_Transmit+0x24>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e070      	b.n	80068b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2221      	movs	r2, #33	@ 0x21
 80067dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067de:	f7fb fc81 	bl	80020e4 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fc:	d108      	bne.n	8006810 <HAL_UART_Transmit+0x68>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e003      	b.n	8006818 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006818:	e02f      	b.n	800687a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2200      	movs	r2, #0
 8006822:	2180      	movs	r1, #128	@ 0x80
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 ff23 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e03b      	b.n	80068b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800684e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	3302      	adds	r3, #2
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e007      	b.n	8006868 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1c9      	bne.n	800681a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2200      	movs	r2, #0
 800688e:	2140      	movs	r1, #64	@ 0x40
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 feed 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e005      	b.n	80068b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80068b0:	2302      	movs	r3, #2
  }
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b0ba      	sub	sp, #232	@ 0xe8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068ea:	4013      	ands	r3, r2
 80068ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d115      	bne.n	8006924 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00f      	beq.n	8006924 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 82c6 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
      }
      return;
 8006922:	e2c0      	b.n	8006ea6 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8117 	beq.w	8006b5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800692e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800693a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800693e:	4b85      	ldr	r3, [pc, #532]	@ (8006b54 <HAL_UART_IRQHandler+0x298>)
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 810a 	beq.w	8006b5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d011      	beq.n	8006978 <HAL_UART_IRQHandler+0xbc>
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2201      	movs	r2, #1
 8006966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d011      	beq.n	80069a8 <HAL_UART_IRQHandler+0xec>
 8006984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2202      	movs	r2, #2
 8006996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699e:	f043 0204 	orr.w	r2, r3, #4
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d011      	beq.n	80069d8 <HAL_UART_IRQHandler+0x11c>
 80069b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2204      	movs	r2, #4
 80069c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ce:	f043 0202 	orr.w	r2, r3, #2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d017      	beq.n	8006a14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2208      	movs	r2, #8
 8006a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0a:	f043 0208 	orr.w	r2, r3, #8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d012      	beq.n	8006a46 <HAL_UART_IRQHandler+0x18a>
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 822c 	beq.w	8006eaa <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d04f      	beq.n	8006b3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fe53 	bl	800774a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b40      	cmp	r3, #64	@ 0x40
 8006ab0:	d141      	bne.n	8006b36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ade:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0a:	4a13      	ldr	r2, [pc, #76]	@ (8006b58 <HAL_UART_IRQHandler+0x29c>)
 8006b0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fc f867 	bl	8002be6 <HAL_DMA_Abort_IT>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d017      	beq.n	8006b4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	e00f      	b.n	8006b4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9d0 	bl	8006ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	e00b      	b.n	8006b4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f9cc 	bl	8006ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	e007      	b.n	8006b4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f9c8 	bl	8006ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006b4c:	e1ad      	b.n	8006eaa <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4e:	bf00      	nop
    return;
 8006b50:	e1ab      	b.n	8006eaa <HAL_UART_IRQHandler+0x5ee>
 8006b52:	bf00      	nop
 8006b54:	04000120 	.word	0x04000120
 8006b58:	08007813 	.word	0x08007813

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 8166 	bne.w	8006e32 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 815f 	beq.w	8006e32 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8158 	beq.w	8006e32 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2210      	movs	r2, #16
 8006b88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b94:	2b40      	cmp	r3, #64	@ 0x40
 8006b96:	f040 80d0 	bne.w	8006d3a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ba6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80ab 	beq.w	8006d06 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	f080 80a3 	bcs.w	8006d06 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd4:	f000 8086 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1da      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3308      	adds	r3, #8
 8006c28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e1      	bne.n	8006c22 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb4:	f023 0310 	bic.w	r3, r3, #16
 8006cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ccc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e4      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fb ff11 	bl	8002b06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f8f2 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d04:	e0d3      	b.n	8006eae <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d10:	429a      	cmp	r2, r3
 8006d12:	f040 80cc 	bne.w	8006eae <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d20:	f040 80c5 	bne.w	8006eae <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8d8 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
      return;
 8006d38:	e0b9      	b.n	8006eae <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 80ab 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8006d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80a6 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e4      	bne.n	8006d66 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	623b      	str	r3, [r7, #32]
   return(result);
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e3      	bne.n	8006d9c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0310 	bic.w	r3, r3, #16
 8006dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e0a:	61fb      	str	r3, [r7, #28]
 8006e0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	69b9      	ldr	r1, [r7, #24]
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	617b      	str	r3, [r7, #20]
   return(result);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e4      	bne.n	8006de8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f85c 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e30:	e03f      	b.n	8006eb2 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00e      	beq.n	8006e5c <HAL_UART_IRQHandler+0x5a0>
 8006e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f853 	bl	8006f00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e5a:	e02d      	b.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01c      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
    }
    return;
 8006e84:	e017      	b.n	8006eb6 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d012      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fcc9 	bl	8007836 <UART_EndTransmit_IT>
    return;
 8006ea4:	e008      	b.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
      return;
 8006ea6:	bf00      	nop
 8006ea8:	e006      	b.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
    return;
 8006eaa:	bf00      	nop
 8006eac:	e004      	b.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
      return;
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
      return;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <HAL_UART_IRQHandler+0x5fc>
    return;
 8006eb6:	bf00      	nop
  }

}
 8006eb8:	37e8      	adds	r7, #232	@ 0xe8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4ba6      	ldr	r3, [pc, #664]	@ (80071d8 <UART_SetConfig+0x2c4>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a94      	ldr	r2, [pc, #592]	@ (80071dc <UART_SetConfig+0x2c8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d120      	bne.n	8006fd2 <UART_SetConfig+0xbe>
 8006f90:	4b93      	ldr	r3, [pc, #588]	@ (80071e0 <UART_SetConfig+0x2cc>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d816      	bhi.n	8006fcc <UART_SetConfig+0xb8>
 8006f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <UART_SetConfig+0x90>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fc1 	.word	0x08006fc1
 8006fac:	08006fbb 	.word	0x08006fbb
 8006fb0:	08006fc7 	.word	0x08006fc7
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e150      	b.n	800725c <UART_SetConfig+0x348>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e14d      	b.n	800725c <UART_SetConfig+0x348>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e14a      	b.n	800725c <UART_SetConfig+0x348>
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e147      	b.n	800725c <UART_SetConfig+0x348>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e144      	b.n	800725c <UART_SetConfig+0x348>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a83      	ldr	r2, [pc, #524]	@ (80071e4 <UART_SetConfig+0x2d0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d132      	bne.n	8007042 <UART_SetConfig+0x12e>
 8006fdc:	4b80      	ldr	r3, [pc, #512]	@ (80071e0 <UART_SetConfig+0x2cc>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d828      	bhi.n	800703c <UART_SetConfig+0x128>
 8006fea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <UART_SetConfig+0xdc>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007025 	.word	0x08007025
 8006ff4:	0800703d 	.word	0x0800703d
 8006ff8:	0800703d 	.word	0x0800703d
 8006ffc:	0800703d 	.word	0x0800703d
 8007000:	08007031 	.word	0x08007031
 8007004:	0800703d 	.word	0x0800703d
 8007008:	0800703d 	.word	0x0800703d
 800700c:	0800703d 	.word	0x0800703d
 8007010:	0800702b 	.word	0x0800702b
 8007014:	0800703d 	.word	0x0800703d
 8007018:	0800703d 	.word	0x0800703d
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007037 	.word	0x08007037
 8007024:	2300      	movs	r3, #0
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e118      	b.n	800725c <UART_SetConfig+0x348>
 800702a:	2302      	movs	r3, #2
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	e115      	b.n	800725c <UART_SetConfig+0x348>
 8007030:	2304      	movs	r3, #4
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e112      	b.n	800725c <UART_SetConfig+0x348>
 8007036:	2308      	movs	r3, #8
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e10f      	b.n	800725c <UART_SetConfig+0x348>
 800703c:	2310      	movs	r3, #16
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e10c      	b.n	800725c <UART_SetConfig+0x348>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a68      	ldr	r2, [pc, #416]	@ (80071e8 <UART_SetConfig+0x2d4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d120      	bne.n	800708e <UART_SetConfig+0x17a>
 800704c:	4b64      	ldr	r3, [pc, #400]	@ (80071e0 <UART_SetConfig+0x2cc>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007052:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007056:	2b30      	cmp	r3, #48	@ 0x30
 8007058:	d013      	beq.n	8007082 <UART_SetConfig+0x16e>
 800705a:	2b30      	cmp	r3, #48	@ 0x30
 800705c:	d814      	bhi.n	8007088 <UART_SetConfig+0x174>
 800705e:	2b20      	cmp	r3, #32
 8007060:	d009      	beq.n	8007076 <UART_SetConfig+0x162>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d810      	bhi.n	8007088 <UART_SetConfig+0x174>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <UART_SetConfig+0x15c>
 800706a:	2b10      	cmp	r3, #16
 800706c:	d006      	beq.n	800707c <UART_SetConfig+0x168>
 800706e:	e00b      	b.n	8007088 <UART_SetConfig+0x174>
 8007070:	2300      	movs	r3, #0
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	e0f2      	b.n	800725c <UART_SetConfig+0x348>
 8007076:	2302      	movs	r3, #2
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	e0ef      	b.n	800725c <UART_SetConfig+0x348>
 800707c:	2304      	movs	r3, #4
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e0ec      	b.n	800725c <UART_SetConfig+0x348>
 8007082:	2308      	movs	r3, #8
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e0e9      	b.n	800725c <UART_SetConfig+0x348>
 8007088:	2310      	movs	r3, #16
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e0e6      	b.n	800725c <UART_SetConfig+0x348>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a56      	ldr	r2, [pc, #344]	@ (80071ec <UART_SetConfig+0x2d8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d120      	bne.n	80070da <UART_SetConfig+0x1c6>
 8007098:	4b51      	ldr	r3, [pc, #324]	@ (80071e0 <UART_SetConfig+0x2cc>)
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070a4:	d013      	beq.n	80070ce <UART_SetConfig+0x1ba>
 80070a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070a8:	d814      	bhi.n	80070d4 <UART_SetConfig+0x1c0>
 80070aa:	2b80      	cmp	r3, #128	@ 0x80
 80070ac:	d009      	beq.n	80070c2 <UART_SetConfig+0x1ae>
 80070ae:	2b80      	cmp	r3, #128	@ 0x80
 80070b0:	d810      	bhi.n	80070d4 <UART_SetConfig+0x1c0>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <UART_SetConfig+0x1a8>
 80070b6:	2b40      	cmp	r3, #64	@ 0x40
 80070b8:	d006      	beq.n	80070c8 <UART_SetConfig+0x1b4>
 80070ba:	e00b      	b.n	80070d4 <UART_SetConfig+0x1c0>
 80070bc:	2300      	movs	r3, #0
 80070be:	77fb      	strb	r3, [r7, #31]
 80070c0:	e0cc      	b.n	800725c <UART_SetConfig+0x348>
 80070c2:	2302      	movs	r3, #2
 80070c4:	77fb      	strb	r3, [r7, #31]
 80070c6:	e0c9      	b.n	800725c <UART_SetConfig+0x348>
 80070c8:	2304      	movs	r3, #4
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e0c6      	b.n	800725c <UART_SetConfig+0x348>
 80070ce:	2308      	movs	r3, #8
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e0c3      	b.n	800725c <UART_SetConfig+0x348>
 80070d4:	2310      	movs	r3, #16
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e0c0      	b.n	800725c <UART_SetConfig+0x348>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a44      	ldr	r2, [pc, #272]	@ (80071f0 <UART_SetConfig+0x2dc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d125      	bne.n	8007130 <UART_SetConfig+0x21c>
 80070e4:	4b3e      	ldr	r3, [pc, #248]	@ (80071e0 <UART_SetConfig+0x2cc>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f2:	d017      	beq.n	8007124 <UART_SetConfig+0x210>
 80070f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f8:	d817      	bhi.n	800712a <UART_SetConfig+0x216>
 80070fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070fe:	d00b      	beq.n	8007118 <UART_SetConfig+0x204>
 8007100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007104:	d811      	bhi.n	800712a <UART_SetConfig+0x216>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <UART_SetConfig+0x1fe>
 800710a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710e:	d006      	beq.n	800711e <UART_SetConfig+0x20a>
 8007110:	e00b      	b.n	800712a <UART_SetConfig+0x216>
 8007112:	2300      	movs	r3, #0
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e0a1      	b.n	800725c <UART_SetConfig+0x348>
 8007118:	2302      	movs	r3, #2
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e09e      	b.n	800725c <UART_SetConfig+0x348>
 800711e:	2304      	movs	r3, #4
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e09b      	b.n	800725c <UART_SetConfig+0x348>
 8007124:	2308      	movs	r3, #8
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e098      	b.n	800725c <UART_SetConfig+0x348>
 800712a:	2310      	movs	r3, #16
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e095      	b.n	800725c <UART_SetConfig+0x348>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2f      	ldr	r2, [pc, #188]	@ (80071f4 <UART_SetConfig+0x2e0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d125      	bne.n	8007186 <UART_SetConfig+0x272>
 800713a:	4b29      	ldr	r3, [pc, #164]	@ (80071e0 <UART_SetConfig+0x2cc>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007144:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007148:	d017      	beq.n	800717a <UART_SetConfig+0x266>
 800714a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800714e:	d817      	bhi.n	8007180 <UART_SetConfig+0x26c>
 8007150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007154:	d00b      	beq.n	800716e <UART_SetConfig+0x25a>
 8007156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800715a:	d811      	bhi.n	8007180 <UART_SetConfig+0x26c>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <UART_SetConfig+0x254>
 8007160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007164:	d006      	beq.n	8007174 <UART_SetConfig+0x260>
 8007166:	e00b      	b.n	8007180 <UART_SetConfig+0x26c>
 8007168:	2301      	movs	r3, #1
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e076      	b.n	800725c <UART_SetConfig+0x348>
 800716e:	2302      	movs	r3, #2
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e073      	b.n	800725c <UART_SetConfig+0x348>
 8007174:	2304      	movs	r3, #4
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e070      	b.n	800725c <UART_SetConfig+0x348>
 800717a:	2308      	movs	r3, #8
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e06d      	b.n	800725c <UART_SetConfig+0x348>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e06a      	b.n	800725c <UART_SetConfig+0x348>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1b      	ldr	r2, [pc, #108]	@ (80071f8 <UART_SetConfig+0x2e4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d138      	bne.n	8007202 <UART_SetConfig+0x2ee>
 8007190:	4b13      	ldr	r3, [pc, #76]	@ (80071e0 <UART_SetConfig+0x2cc>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007196:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800719a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800719e:	d017      	beq.n	80071d0 <UART_SetConfig+0x2bc>
 80071a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071a4:	d82a      	bhi.n	80071fc <UART_SetConfig+0x2e8>
 80071a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071aa:	d00b      	beq.n	80071c4 <UART_SetConfig+0x2b0>
 80071ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071b0:	d824      	bhi.n	80071fc <UART_SetConfig+0x2e8>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <UART_SetConfig+0x2aa>
 80071b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ba:	d006      	beq.n	80071ca <UART_SetConfig+0x2b6>
 80071bc:	e01e      	b.n	80071fc <UART_SetConfig+0x2e8>
 80071be:	2300      	movs	r3, #0
 80071c0:	77fb      	strb	r3, [r7, #31]
 80071c2:	e04b      	b.n	800725c <UART_SetConfig+0x348>
 80071c4:	2302      	movs	r3, #2
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e048      	b.n	800725c <UART_SetConfig+0x348>
 80071ca:	2304      	movs	r3, #4
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e045      	b.n	800725c <UART_SetConfig+0x348>
 80071d0:	2308      	movs	r3, #8
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e042      	b.n	800725c <UART_SetConfig+0x348>
 80071d6:	bf00      	nop
 80071d8:	efff69f3 	.word	0xefff69f3
 80071dc:	40011000 	.word	0x40011000
 80071e0:	40023800 	.word	0x40023800
 80071e4:	40004400 	.word	0x40004400
 80071e8:	40004800 	.word	0x40004800
 80071ec:	40004c00 	.word	0x40004c00
 80071f0:	40005000 	.word	0x40005000
 80071f4:	40011400 	.word	0x40011400
 80071f8:	40007800 	.word	0x40007800
 80071fc:	2310      	movs	r3, #16
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e02c      	b.n	800725c <UART_SetConfig+0x348>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a72      	ldr	r2, [pc, #456]	@ (80073d0 <UART_SetConfig+0x4bc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d125      	bne.n	8007258 <UART_SetConfig+0x344>
 800720c:	4b71      	ldr	r3, [pc, #452]	@ (80073d4 <UART_SetConfig+0x4c0>)
 800720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007212:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007216:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800721a:	d017      	beq.n	800724c <UART_SetConfig+0x338>
 800721c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007220:	d817      	bhi.n	8007252 <UART_SetConfig+0x33e>
 8007222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007226:	d00b      	beq.n	8007240 <UART_SetConfig+0x32c>
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800722c:	d811      	bhi.n	8007252 <UART_SetConfig+0x33e>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <UART_SetConfig+0x326>
 8007232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007236:	d006      	beq.n	8007246 <UART_SetConfig+0x332>
 8007238:	e00b      	b.n	8007252 <UART_SetConfig+0x33e>
 800723a:	2300      	movs	r3, #0
 800723c:	77fb      	strb	r3, [r7, #31]
 800723e:	e00d      	b.n	800725c <UART_SetConfig+0x348>
 8007240:	2302      	movs	r3, #2
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e00a      	b.n	800725c <UART_SetConfig+0x348>
 8007246:	2304      	movs	r3, #4
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e007      	b.n	800725c <UART_SetConfig+0x348>
 800724c:	2308      	movs	r3, #8
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e004      	b.n	800725c <UART_SetConfig+0x348>
 8007252:	2310      	movs	r3, #16
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e001      	b.n	800725c <UART_SetConfig+0x348>
 8007258:	2310      	movs	r3, #16
 800725a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007264:	d15b      	bne.n	800731e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007266:	7ffb      	ldrb	r3, [r7, #31]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d828      	bhi.n	80072be <UART_SetConfig+0x3aa>
 800726c:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <UART_SetConfig+0x360>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	080072bf 	.word	0x080072bf
 8007284:	080072af 	.word	0x080072af
 8007288:	080072bf 	.word	0x080072bf
 800728c:	080072bf 	.word	0x080072bf
 8007290:	080072bf 	.word	0x080072bf
 8007294:	080072b7 	.word	0x080072b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fd f83a 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 800729c:	61b8      	str	r0, [r7, #24]
        break;
 800729e:	e013      	b.n	80072c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fd f84a 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 80072a4:	61b8      	str	r0, [r7, #24]
        break;
 80072a6:	e00f      	b.n	80072c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a8:	4b4b      	ldr	r3, [pc, #300]	@ (80073d8 <UART_SetConfig+0x4c4>)
 80072aa:	61bb      	str	r3, [r7, #24]
        break;
 80072ac:	e00c      	b.n	80072c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ae:	f7fc ff1d 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 80072b2:	61b8      	str	r0, [r7, #24]
        break;
 80072b4:	e008      	b.n	80072c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ba:	61bb      	str	r3, [r7, #24]
        break;
 80072bc:	e004      	b.n	80072c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	77bb      	strb	r3, [r7, #30]
        break;
 80072c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d074      	beq.n	80073b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	005a      	lsls	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d916      	bls.n	8007318 <UART_SetConfig+0x404>
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f0:	d212      	bcs.n	8007318 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f023 030f 	bic.w	r3, r3, #15
 80072fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	b29b      	uxth	r3, r3
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	b29a      	uxth	r2, r3
 8007308:	89fb      	ldrh	r3, [r7, #14]
 800730a:	4313      	orrs	r3, r2
 800730c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	89fa      	ldrh	r2, [r7, #14]
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	e04f      	b.n	80073b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	77bb      	strb	r3, [r7, #30]
 800731c:	e04c      	b.n	80073b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800731e:	7ffb      	ldrb	r3, [r7, #31]
 8007320:	2b08      	cmp	r3, #8
 8007322:	d828      	bhi.n	8007376 <UART_SetConfig+0x462>
 8007324:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <UART_SetConfig+0x418>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	08007377 	.word	0x08007377
 800733c:	08007367 	.word	0x08007367
 8007340:	08007377 	.word	0x08007377
 8007344:	08007377 	.word	0x08007377
 8007348:	08007377 	.word	0x08007377
 800734c:	0800736f 	.word	0x0800736f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fc ffde 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8007354:	61b8      	str	r0, [r7, #24]
        break;
 8007356:	e013      	b.n	8007380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007358:	f7fc ffee 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 800735c:	61b8      	str	r0, [r7, #24]
        break;
 800735e:	e00f      	b.n	8007380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007360:	4b1d      	ldr	r3, [pc, #116]	@ (80073d8 <UART_SetConfig+0x4c4>)
 8007362:	61bb      	str	r3, [r7, #24]
        break;
 8007364:	e00c      	b.n	8007380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007366:	f7fc fec1 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 800736a:	61b8      	str	r0, [r7, #24]
        break;
 800736c:	e008      	b.n	8007380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007372:	61bb      	str	r3, [r7, #24]
        break;
 8007374:	e004      	b.n	8007380 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	77bb      	strb	r3, [r7, #30]
        break;
 800737e:	bf00      	nop
    }

    if (pclk != 0U)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d018      	beq.n	80073b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	085a      	lsrs	r2, r3, #1
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	441a      	add	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d909      	bls.n	80073b4 <UART_SetConfig+0x4a0>
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a6:	d205      	bcs.n	80073b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	e001      	b.n	80073b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40007c00 	.word	0x40007c00
 80073d4:	40023800 	.word	0x40023800
 80073d8:	00f42400 	.word	0x00f42400

080073dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	f003 0304 	and.w	r3, r3, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01a      	beq.n	80074f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074da:	d10a      	bne.n	80074f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	605a      	str	r2, [r3, #4]
  }
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b098      	sub	sp, #96	@ 0x60
 8007524:	af02      	add	r7, sp, #8
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007530:	f7fa fdd8 	bl	80020e4 <HAL_GetTick>
 8007534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d12e      	bne.n	80075a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800754c:	2200      	movs	r2, #0
 800754e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f88c 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d021      	beq.n	80075a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800756c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007572:	653b      	str	r3, [r7, #80]	@ 0x50
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800757c:	647b      	str	r3, [r7, #68]	@ 0x44
 800757e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800758a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e062      	b.n	8007668 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d149      	bne.n	8007644 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b8:	2200      	movs	r2, #0
 80075ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f856 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d03c      	beq.n	8007644 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	623b      	str	r3, [r7, #32]
   return(result);
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3308      	adds	r3, #8
 8007602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	60fb      	str	r3, [r7, #12]
   return(result);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800761c:	61fa      	str	r2, [r7, #28]
 800761e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	69b9      	ldr	r1, [r7, #24]
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	617b      	str	r3, [r7, #20]
   return(result);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e011      	b.n	8007668 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3758      	adds	r7, #88	@ 0x58
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	4613      	mov	r3, r2
 800767e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007680:	e04f      	b.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d04b      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768a:	f7fa fd2b 	bl	80020e4 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	429a      	cmp	r2, r3
 8007698:	d302      	bcc.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e04e      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d037      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b80      	cmp	r3, #128	@ 0x80
 80076b6:	d034      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b40      	cmp	r3, #64	@ 0x40
 80076bc:	d031      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d110      	bne.n	80076ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2208      	movs	r2, #8
 80076d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f838 	bl	800774a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2208      	movs	r2, #8
 80076de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e029      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fc:	d111      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f81e 	bl	800774a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e00f      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4013      	ands	r3, r2
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	429a      	cmp	r2, r3
 8007730:	bf0c      	ite	eq
 8007732:	2301      	moveq	r3, #1
 8007734:	2300      	movne	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	429a      	cmp	r2, r3
 800773e:	d0a0      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800774a:	b480      	push	{r7}
 800774c:	b095      	sub	sp, #84	@ 0x54
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	461a      	mov	r2, r3
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	643b      	str	r3, [r7, #64]	@ 0x40
 8007772:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e6      	bne.n	8007752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	61fb      	str	r3, [r7, #28]
   return(result);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f023 0301 	bic.w	r3, r3, #1
 800779a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3308      	adds	r3, #8
 80077a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e5      	bne.n	8007784 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d118      	bne.n	80077f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f023 0310 	bic.w	r3, r3, #16
 80077d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6979      	ldr	r1, [r7, #20]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	613b      	str	r3, [r7, #16]
   return(result);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e6      	bne.n	80077c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007806:	bf00      	nop
 8007808:	3754      	adds	r7, #84	@ 0x54
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff fb53 	bl	8006ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b088      	sub	sp, #32
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60bb      	str	r3, [r7, #8]
   return(result);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	613b      	str	r3, [r7, #16]
   return(result);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fb1f 	bl	8006ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007882:	bf00      	nop
 8007884:	3720      	adds	r7, #32
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800788c:	b084      	sub	sp, #16
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	f107 001c 	add.w	r0, r7, #28
 800789a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800789e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d121      	bne.n	80078ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	4b21      	ldr	r3, [pc, #132]	@ (800793c <USB_CoreInit+0xb0>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d105      	bne.n	80078de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa92 	bl	8007e08 <USB_CoreReset>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
 80078e8:	e010      	b.n	800790c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa86 	bl	8007e08 <USB_CoreReset>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007904:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800790c:	7fbb      	ldrb	r3, [r7, #30]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10b      	bne.n	800792a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f043 0206 	orr.w	r2, r3, #6
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f043 0220 	orr.w	r2, r3, #32
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007936:	b004      	add	sp, #16
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	ffbdffbf 	.word	0xffbdffbf

08007940 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f023 0201 	bic.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d115      	bne.n	80079b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007990:	200a      	movs	r0, #10
 8007992:	f7fa fbb3 	bl	80020fc <HAL_Delay>
      ms += 10U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	330a      	adds	r3, #10
 800799a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa25 	bl	8007dec <USB_GetMode>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d01e      	beq.n	80079e6 <USB_SetCurrentMode+0x84>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80079ac:	d9f0      	bls.n	8007990 <USB_SetCurrentMode+0x2e>
 80079ae:	e01a      	b.n	80079e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d115      	bne.n	80079e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079c2:	200a      	movs	r0, #10
 80079c4:	f7fa fb9a 	bl	80020fc <HAL_Delay>
      ms += 10U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	330a      	adds	r3, #10
 80079cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa0c 	bl	8007dec <USB_GetMode>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <USB_SetCurrentMode+0x84>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80079de:	d9f0      	bls.n	80079c2 <USB_SetCurrentMode+0x60>
 80079e0:	e001      	b.n	80079e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e005      	b.n	80079f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80079ea:	d101      	bne.n	80079f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079fc:	b084      	sub	sp, #16
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	e009      	b.n	8007a30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3340      	adds	r3, #64	@ 0x40
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	2200      	movs	r2, #0
 8007a28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b0e      	cmp	r3, #14
 8007a34:	d9f2      	bls.n	8007a1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d11c      	bne.n	8007a78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a56:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e005      	b.n	8007a84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a90:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d10d      	bne.n	8007ab4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f968 	bl	8007d78 <USB_SetDevSpeed>
 8007aa8:	e008      	b.n	8007abc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007aaa:	2101      	movs	r1, #1
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f963 	bl	8007d78 <USB_SetDevSpeed>
 8007ab2:	e003      	b.n	8007abc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ab4:	2103      	movs	r1, #3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f95e 	bl	8007d78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007abc:	2110      	movs	r1, #16
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8fa 	bl	8007cb8 <USB_FlushTxFifo>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f924 	bl	8007d1c <USB_FlushRxFifo>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af0:	461a      	mov	r2, r3
 8007af2:	2300      	movs	r3, #0
 8007af4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007afc:	461a      	mov	r2, r3
 8007afe:	2300      	movs	r3, #0
 8007b00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e043      	b.n	8007b90 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b1e:	d118      	bne.n	8007b52 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b32:	461a      	mov	r2, r3
 8007b34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e013      	b.n	8007b64 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	e008      	b.n	8007b64 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2300      	movs	r3, #0
 8007b62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b70:	461a      	mov	r2, r3
 8007b72:	2300      	movs	r3, #0
 8007b74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b82:	461a      	mov	r2, r3
 8007b84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b94:	461a      	mov	r2, r3
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d3b5      	bcc.n	8007b08 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e043      	b.n	8007c2a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bb8:	d118      	bne.n	8007bec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e013      	b.n	8007bfe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be2:	461a      	mov	r2, r3
 8007be4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e008      	b.n	8007bfe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3301      	adds	r3, #1
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c2e:	461a      	mov	r2, r3
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d3b5      	bcc.n	8007ba2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007c56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f043 0210 	orr.w	r2, r3, #16
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699a      	ldr	r2, [r3, #24]
 8007c70:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb0 <USB_DevInit+0x2b4>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f043 0208 	orr.w	r2, r3, #8
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d105      	bne.n	8007ca0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <USB_DevInit+0x2b8>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cac:	b004      	add	sp, #16
 8007cae:	4770      	bx	lr
 8007cb0:	803c3800 	.word	0x803c3800
 8007cb4:	40000004 	.word	0x40000004

08007cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cd2:	d901      	bls.n	8007cd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e01b      	b.n	8007d10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	daf2      	bge.n	8007cc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	019b      	lsls	r3, r3, #6
 8007ce8:	f043 0220 	orr.w	r2, r3, #32
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cfc:	d901      	bls.n	8007d02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e006      	b.n	8007d10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d0f0      	beq.n	8007cf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d34:	d901      	bls.n	8007d3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e018      	b.n	8007d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	daf2      	bge.n	8007d28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2210      	movs	r2, #16
 8007d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d58:	d901      	bls.n	8007d5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e006      	b.n	8007d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0310 	and.w	r3, r3, #16
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	d0f0      	beq.n	8007d4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b085      	sub	sp, #20
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007dc4:	f023 0303 	bic.w	r3, r3, #3
 8007dc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	f003 0301 	and.w	r3, r3, #1
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e20:	d901      	bls.n	8007e26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e022      	b.n	8007e6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	daf2      	bge.n	8007e14 <USB_CoreReset+0xc>

  count = 10U;
 8007e2e:	230a      	movs	r3, #10
 8007e30:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007e32:	e002      	b.n	8007e3a <USB_CoreReset+0x32>
  {
    count--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1f9      	bne.n	8007e34 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f043 0201 	orr.w	r2, r3, #1
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e58:	d901      	bls.n	8007e5e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e006      	b.n	8007e6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d0f0      	beq.n	8007e4c <USB_CoreReset+0x44>

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <sniprintf>:
 8007e78:	b40c      	push	{r2, r3}
 8007e7a:	b530      	push	{r4, r5, lr}
 8007e7c:	4b18      	ldr	r3, [pc, #96]	@ (8007ee0 <sniprintf+0x68>)
 8007e7e:	1e0c      	subs	r4, r1, #0
 8007e80:	681d      	ldr	r5, [r3, #0]
 8007e82:	b09d      	sub	sp, #116	@ 0x74
 8007e84:	da08      	bge.n	8007e98 <sniprintf+0x20>
 8007e86:	238b      	movs	r3, #139	@ 0x8b
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	b01d      	add	sp, #116	@ 0x74
 8007e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e94:	b002      	add	sp, #8
 8007e96:	4770      	bx	lr
 8007e98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007ea6:	bf14      	ite	ne
 8007ea8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007eac:	4623      	moveq	r3, r4
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007eb6:	9002      	str	r0, [sp, #8]
 8007eb8:	9006      	str	r0, [sp, #24]
 8007eba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ebe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ec0:	ab21      	add	r3, sp, #132	@ 0x84
 8007ec2:	a902      	add	r1, sp, #8
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	f000 f994 	bl	80081f4 <_svfiprintf_r>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	bfbc      	itt	lt
 8007ed0:	238b      	movlt	r3, #139	@ 0x8b
 8007ed2:	602b      	strlt	r3, [r5, #0]
 8007ed4:	2c00      	cmp	r4, #0
 8007ed6:	d0da      	beq.n	8007e8e <sniprintf+0x16>
 8007ed8:	9b02      	ldr	r3, [sp, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e7d6      	b.n	8007e8e <sniprintf+0x16>
 8007ee0:	20000018 	.word	0x20000018

08007ee4 <memset>:
 8007ee4:	4402      	add	r2, r0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d100      	bne.n	8007eee <memset+0xa>
 8007eec:	4770      	bx	lr
 8007eee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef2:	e7f9      	b.n	8007ee8 <memset+0x4>

08007ef4 <__errno>:
 8007ef4:	4b01      	ldr	r3, [pc, #4]	@ (8007efc <__errno+0x8>)
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000018 	.word	0x20000018

08007f00 <__libc_init_array>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	4d0d      	ldr	r5, [pc, #52]	@ (8007f38 <__libc_init_array+0x38>)
 8007f04:	4c0d      	ldr	r4, [pc, #52]	@ (8007f3c <__libc_init_array+0x3c>)
 8007f06:	1b64      	subs	r4, r4, r5
 8007f08:	10a4      	asrs	r4, r4, #2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	42a6      	cmp	r6, r4
 8007f0e:	d109      	bne.n	8007f24 <__libc_init_array+0x24>
 8007f10:	4d0b      	ldr	r5, [pc, #44]	@ (8007f40 <__libc_init_array+0x40>)
 8007f12:	4c0c      	ldr	r4, [pc, #48]	@ (8007f44 <__libc_init_array+0x44>)
 8007f14:	f000 fc64 	bl	80087e0 <_init>
 8007f18:	1b64      	subs	r4, r4, r5
 8007f1a:	10a4      	asrs	r4, r4, #2
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	42a6      	cmp	r6, r4
 8007f20:	d105      	bne.n	8007f2e <__libc_init_array+0x2e>
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f28:	4798      	blx	r3
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7ee      	b.n	8007f0c <__libc_init_array+0xc>
 8007f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f32:	4798      	blx	r3
 8007f34:	3601      	adds	r6, #1
 8007f36:	e7f2      	b.n	8007f1e <__libc_init_array+0x1e>
 8007f38:	0800885c 	.word	0x0800885c
 8007f3c:	0800885c 	.word	0x0800885c
 8007f40:	0800885c 	.word	0x0800885c
 8007f44:	08008860 	.word	0x08008860

08007f48 <__retarget_lock_acquire_recursive>:
 8007f48:	4770      	bx	lr

08007f4a <__retarget_lock_release_recursive>:
 8007f4a:	4770      	bx	lr

08007f4c <_free_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4605      	mov	r5, r0
 8007f50:	2900      	cmp	r1, #0
 8007f52:	d041      	beq.n	8007fd8 <_free_r+0x8c>
 8007f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f58:	1f0c      	subs	r4, r1, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bfb8      	it	lt
 8007f5e:	18e4      	addlt	r4, r4, r3
 8007f60:	f000 f8e0 	bl	8008124 <__malloc_lock>
 8007f64:	4a1d      	ldr	r2, [pc, #116]	@ (8007fdc <_free_r+0x90>)
 8007f66:	6813      	ldr	r3, [r2, #0]
 8007f68:	b933      	cbnz	r3, 8007f78 <_free_r+0x2c>
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	6014      	str	r4, [r2, #0]
 8007f6e:	4628      	mov	r0, r5
 8007f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f74:	f000 b8dc 	b.w	8008130 <__malloc_unlock>
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d908      	bls.n	8007f8e <_free_r+0x42>
 8007f7c:	6820      	ldr	r0, [r4, #0]
 8007f7e:	1821      	adds	r1, r4, r0
 8007f80:	428b      	cmp	r3, r1
 8007f82:	bf01      	itttt	eq
 8007f84:	6819      	ldreq	r1, [r3, #0]
 8007f86:	685b      	ldreq	r3, [r3, #4]
 8007f88:	1809      	addeq	r1, r1, r0
 8007f8a:	6021      	streq	r1, [r4, #0]
 8007f8c:	e7ed      	b.n	8007f6a <_free_r+0x1e>
 8007f8e:	461a      	mov	r2, r3
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	b10b      	cbz	r3, 8007f98 <_free_r+0x4c>
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d9fa      	bls.n	8007f8e <_free_r+0x42>
 8007f98:	6811      	ldr	r1, [r2, #0]
 8007f9a:	1850      	adds	r0, r2, r1
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d10b      	bne.n	8007fb8 <_free_r+0x6c>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	4401      	add	r1, r0
 8007fa4:	1850      	adds	r0, r2, r1
 8007fa6:	4283      	cmp	r3, r0
 8007fa8:	6011      	str	r1, [r2, #0]
 8007faa:	d1e0      	bne.n	8007f6e <_free_r+0x22>
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	6053      	str	r3, [r2, #4]
 8007fb2:	4408      	add	r0, r1
 8007fb4:	6010      	str	r0, [r2, #0]
 8007fb6:	e7da      	b.n	8007f6e <_free_r+0x22>
 8007fb8:	d902      	bls.n	8007fc0 <_free_r+0x74>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	e7d6      	b.n	8007f6e <_free_r+0x22>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	1821      	adds	r1, r4, r0
 8007fc4:	428b      	cmp	r3, r1
 8007fc6:	bf04      	itt	eq
 8007fc8:	6819      	ldreq	r1, [r3, #0]
 8007fca:	685b      	ldreq	r3, [r3, #4]
 8007fcc:	6063      	str	r3, [r4, #4]
 8007fce:	bf04      	itt	eq
 8007fd0:	1809      	addeq	r1, r1, r0
 8007fd2:	6021      	streq	r1, [r4, #0]
 8007fd4:	6054      	str	r4, [r2, #4]
 8007fd6:	e7ca      	b.n	8007f6e <_free_r+0x22>
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000b18 	.word	0x20000b18

08007fe0 <sbrk_aligned>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8008020 <sbrk_aligned+0x40>)
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	6831      	ldr	r1, [r6, #0]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	b911      	cbnz	r1, 8007ff2 <sbrk_aligned+0x12>
 8007fec:	f000 fba4 	bl	8008738 <_sbrk_r>
 8007ff0:	6030      	str	r0, [r6, #0]
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f000 fb9f 	bl	8008738 <_sbrk_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d103      	bne.n	8008006 <sbrk_aligned+0x26>
 8007ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8008002:	4620      	mov	r0, r4
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	1cc4      	adds	r4, r0, #3
 8008008:	f024 0403 	bic.w	r4, r4, #3
 800800c:	42a0      	cmp	r0, r4
 800800e:	d0f8      	beq.n	8008002 <sbrk_aligned+0x22>
 8008010:	1a21      	subs	r1, r4, r0
 8008012:	4628      	mov	r0, r5
 8008014:	f000 fb90 	bl	8008738 <_sbrk_r>
 8008018:	3001      	adds	r0, #1
 800801a:	d1f2      	bne.n	8008002 <sbrk_aligned+0x22>
 800801c:	e7ef      	b.n	8007ffe <sbrk_aligned+0x1e>
 800801e:	bf00      	nop
 8008020:	20000b14 	.word	0x20000b14

08008024 <_malloc_r>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	1ccd      	adds	r5, r1, #3
 800802a:	f025 0503 	bic.w	r5, r5, #3
 800802e:	3508      	adds	r5, #8
 8008030:	2d0c      	cmp	r5, #12
 8008032:	bf38      	it	cc
 8008034:	250c      	movcc	r5, #12
 8008036:	2d00      	cmp	r5, #0
 8008038:	4606      	mov	r6, r0
 800803a:	db01      	blt.n	8008040 <_malloc_r+0x1c>
 800803c:	42a9      	cmp	r1, r5
 800803e:	d904      	bls.n	800804a <_malloc_r+0x26>
 8008040:	230c      	movs	r3, #12
 8008042:	6033      	str	r3, [r6, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008120 <_malloc_r+0xfc>
 800804e:	f000 f869 	bl	8008124 <__malloc_lock>
 8008052:	f8d8 3000 	ldr.w	r3, [r8]
 8008056:	461c      	mov	r4, r3
 8008058:	bb44      	cbnz	r4, 80080ac <_malloc_r+0x88>
 800805a:	4629      	mov	r1, r5
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff ffbf 	bl	8007fe0 <sbrk_aligned>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	4604      	mov	r4, r0
 8008066:	d158      	bne.n	800811a <_malloc_r+0xf6>
 8008068:	f8d8 4000 	ldr.w	r4, [r8]
 800806c:	4627      	mov	r7, r4
 800806e:	2f00      	cmp	r7, #0
 8008070:	d143      	bne.n	80080fa <_malloc_r+0xd6>
 8008072:	2c00      	cmp	r4, #0
 8008074:	d04b      	beq.n	800810e <_malloc_r+0xea>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	4639      	mov	r1, r7
 800807a:	4630      	mov	r0, r6
 800807c:	eb04 0903 	add.w	r9, r4, r3
 8008080:	f000 fb5a 	bl	8008738 <_sbrk_r>
 8008084:	4581      	cmp	r9, r0
 8008086:	d142      	bne.n	800810e <_malloc_r+0xea>
 8008088:	6821      	ldr	r1, [r4, #0]
 800808a:	1a6d      	subs	r5, r5, r1
 800808c:	4629      	mov	r1, r5
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ffa6 	bl	8007fe0 <sbrk_aligned>
 8008094:	3001      	adds	r0, #1
 8008096:	d03a      	beq.n	800810e <_malloc_r+0xea>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	442b      	add	r3, r5
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	f8d8 3000 	ldr.w	r3, [r8]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	bb62      	cbnz	r2, 8008100 <_malloc_r+0xdc>
 80080a6:	f8c8 7000 	str.w	r7, [r8]
 80080aa:	e00f      	b.n	80080cc <_malloc_r+0xa8>
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	1b52      	subs	r2, r2, r5
 80080b0:	d420      	bmi.n	80080f4 <_malloc_r+0xd0>
 80080b2:	2a0b      	cmp	r2, #11
 80080b4:	d917      	bls.n	80080e6 <_malloc_r+0xc2>
 80080b6:	1961      	adds	r1, r4, r5
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	6025      	str	r5, [r4, #0]
 80080bc:	bf18      	it	ne
 80080be:	6059      	strne	r1, [r3, #4]
 80080c0:	6863      	ldr	r3, [r4, #4]
 80080c2:	bf08      	it	eq
 80080c4:	f8c8 1000 	streq.w	r1, [r8]
 80080c8:	5162      	str	r2, [r4, r5]
 80080ca:	604b      	str	r3, [r1, #4]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 f82f 	bl	8008130 <__malloc_unlock>
 80080d2:	f104 000b 	add.w	r0, r4, #11
 80080d6:	1d23      	adds	r3, r4, #4
 80080d8:	f020 0007 	bic.w	r0, r0, #7
 80080dc:	1ac2      	subs	r2, r0, r3
 80080de:	bf1c      	itt	ne
 80080e0:	1a1b      	subne	r3, r3, r0
 80080e2:	50a3      	strne	r3, [r4, r2]
 80080e4:	e7af      	b.n	8008046 <_malloc_r+0x22>
 80080e6:	6862      	ldr	r2, [r4, #4]
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	bf0c      	ite	eq
 80080ec:	f8c8 2000 	streq.w	r2, [r8]
 80080f0:	605a      	strne	r2, [r3, #4]
 80080f2:	e7eb      	b.n	80080cc <_malloc_r+0xa8>
 80080f4:	4623      	mov	r3, r4
 80080f6:	6864      	ldr	r4, [r4, #4]
 80080f8:	e7ae      	b.n	8008058 <_malloc_r+0x34>
 80080fa:	463c      	mov	r4, r7
 80080fc:	687f      	ldr	r7, [r7, #4]
 80080fe:	e7b6      	b.n	800806e <_malloc_r+0x4a>
 8008100:	461a      	mov	r2, r3
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	42a3      	cmp	r3, r4
 8008106:	d1fb      	bne.n	8008100 <_malloc_r+0xdc>
 8008108:	2300      	movs	r3, #0
 800810a:	6053      	str	r3, [r2, #4]
 800810c:	e7de      	b.n	80080cc <_malloc_r+0xa8>
 800810e:	230c      	movs	r3, #12
 8008110:	6033      	str	r3, [r6, #0]
 8008112:	4630      	mov	r0, r6
 8008114:	f000 f80c 	bl	8008130 <__malloc_unlock>
 8008118:	e794      	b.n	8008044 <_malloc_r+0x20>
 800811a:	6005      	str	r5, [r0, #0]
 800811c:	e7d6      	b.n	80080cc <_malloc_r+0xa8>
 800811e:	bf00      	nop
 8008120:	20000b18 	.word	0x20000b18

08008124 <__malloc_lock>:
 8008124:	4801      	ldr	r0, [pc, #4]	@ (800812c <__malloc_lock+0x8>)
 8008126:	f7ff bf0f 	b.w	8007f48 <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	20000b10 	.word	0x20000b10

08008130 <__malloc_unlock>:
 8008130:	4801      	ldr	r0, [pc, #4]	@ (8008138 <__malloc_unlock+0x8>)
 8008132:	f7ff bf0a 	b.w	8007f4a <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	20000b10 	.word	0x20000b10

0800813c <__ssputs_r>:
 800813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	688e      	ldr	r6, [r1, #8]
 8008142:	461f      	mov	r7, r3
 8008144:	42be      	cmp	r6, r7
 8008146:	680b      	ldr	r3, [r1, #0]
 8008148:	4682      	mov	sl, r0
 800814a:	460c      	mov	r4, r1
 800814c:	4690      	mov	r8, r2
 800814e:	d82d      	bhi.n	80081ac <__ssputs_r+0x70>
 8008150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008158:	d026      	beq.n	80081a8 <__ssputs_r+0x6c>
 800815a:	6965      	ldr	r5, [r4, #20]
 800815c:	6909      	ldr	r1, [r1, #16]
 800815e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008162:	eba3 0901 	sub.w	r9, r3, r1
 8008166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800816a:	1c7b      	adds	r3, r7, #1
 800816c:	444b      	add	r3, r9
 800816e:	106d      	asrs	r5, r5, #1
 8008170:	429d      	cmp	r5, r3
 8008172:	bf38      	it	cc
 8008174:	461d      	movcc	r5, r3
 8008176:	0553      	lsls	r3, r2, #21
 8008178:	d527      	bpl.n	80081ca <__ssputs_r+0x8e>
 800817a:	4629      	mov	r1, r5
 800817c:	f7ff ff52 	bl	8008024 <_malloc_r>
 8008180:	4606      	mov	r6, r0
 8008182:	b360      	cbz	r0, 80081de <__ssputs_r+0xa2>
 8008184:	6921      	ldr	r1, [r4, #16]
 8008186:	464a      	mov	r2, r9
 8008188:	f000 fae6 	bl	8008758 <memcpy>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	6126      	str	r6, [r4, #16]
 800819a:	6165      	str	r5, [r4, #20]
 800819c:	444e      	add	r6, r9
 800819e:	eba5 0509 	sub.w	r5, r5, r9
 80081a2:	6026      	str	r6, [r4, #0]
 80081a4:	60a5      	str	r5, [r4, #8]
 80081a6:	463e      	mov	r6, r7
 80081a8:	42be      	cmp	r6, r7
 80081aa:	d900      	bls.n	80081ae <__ssputs_r+0x72>
 80081ac:	463e      	mov	r6, r7
 80081ae:	6820      	ldr	r0, [r4, #0]
 80081b0:	4632      	mov	r2, r6
 80081b2:	4641      	mov	r1, r8
 80081b4:	f000 faa6 	bl	8008704 <memmove>
 80081b8:	68a3      	ldr	r3, [r4, #8]
 80081ba:	1b9b      	subs	r3, r3, r6
 80081bc:	60a3      	str	r3, [r4, #8]
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	4433      	add	r3, r6
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	2000      	movs	r0, #0
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	462a      	mov	r2, r5
 80081cc:	f000 fad2 	bl	8008774 <_realloc_r>
 80081d0:	4606      	mov	r6, r0
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1e0      	bne.n	8008198 <__ssputs_r+0x5c>
 80081d6:	6921      	ldr	r1, [r4, #16]
 80081d8:	4650      	mov	r0, sl
 80081da:	f7ff feb7 	bl	8007f4c <_free_r>
 80081de:	230c      	movs	r3, #12
 80081e0:	f8ca 3000 	str.w	r3, [sl]
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	e7e9      	b.n	80081c6 <__ssputs_r+0x8a>
	...

080081f4 <_svfiprintf_r>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	4698      	mov	r8, r3
 80081fa:	898b      	ldrh	r3, [r1, #12]
 80081fc:	061b      	lsls	r3, r3, #24
 80081fe:	b09d      	sub	sp, #116	@ 0x74
 8008200:	4607      	mov	r7, r0
 8008202:	460d      	mov	r5, r1
 8008204:	4614      	mov	r4, r2
 8008206:	d510      	bpl.n	800822a <_svfiprintf_r+0x36>
 8008208:	690b      	ldr	r3, [r1, #16]
 800820a:	b973      	cbnz	r3, 800822a <_svfiprintf_r+0x36>
 800820c:	2140      	movs	r1, #64	@ 0x40
 800820e:	f7ff ff09 	bl	8008024 <_malloc_r>
 8008212:	6028      	str	r0, [r5, #0]
 8008214:	6128      	str	r0, [r5, #16]
 8008216:	b930      	cbnz	r0, 8008226 <_svfiprintf_r+0x32>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	b01d      	add	sp, #116	@ 0x74
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	2340      	movs	r3, #64	@ 0x40
 8008228:	616b      	str	r3, [r5, #20]
 800822a:	2300      	movs	r3, #0
 800822c:	9309      	str	r3, [sp, #36]	@ 0x24
 800822e:	2320      	movs	r3, #32
 8008230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008234:	f8cd 800c 	str.w	r8, [sp, #12]
 8008238:	2330      	movs	r3, #48	@ 0x30
 800823a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083d8 <_svfiprintf_r+0x1e4>
 800823e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008242:	f04f 0901 	mov.w	r9, #1
 8008246:	4623      	mov	r3, r4
 8008248:	469a      	mov	sl, r3
 800824a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800824e:	b10a      	cbz	r2, 8008254 <_svfiprintf_r+0x60>
 8008250:	2a25      	cmp	r2, #37	@ 0x25
 8008252:	d1f9      	bne.n	8008248 <_svfiprintf_r+0x54>
 8008254:	ebba 0b04 	subs.w	fp, sl, r4
 8008258:	d00b      	beq.n	8008272 <_svfiprintf_r+0x7e>
 800825a:	465b      	mov	r3, fp
 800825c:	4622      	mov	r2, r4
 800825e:	4629      	mov	r1, r5
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff ff6b 	bl	800813c <__ssputs_r>
 8008266:	3001      	adds	r0, #1
 8008268:	f000 80a7 	beq.w	80083ba <_svfiprintf_r+0x1c6>
 800826c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800826e:	445a      	add	r2, fp
 8008270:	9209      	str	r2, [sp, #36]	@ 0x24
 8008272:	f89a 3000 	ldrb.w	r3, [sl]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 809f 	beq.w	80083ba <_svfiprintf_r+0x1c6>
 800827c:	2300      	movs	r3, #0
 800827e:	f04f 32ff 	mov.w	r2, #4294967295
 8008282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008286:	f10a 0a01 	add.w	sl, sl, #1
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	9307      	str	r3, [sp, #28]
 800828e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008292:	931a      	str	r3, [sp, #104]	@ 0x68
 8008294:	4654      	mov	r4, sl
 8008296:	2205      	movs	r2, #5
 8008298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829c:	484e      	ldr	r0, [pc, #312]	@ (80083d8 <_svfiprintf_r+0x1e4>)
 800829e:	f7f7 ffd7 	bl	8000250 <memchr>
 80082a2:	9a04      	ldr	r2, [sp, #16]
 80082a4:	b9d8      	cbnz	r0, 80082de <_svfiprintf_r+0xea>
 80082a6:	06d0      	lsls	r0, r2, #27
 80082a8:	bf44      	itt	mi
 80082aa:	2320      	movmi	r3, #32
 80082ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082b0:	0711      	lsls	r1, r2, #28
 80082b2:	bf44      	itt	mi
 80082b4:	232b      	movmi	r3, #43	@ 0x2b
 80082b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082ba:	f89a 3000 	ldrb.w	r3, [sl]
 80082be:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c0:	d015      	beq.n	80082ee <_svfiprintf_r+0xfa>
 80082c2:	9a07      	ldr	r2, [sp, #28]
 80082c4:	4654      	mov	r4, sl
 80082c6:	2000      	movs	r0, #0
 80082c8:	f04f 0c0a 	mov.w	ip, #10
 80082cc:	4621      	mov	r1, r4
 80082ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d2:	3b30      	subs	r3, #48	@ 0x30
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	d94b      	bls.n	8008370 <_svfiprintf_r+0x17c>
 80082d8:	b1b0      	cbz	r0, 8008308 <_svfiprintf_r+0x114>
 80082da:	9207      	str	r2, [sp, #28]
 80082dc:	e014      	b.n	8008308 <_svfiprintf_r+0x114>
 80082de:	eba0 0308 	sub.w	r3, r0, r8
 80082e2:	fa09 f303 	lsl.w	r3, r9, r3
 80082e6:	4313      	orrs	r3, r2
 80082e8:	9304      	str	r3, [sp, #16]
 80082ea:	46a2      	mov	sl, r4
 80082ec:	e7d2      	b.n	8008294 <_svfiprintf_r+0xa0>
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	1d19      	adds	r1, r3, #4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	9103      	str	r1, [sp, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bfbb      	ittet	lt
 80082fa:	425b      	neglt	r3, r3
 80082fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008300:	9307      	strge	r3, [sp, #28]
 8008302:	9307      	strlt	r3, [sp, #28]
 8008304:	bfb8      	it	lt
 8008306:	9204      	strlt	r2, [sp, #16]
 8008308:	7823      	ldrb	r3, [r4, #0]
 800830a:	2b2e      	cmp	r3, #46	@ 0x2e
 800830c:	d10a      	bne.n	8008324 <_svfiprintf_r+0x130>
 800830e:	7863      	ldrb	r3, [r4, #1]
 8008310:	2b2a      	cmp	r3, #42	@ 0x2a
 8008312:	d132      	bne.n	800837a <_svfiprintf_r+0x186>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	9203      	str	r2, [sp, #12]
 800831c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008320:	3402      	adds	r4, #2
 8008322:	9305      	str	r3, [sp, #20]
 8008324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083e8 <_svfiprintf_r+0x1f4>
 8008328:	7821      	ldrb	r1, [r4, #0]
 800832a:	2203      	movs	r2, #3
 800832c:	4650      	mov	r0, sl
 800832e:	f7f7 ff8f 	bl	8000250 <memchr>
 8008332:	b138      	cbz	r0, 8008344 <_svfiprintf_r+0x150>
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	eba0 000a 	sub.w	r0, r0, sl
 800833a:	2240      	movs	r2, #64	@ 0x40
 800833c:	4082      	lsls	r2, r0
 800833e:	4313      	orrs	r3, r2
 8008340:	3401      	adds	r4, #1
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008348:	4824      	ldr	r0, [pc, #144]	@ (80083dc <_svfiprintf_r+0x1e8>)
 800834a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800834e:	2206      	movs	r2, #6
 8008350:	f7f7 ff7e 	bl	8000250 <memchr>
 8008354:	2800      	cmp	r0, #0
 8008356:	d036      	beq.n	80083c6 <_svfiprintf_r+0x1d2>
 8008358:	4b21      	ldr	r3, [pc, #132]	@ (80083e0 <_svfiprintf_r+0x1ec>)
 800835a:	bb1b      	cbnz	r3, 80083a4 <_svfiprintf_r+0x1b0>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	3307      	adds	r3, #7
 8008360:	f023 0307 	bic.w	r3, r3, #7
 8008364:	3308      	adds	r3, #8
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836a:	4433      	add	r3, r6
 800836c:	9309      	str	r3, [sp, #36]	@ 0x24
 800836e:	e76a      	b.n	8008246 <_svfiprintf_r+0x52>
 8008370:	fb0c 3202 	mla	r2, ip, r2, r3
 8008374:	460c      	mov	r4, r1
 8008376:	2001      	movs	r0, #1
 8008378:	e7a8      	b.n	80082cc <_svfiprintf_r+0xd8>
 800837a:	2300      	movs	r3, #0
 800837c:	3401      	adds	r4, #1
 800837e:	9305      	str	r3, [sp, #20]
 8008380:	4619      	mov	r1, r3
 8008382:	f04f 0c0a 	mov.w	ip, #10
 8008386:	4620      	mov	r0, r4
 8008388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800838c:	3a30      	subs	r2, #48	@ 0x30
 800838e:	2a09      	cmp	r2, #9
 8008390:	d903      	bls.n	800839a <_svfiprintf_r+0x1a6>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0c6      	beq.n	8008324 <_svfiprintf_r+0x130>
 8008396:	9105      	str	r1, [sp, #20]
 8008398:	e7c4      	b.n	8008324 <_svfiprintf_r+0x130>
 800839a:	fb0c 2101 	mla	r1, ip, r1, r2
 800839e:	4604      	mov	r4, r0
 80083a0:	2301      	movs	r3, #1
 80083a2:	e7f0      	b.n	8008386 <_svfiprintf_r+0x192>
 80083a4:	ab03      	add	r3, sp, #12
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	462a      	mov	r2, r5
 80083aa:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <_svfiprintf_r+0x1f0>)
 80083ac:	a904      	add	r1, sp, #16
 80083ae:	4638      	mov	r0, r7
 80083b0:	f3af 8000 	nop.w
 80083b4:	1c42      	adds	r2, r0, #1
 80083b6:	4606      	mov	r6, r0
 80083b8:	d1d6      	bne.n	8008368 <_svfiprintf_r+0x174>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	065b      	lsls	r3, r3, #25
 80083be:	f53f af2d 	bmi.w	800821c <_svfiprintf_r+0x28>
 80083c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083c4:	e72c      	b.n	8008220 <_svfiprintf_r+0x2c>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <_svfiprintf_r+0x1f0>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4638      	mov	r0, r7
 80083d2:	f000 f879 	bl	80084c8 <_printf_i>
 80083d6:	e7ed      	b.n	80083b4 <_svfiprintf_r+0x1c0>
 80083d8:	08008820 	.word	0x08008820
 80083dc:	0800882a 	.word	0x0800882a
 80083e0:	00000000 	.word	0x00000000
 80083e4:	0800813d 	.word	0x0800813d
 80083e8:	08008826 	.word	0x08008826

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4698      	mov	r8, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	3b00      	subs	r3, #0
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008448:	4641      	mov	r1, r8
 800844a:	4638      	mov	r0, r7
 800844c:	47c8      	blx	r9
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4641      	mov	r1, r8
 8008488:	4638      	mov	r0, r7
 800848a:	47c8      	blx	r9
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	@ 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4641      	mov	r1, r8
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c8      	blx	r9
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084d0:	2f78      	cmp	r7, #120	@ 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	@ 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d1 	beq.w	800868c <_printf_i+0x1c4>
 80084ea:	2f58      	cmp	r7, #88	@ 0x58
 80084ec:	f000 80b8 	beq.w	8008660 <_printf_i+0x198>
 80084f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	@ (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008673 	.word	0x08008673
 8008538:	0800859f 	.word	0x0800859f
 800853c:	0800862d 	.word	0x0800862d
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	08008695 	.word	0x08008695
 800854c:	080084f1 	.word	0x080084f1
 8008550:	0800859f 	.word	0x0800859f
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	08008635 	.word	0x08008635
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6032      	str	r2, [r6, #0]
 8008568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09c      	b.n	80086ae <_printf_i+0x1e6>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	1d19      	adds	r1, r3, #4
 800857a:	6031      	str	r1, [r6, #0]
 800857c:	0606      	lsls	r6, r0, #24
 800857e:	d501      	bpl.n	8008584 <_printf_i+0xbc>
 8008580:	681d      	ldr	r5, [r3, #0]
 8008582:	e003      	b.n	800858c <_printf_i+0xc4>
 8008584:	0645      	lsls	r5, r0, #25
 8008586:	d5fb      	bpl.n	8008580 <_printf_i+0xb8>
 8008588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800858c:	2d00      	cmp	r5, #0
 800858e:	da03      	bge.n	8008598 <_printf_i+0xd0>
 8008590:	232d      	movs	r3, #45	@ 0x2d
 8008592:	426d      	negs	r5, r5
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008598:	4858      	ldr	r0, [pc, #352]	@ (80086fc <_printf_i+0x234>)
 800859a:	230a      	movs	r3, #10
 800859c:	e011      	b.n	80085c2 <_printf_i+0xfa>
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	0608      	lsls	r0, r1, #24
 80085a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085a8:	d402      	bmi.n	80085b0 <_printf_i+0xe8>
 80085aa:	0649      	lsls	r1, r1, #25
 80085ac:	bf48      	it	mi
 80085ae:	b2ad      	uxthmi	r5, r5
 80085b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085b2:	4852      	ldr	r0, [pc, #328]	@ (80086fc <_printf_i+0x234>)
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	bf14      	ite	ne
 80085b8:	230a      	movne	r3, #10
 80085ba:	2308      	moveq	r3, #8
 80085bc:	2100      	movs	r1, #0
 80085be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085c2:	6866      	ldr	r6, [r4, #4]
 80085c4:	60a6      	str	r6, [r4, #8]
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	db05      	blt.n	80085d6 <_printf_i+0x10e>
 80085ca:	6821      	ldr	r1, [r4, #0]
 80085cc:	432e      	orrs	r6, r5
 80085ce:	f021 0104 	bic.w	r1, r1, #4
 80085d2:	6021      	str	r1, [r4, #0]
 80085d4:	d04b      	beq.n	800866e <_printf_i+0x1a6>
 80085d6:	4616      	mov	r6, r2
 80085d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80085dc:	fb03 5711 	mls	r7, r3, r1, r5
 80085e0:	5dc7      	ldrb	r7, [r0, r7]
 80085e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085e6:	462f      	mov	r7, r5
 80085e8:	42bb      	cmp	r3, r7
 80085ea:	460d      	mov	r5, r1
 80085ec:	d9f4      	bls.n	80085d8 <_printf_i+0x110>
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d10b      	bne.n	800860a <_printf_i+0x142>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	07df      	lsls	r7, r3, #31
 80085f6:	d508      	bpl.n	800860a <_printf_i+0x142>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	6861      	ldr	r1, [r4, #4]
 80085fc:	4299      	cmp	r1, r3
 80085fe:	bfde      	ittt	le
 8008600:	2330      	movle	r3, #48	@ 0x30
 8008602:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008606:	f106 36ff 	addle.w	r6, r6, #4294967295
 800860a:	1b92      	subs	r2, r2, r6
 800860c:	6122      	str	r2, [r4, #16]
 800860e:	f8cd a000 	str.w	sl, [sp]
 8008612:	464b      	mov	r3, r9
 8008614:	aa03      	add	r2, sp, #12
 8008616:	4621      	mov	r1, r4
 8008618:	4640      	mov	r0, r8
 800861a:	f7ff fee7 	bl	80083ec <_printf_common>
 800861e:	3001      	adds	r0, #1
 8008620:	d14a      	bne.n	80086b8 <_printf_i+0x1f0>
 8008622:	f04f 30ff 	mov.w	r0, #4294967295
 8008626:	b004      	add	sp, #16
 8008628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	f043 0320 	orr.w	r3, r3, #32
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	4832      	ldr	r0, [pc, #200]	@ (8008700 <_printf_i+0x238>)
 8008636:	2778      	movs	r7, #120	@ 0x78
 8008638:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	6831      	ldr	r1, [r6, #0]
 8008640:	061f      	lsls	r7, r3, #24
 8008642:	f851 5b04 	ldr.w	r5, [r1], #4
 8008646:	d402      	bmi.n	800864e <_printf_i+0x186>
 8008648:	065f      	lsls	r7, r3, #25
 800864a:	bf48      	it	mi
 800864c:	b2ad      	uxthmi	r5, r5
 800864e:	6031      	str	r1, [r6, #0]
 8008650:	07d9      	lsls	r1, r3, #31
 8008652:	bf44      	itt	mi
 8008654:	f043 0320 	orrmi.w	r3, r3, #32
 8008658:	6023      	strmi	r3, [r4, #0]
 800865a:	b11d      	cbz	r5, 8008664 <_printf_i+0x19c>
 800865c:	2310      	movs	r3, #16
 800865e:	e7ad      	b.n	80085bc <_printf_i+0xf4>
 8008660:	4826      	ldr	r0, [pc, #152]	@ (80086fc <_printf_i+0x234>)
 8008662:	e7e9      	b.n	8008638 <_printf_i+0x170>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	e7f6      	b.n	800865c <_printf_i+0x194>
 800866e:	4616      	mov	r6, r2
 8008670:	e7bd      	b.n	80085ee <_printf_i+0x126>
 8008672:	6833      	ldr	r3, [r6, #0]
 8008674:	6825      	ldr	r5, [r4, #0]
 8008676:	6961      	ldr	r1, [r4, #20]
 8008678:	1d18      	adds	r0, r3, #4
 800867a:	6030      	str	r0, [r6, #0]
 800867c:	062e      	lsls	r6, r5, #24
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	d501      	bpl.n	8008686 <_printf_i+0x1be>
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	e002      	b.n	800868c <_printf_i+0x1c4>
 8008686:	0668      	lsls	r0, r5, #25
 8008688:	d5fb      	bpl.n	8008682 <_printf_i+0x1ba>
 800868a:	8019      	strh	r1, [r3, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	4616      	mov	r6, r2
 8008692:	e7bc      	b.n	800860e <_printf_i+0x146>
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	6032      	str	r2, [r6, #0]
 800869a:	681e      	ldr	r6, [r3, #0]
 800869c:	6862      	ldr	r2, [r4, #4]
 800869e:	2100      	movs	r1, #0
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7f7 fdd5 	bl	8000250 <memchr>
 80086a6:	b108      	cbz	r0, 80086ac <_printf_i+0x1e4>
 80086a8:	1b80      	subs	r0, r0, r6
 80086aa:	6060      	str	r0, [r4, #4]
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	2300      	movs	r3, #0
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b6:	e7aa      	b.n	800860e <_printf_i+0x146>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	4632      	mov	r2, r6
 80086bc:	4649      	mov	r1, r9
 80086be:	4640      	mov	r0, r8
 80086c0:	47d0      	blx	sl
 80086c2:	3001      	adds	r0, #1
 80086c4:	d0ad      	beq.n	8008622 <_printf_i+0x15a>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	079b      	lsls	r3, r3, #30
 80086ca:	d413      	bmi.n	80086f4 <_printf_i+0x22c>
 80086cc:	68e0      	ldr	r0, [r4, #12]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	4298      	cmp	r0, r3
 80086d2:	bfb8      	it	lt
 80086d4:	4618      	movlt	r0, r3
 80086d6:	e7a6      	b.n	8008626 <_printf_i+0x15e>
 80086d8:	2301      	movs	r3, #1
 80086da:	4632      	mov	r2, r6
 80086dc:	4649      	mov	r1, r9
 80086de:	4640      	mov	r0, r8
 80086e0:	47d0      	blx	sl
 80086e2:	3001      	adds	r0, #1
 80086e4:	d09d      	beq.n	8008622 <_printf_i+0x15a>
 80086e6:	3501      	adds	r5, #1
 80086e8:	68e3      	ldr	r3, [r4, #12]
 80086ea:	9903      	ldr	r1, [sp, #12]
 80086ec:	1a5b      	subs	r3, r3, r1
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	dcf2      	bgt.n	80086d8 <_printf_i+0x210>
 80086f2:	e7eb      	b.n	80086cc <_printf_i+0x204>
 80086f4:	2500      	movs	r5, #0
 80086f6:	f104 0619 	add.w	r6, r4, #25
 80086fa:	e7f5      	b.n	80086e8 <_printf_i+0x220>
 80086fc:	08008831 	.word	0x08008831
 8008700:	08008842 	.word	0x08008842

08008704 <memmove>:
 8008704:	4288      	cmp	r0, r1
 8008706:	b510      	push	{r4, lr}
 8008708:	eb01 0402 	add.w	r4, r1, r2
 800870c:	d902      	bls.n	8008714 <memmove+0x10>
 800870e:	4284      	cmp	r4, r0
 8008710:	4623      	mov	r3, r4
 8008712:	d807      	bhi.n	8008724 <memmove+0x20>
 8008714:	1e43      	subs	r3, r0, #1
 8008716:	42a1      	cmp	r1, r4
 8008718:	d008      	beq.n	800872c <memmove+0x28>
 800871a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800871e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008722:	e7f8      	b.n	8008716 <memmove+0x12>
 8008724:	4402      	add	r2, r0
 8008726:	4601      	mov	r1, r0
 8008728:	428a      	cmp	r2, r1
 800872a:	d100      	bne.n	800872e <memmove+0x2a>
 800872c:	bd10      	pop	{r4, pc}
 800872e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008736:	e7f7      	b.n	8008728 <memmove+0x24>

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d06      	ldr	r5, [pc, #24]	@ (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	f7f9 f8f0 	bl	8001928 <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000b0c 	.word	0x20000b0c

08008758 <memcpy>:
 8008758:	440a      	add	r2, r1
 800875a:	4291      	cmp	r1, r2
 800875c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008760:	d100      	bne.n	8008764 <memcpy+0xc>
 8008762:	4770      	bx	lr
 8008764:	b510      	push	{r4, lr}
 8008766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800876a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800876e:	4291      	cmp	r1, r2
 8008770:	d1f9      	bne.n	8008766 <memcpy+0xe>
 8008772:	bd10      	pop	{r4, pc}

08008774 <_realloc_r>:
 8008774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008778:	4607      	mov	r7, r0
 800877a:	4614      	mov	r4, r2
 800877c:	460d      	mov	r5, r1
 800877e:	b921      	cbnz	r1, 800878a <_realloc_r+0x16>
 8008780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008784:	4611      	mov	r1, r2
 8008786:	f7ff bc4d 	b.w	8008024 <_malloc_r>
 800878a:	b92a      	cbnz	r2, 8008798 <_realloc_r+0x24>
 800878c:	f7ff fbde 	bl	8007f4c <_free_r>
 8008790:	4625      	mov	r5, r4
 8008792:	4628      	mov	r0, r5
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	f000 f81a 	bl	80087d0 <_malloc_usable_size_r>
 800879c:	4284      	cmp	r4, r0
 800879e:	4606      	mov	r6, r0
 80087a0:	d802      	bhi.n	80087a8 <_realloc_r+0x34>
 80087a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087a6:	d8f4      	bhi.n	8008792 <_realloc_r+0x1e>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4638      	mov	r0, r7
 80087ac:	f7ff fc3a 	bl	8008024 <_malloc_r>
 80087b0:	4680      	mov	r8, r0
 80087b2:	b908      	cbnz	r0, 80087b8 <_realloc_r+0x44>
 80087b4:	4645      	mov	r5, r8
 80087b6:	e7ec      	b.n	8008792 <_realloc_r+0x1e>
 80087b8:	42b4      	cmp	r4, r6
 80087ba:	4622      	mov	r2, r4
 80087bc:	4629      	mov	r1, r5
 80087be:	bf28      	it	cs
 80087c0:	4632      	movcs	r2, r6
 80087c2:	f7ff ffc9 	bl	8008758 <memcpy>
 80087c6:	4629      	mov	r1, r5
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff fbbf 	bl	8007f4c <_free_r>
 80087ce:	e7f1      	b.n	80087b4 <_realloc_r+0x40>

080087d0 <_malloc_usable_size_r>:
 80087d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d4:	1f18      	subs	r0, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbc      	itt	lt
 80087da:	580b      	ldrlt	r3, [r1, r0]
 80087dc:	18c0      	addlt	r0, r0, r3
 80087de:	4770      	bx	lr

080087e0 <_init>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	bf00      	nop
 80087e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e6:	bc08      	pop	{r3}
 80087e8:	469e      	mov	lr, r3
 80087ea:	4770      	bx	lr

080087ec <_fini>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	bf00      	nop
 80087f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f2:	bc08      	pop	{r3}
 80087f4:	469e      	mov	lr, r3
 80087f6:	4770      	bx	lr
