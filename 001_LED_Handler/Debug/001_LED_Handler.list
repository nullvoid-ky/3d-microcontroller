
001_LED_Handler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c4  080056c4  0000714c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056cc  080056cc  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056d0  080056d0  000066d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080056d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  080056e0  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005780  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000078c  2000014c  08005820  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008d8  08005820  000078d8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018033  00000000  00000000  0000717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003af1  00000000  00000000  0001f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001298  00000000  00000000  00022ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e46  00000000  00000000  00023f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002af37  00000000  00000000  00024d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ad4d  00000000  00000000  0004fcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100dcc  00000000  00000000  0006aa02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016b7ce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004c4c  00000000  00000000  0016b814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00170460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	080055b4 	.word	0x080055b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	080055b4 	.word	0x080055b4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056a:	463b      	mov	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000576:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000578:	4a44      	ldr	r2, [pc, #272]	@ (800068c <MX_ADC3_Init+0x128>)
 800057a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800057c:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <MX_ADC3_Init+0x124>)
 800057e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000582:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000584:	4b40      	ldr	r3, [pc, #256]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058a:	4b3f      	ldr	r3, [pc, #252]	@ (8000688 <MX_ADC3_Init+0x124>)
 800058c:	2201      	movs	r2, #1
 800058e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000590:	4b3d      	ldr	r3, [pc, #244]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000592:	2201      	movs	r2, #1
 8000594:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000596:	4b3c      	ldr	r3, [pc, #240]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059e:	4b3a      	ldr	r3, [pc, #232]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a4:	4b38      	ldr	r3, [pc, #224]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000690 <MX_ADC3_Init+0x12c>)
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005aa:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005b2:	2206      	movs	r2, #6
 80005b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80005b6:	4b34      	ldr	r3, [pc, #208]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005be:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005c4:	4830      	ldr	r0, [pc, #192]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005c6:	f001 f861 	bl	800168c <HAL_ADC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80005d0:	f000 fda0 	bl	8001114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005d4:	2303      	movs	r3, #3
 80005d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d8:	2301      	movs	r3, #1
 80005da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005dc:	2307      	movs	r3, #7
 80005de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4619      	mov	r1, r3
 80005e4:	4828      	ldr	r0, [pc, #160]	@ (8000688 <MX_ADC3_Init+0x124>)
 80005e6:	f001 f895 	bl	8001714 <HAL_ADC_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80005f0:	f000 fd90 	bl	8001114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005f4:	230a      	movs	r3, #10
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4821      	ldr	r0, [pc, #132]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000602:	f001 f887 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800060c:	f000 fd82 	bl	8001114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000610:	230d      	movs	r3, #13
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000614:	2303      	movs	r3, #3
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	481a      	ldr	r0, [pc, #104]	@ (8000688 <MX_ADC3_Init+0x124>)
 800061e:	f001 f879 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000628:	f000 fd74 	bl	8001114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800062c:	2309      	movs	r3, #9
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000630:	2304      	movs	r3, #4
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4813      	ldr	r0, [pc, #76]	@ (8000688 <MX_ADC3_Init+0x124>)
 800063a:	f001 f86b 	bl	8001714 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000644:	f000 fd66 	bl	8001114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800064c:	2305      	movs	r3, #5
 800064e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000656:	f001 f85d 	bl	8001714 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000660:	f000 fd58 	bl	8001114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000664:	2308      	movs	r3, #8
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000668:	2306      	movs	r3, #6
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_ADC3_Init+0x124>)
 8000672:	f001 f84f 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 800067c:	f000 fd4a 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000168 	.word	0x20000168
 800068c:	40012200 	.word	0x40012200
 8000690:	0f000001 	.word	0x0f000001

08000694 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	@ 0x30
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a46      	ldr	r2, [pc, #280]	@ (80007cc <HAL_ADC_MspInit+0x138>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	f040 8085 	bne.w	80007c2 <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80006b8:	4b45      	ldr	r3, [pc, #276]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006bc:	4a44      	ldr	r2, [pc, #272]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80006c4:	4b42      	ldr	r3, [pc, #264]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d0:	4b3f      	ldr	r3, [pc, #252]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	4a3e      	ldr	r2, [pc, #248]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	6313      	str	r3, [r2, #48]	@ 0x30
 80006dc:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e8:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a38      	ldr	r2, [pc, #224]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f4:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	4a32      	ldr	r2, [pc, #200]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6313      	str	r3, [r2, #48]	@ 0x30
 800070c:	4b30      	ldr	r3, [pc, #192]	@ (80007d0 <HAL_ADC_MspInit+0x13c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = ADC3_09_R4_Pin|ADC3_15_R5_Pin|ADC3_08_R6_Pin;
 8000718:	f44f 6385 	mov.w	r3, #1064	@ 0x428
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4829      	ldr	r0, [pc, #164]	@ (80007d4 <HAL_ADC_MspInit+0x140>)
 800072e:	f002 f98f 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC3_10_R2_Pin|ADC3_13_R3_Pin;
 8000732:	2309      	movs	r3, #9
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000736:	2303      	movs	r3, #3
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4824      	ldr	r0, [pc, #144]	@ (80007d8 <HAL_ADC_MspInit+0x144>)
 8000746:	f002 f983 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC3_03_R1_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC3_03_R1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	481f      	ldr	r0, [pc, #124]	@ (80007dc <HAL_ADC_MspInit+0x148>)
 800075e:	f002 f977 	bl	8002a50 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 8000764:	4a1f      	ldr	r2, [pc, #124]	@ (80007e4 <HAL_ADC_MspInit+0x150>)
 8000766:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 800076a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800076e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_DISABLE;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 8000784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000788:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 800078c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000790:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 8000794:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000798:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80007a6:	480e      	ldr	r0, [pc, #56]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 80007a8:	f001 fb1a 	bl	8001de0 <HAL_DMA_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80007b2:	f000 fcaf 	bl	8001114 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 80007ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80007bc:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_ADC_MspInit+0x14c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	@ 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40012200 	.word	0x40012200
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40021400 	.word	0x40021400
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	200001b0 	.word	0x200001b0
 80007e4:	40026410 	.word	0x40026410

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_DMA_Init+0x38>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <MX_DMA_Init+0x38>)
 80007f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_DMA_Init+0x38>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2038      	movs	r0, #56	@ 0x38
 800080c:	f001 fab1 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000810:	2038      	movs	r0, #56	@ 0x38
 8000812:	f001 faca 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000828:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_ETH_Init+0x84>)
 800082a:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <MX_ETH_Init+0x88>)
 800082c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_ETH_Init+0x8c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000834:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_ETH_Init+0x8c>)
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_ETH_Init+0x8c>)
 800083c:	22e1      	movs	r2, #225	@ 0xe1
 800083e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_ETH_Init+0x8c>)
 8000842:	2200      	movs	r2, #0
 8000844:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_ETH_Init+0x8c>)
 8000848:	2200      	movs	r2, #0
 800084a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_ETH_Init+0x8c>)
 800084e:	2200      	movs	r2, #0
 8000850:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_ETH_Init+0x84>)
 8000854:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <MX_ETH_Init+0x8c>)
 8000856:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_ETH_Init+0x84>)
 800085a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800085e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_ETH_Init+0x84>)
 8000862:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <MX_ETH_Init+0x90>)
 8000864:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_ETH_Init+0x84>)
 8000868:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <MX_ETH_Init+0x94>)
 800086a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800086c:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_ETH_Init+0x84>)
 800086e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000872:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_ETH_Init+0x84>)
 8000876:	f001 fd9d 	bl	80023b4 <HAL_ETH_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 fc48 	bl	8001114 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000884:	2238      	movs	r2, #56	@ 0x38
 8000886:	2100      	movs	r1, #0
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <MX_ETH_Init+0x98>)
 800088a:	f004 fe67 	bl	800555c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_ETH_Init+0x98>)
 8000890:	2221      	movs	r2, #33	@ 0x21
 8000892:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_ETH_Init+0x98>)
 8000896:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800089a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_ETH_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000248 	.word	0x20000248
 80008ac:	40028000 	.word	0x40028000
 80008b0:	200002f8 	.word	0x200002f8
 80008b4:	200000ac 	.word	0x200000ac
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	20000210 	.word	0x20000210

080008c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	@ 0x38
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a4e      	ldr	r2, [pc, #312]	@ (8000a18 <HAL_ETH_MspInit+0x158>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	f040 8096 	bne.w	8000a10 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008e4:	4b4d      	ldr	r3, [pc, #308]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e8:	4a4c      	ldr	r2, [pc, #304]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 80008ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f0:	4b4a      	ldr	r3, [pc, #296]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	4a46      	ldr	r2, [pc, #280]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000906:	6313      	str	r3, [r2, #48]	@ 0x30
 8000908:	4b44      	ldr	r3, [pc, #272]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000918:	4a40      	ldr	r2, [pc, #256]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800091a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800091e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000920:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000930:	4a3a      	ldr	r2, [pc, #232]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6313      	str	r3, [r2, #48]	@ 0x30
 8000938:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b35      	ldr	r3, [pc, #212]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000948:	4a34      	ldr	r2, [pc, #208]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000950:	4b32      	ldr	r3, [pc, #200]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	4a2e      	ldr	r2, [pc, #184]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6313      	str	r3, [r2, #48]	@ 0x30
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 800097a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <HAL_ETH_MspInit+0x15c>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800098c:	2332      	movs	r3, #50	@ 0x32
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099c:	230b      	movs	r3, #11
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	481e      	ldr	r0, [pc, #120]	@ (8000a20 <HAL_ETH_MspInit+0x160>)
 80009a8:	f002 f852 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009ac:	2386      	movs	r3, #134	@ 0x86
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4817      	ldr	r0, [pc, #92]	@ (8000a24 <HAL_ETH_MspInit+0x164>)
 80009c8:	f002 f842 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009de:	230b      	movs	r3, #11
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	480f      	ldr	r0, [pc, #60]	@ (8000a28 <HAL_ETH_MspInit+0x168>)
 80009ea:	f002 f831 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009ee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a00:	230b      	movs	r3, #11
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <HAL_ETH_MspInit+0x16c>)
 8000a0c:	f002 f820 	bl	8002a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3738      	adds	r7, #56	@ 0x38
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40028000 	.word	0x40028000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40021800 	.word	0x40021800

08000a30 <MX_GPIO_Init>:
     PD15   ------> S_TIM4_CH4
     PC7   ------> S_TIM3_CH2
     PC8   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	@ 0x38
 8000a34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	4bb5      	ldr	r3, [pc, #724]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4ab4      	ldr	r2, [pc, #720]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4bb2      	ldr	r3, [pc, #712]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	623b      	str	r3, [r7, #32]
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4baf      	ldr	r3, [pc, #700]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4aae      	ldr	r2, [pc, #696]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4bac      	ldr	r3, [pc, #688]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4ba9      	ldr	r3, [pc, #676]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4aa8      	ldr	r2, [pc, #672]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4ba6      	ldr	r3, [pc, #664]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4ba3      	ldr	r3, [pc, #652]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4aa2      	ldr	r2, [pc, #648]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4ba0      	ldr	r3, [pc, #640]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b9d      	ldr	r3, [pc, #628]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b9a      	ldr	r3, [pc, #616]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b97      	ldr	r3, [pc, #604]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a96      	ldr	r2, [pc, #600]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b94      	ldr	r3, [pc, #592]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b91      	ldr	r3, [pc, #580]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a90      	ldr	r2, [pc, #576]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b8e      	ldr	r3, [pc, #568]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b8b      	ldr	r3, [pc, #556]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a8a      	ldr	r2, [pc, #552]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b88      	ldr	r3, [pc, #544]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_Touch_CS_Pin|LED_7_Pin|LED_6_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f642 2110 	movw	r1, #10768	@ 0x2a10
 8000b0c:	4884      	ldr	r0, [pc, #528]	@ (8000d20 <MX_GPIO_Init+0x2f0>)
 8000b0e:	f002 f94b 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b18:	4882      	ldr	r0, [pc, #520]	@ (8000d24 <MX_GPIO_Init+0x2f4>)
 8000b1a:	f002 f945 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_8_Pin|LED_5_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000b24:	4880      	ldr	r0, [pc, #512]	@ (8000d28 <MX_GPIO_Init+0x2f8>)
 8000b26:	f002 f93f 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|USB_PowerSwitchOn_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f244 2142 	movw	r1, #16962	@ 0x4242
 8000b30:	487e      	ldr	r0, [pc, #504]	@ (8000d2c <MX_GPIO_Init+0x2fc>)
 8000b32:	f002 f939 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2118      	movs	r1, #24
 8000b3a:	487d      	ldr	r0, [pc, #500]	@ (8000d30 <MX_GPIO_Init+0x300>)
 8000b3c:	f002 f934 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_Touch_CLK_Pin LCD_Touch_DO_Pin LCD_Touch_DIN_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_CLK_Pin|LCD_Touch_DO_Pin|LCD_Touch_DIN_Pin;
 8000b40:	2364      	movs	r3, #100	@ 0x64
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b50:	2305      	movs	r3, #5
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4871      	ldr	r0, [pc, #452]	@ (8000d20 <MX_GPIO_Init+0x2f0>)
 8000b5c:	f001 ff78 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Touch_IRQ_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_IRQ_Pin;
 8000b60:	2308      	movs	r3, #8
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LCD_Touch_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	486b      	ldr	r0, [pc, #428]	@ (8000d20 <MX_GPIO_Init+0x2f0>)
 8000b74:	f001 ff6c 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Touch_CS_Pin LED_7_Pin LED_6_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_CS_Pin|LED_7_Pin|LED_6_Pin|LED_4_Pin;
 8000b78:	f642 2310 	movw	r3, #10768	@ 0x2a10
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4863      	ldr	r0, [pc, #396]	@ (8000d20 <MX_GPIO_Init+0x2f0>)
 8000b92:	f001 ff5d 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : User_B1_Button_Pin EXTI09__Pin EXTI10__Pin EXTI11__Pin
                           EXTI12__Pin */
  GPIO_InitStruct.Pin = User_B1_Button_Pin|EXTI09__Pin|EXTI10__Pin|EXTI11__Pin
 8000b96:	f44f 5378 	mov.w	r3, #15872	@ 0x3e00
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |EXTI12__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4861      	ldr	r0, [pc, #388]	@ (8000d34 <MX_GPIO_Init+0x304>)
 8000bae:	f001 ff4f 	bl	8002a50 <HAL_GPIO_Init>


  /* NVIC for EXTI lines */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn,   1, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	2017      	movs	r0, #23
 8000bb8:	f001 f8db 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bbc:	2017      	movs	r0, #23
 8000bbe:	f001 f8f4 	bl	8001daa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	2028      	movs	r0, #40	@ 0x28
 8000bc8:	f001 f8d3 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bcc:	2028      	movs	r0, #40	@ 0x28
 8000bce:	f001 f8ec 	bl	8001daa <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LCD_SCK_Pin LCD_MISO_Pin LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000bd2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000be4:	2305      	movs	r3, #5
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	484e      	ldr	r0, [pc, #312]	@ (8000d28 <MX_GPIO_Init+0x2f8>)
 8000bf0:	f001 ff2e 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM3_CH1__Pin */
  GPIO_InitStruct.Pin = TIM3_CH1__Pin;
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c04:	2302      	movs	r3, #2
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TIM3_CH1__GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	484a      	ldr	r0, [pc, #296]	@ (8000d38 <MX_GPIO_Init+0x308>)
 8000c10:	f001 ff1e 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c14:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	483d      	ldr	r0, [pc, #244]	@ (8000d24 <MX_GPIO_Init+0x2f4>)
 8000c2e:	f001 ff0f 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c32:	2302      	movs	r3, #2
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c42:	2302      	movs	r3, #2
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4835      	ldr	r0, [pc, #212]	@ (8000d24 <MX_GPIO_Init+0x2f4>)
 8000c4e:	f001 feff 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_8_Pin LED_5_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_8_Pin|LED_5_Pin|LED_3_Pin;
 8000c52:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	482f      	ldr	r0, [pc, #188]	@ (8000d28 <MX_GPIO_Init+0x2f8>)
 8000c6c:	f001 fef0 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin USB_PowerSwitchOn_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|USB_PowerSwitchOn_Pin|LED_1_Pin|LED_2_Pin;
 8000c70:	f244 2342 	movw	r3, #16962	@ 0x4242
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4828      	ldr	r0, [pc, #160]	@ (8000d2c <MX_GPIO_Init+0x2fc>)
 8000c8a:	f001 fee1 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c8e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4821      	ldr	r0, [pc, #132]	@ (8000d30 <MX_GPIO_Init+0x300>)
 8000cac:	f001 fed0 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4819      	ldr	r0, [pc, #100]	@ (8000d2c <MX_GPIO_Init+0x2fc>)
 8000cc6:	f001 fec3 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cca:	2380      	movs	r3, #128	@ 0x80
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <MX_GPIO_Init+0x2fc>)
 8000cde:	f001 feb7 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM3_CH2__Pin TIM3_CH3__Pin */
  GPIO_InitStruct.Pin = TIM3_CH2__Pin|TIM3_CH3__Pin;
 8000ce2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <MX_GPIO_Init+0x304>)
 8000d00:	f001 fea6 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d04:	2304      	movs	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	e010      	b.n	8000d3c <MX_GPIO_Init+0x30c>
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40021400 	.word	0x40021400
 8000d2c:	40021800 	.word	0x40021800
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <MX_GPIO_Init+0x348>)
 8000d3e:	f001 fe87 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8000d42:	2318      	movs	r3, #24
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_GPIO_Init+0x348>)
 8000d5a:	f001 fe79 	bl	8002a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2101      	movs	r1, #1
 8000d62:	2028      	movs	r0, #40	@ 0x28
 8000d64:	f001 f805 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d68:	2028      	movs	r0, #40	@ 0x28
 8000d6a:	f001 f81e 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	@ 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40020c00 	.word	0x40020c00

08000d7c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <MX_I2C2_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000d88:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <MX_I2C2_Init+0x7c>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000db6:	480e      	ldr	r0, [pc, #56]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000db8:	f002 f828 	bl	8002e0c <HAL_I2C_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dc2:	f000 f9a7 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000dca:	f002 f8bb 	bl	8002f44 <HAL_I2CEx_ConfigAnalogFilter>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dd4:	f000 f99e 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_I2C2_Init+0x74>)
 8000ddc:	f002 f8fd 	bl	8002fda <HAL_I2CEx_ConfigDigitalFilter>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f995 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000300 	.word	0x20000300
 8000df4:	40005800 	.word	0x40005800
 8000df8:	20404768 	.word	0x20404768

08000dfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ae      	sub	sp, #184	@ 0xb8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2290      	movs	r2, #144	@ 0x90
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fb9d 	bl	800555c <memset>
  if(i2cHandle->Instance==I2C2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <HAL_I2C_MspInit+0xb0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d13b      	bne.n	8000ea4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 ff78 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e46:	f000 f965 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a18      	ldr	r2, [pc, #96]	@ (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e50:	f043 0320 	orr.w	r3, r3, #32
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <HAL_I2C_MspInit+0xb8>)
 8000e88:	f001 fde2 	bl	8002a50 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	37b8      	adds	r7, #184	@ 0xb8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40005800 	.word	0x40005800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40021400 	.word	0x40021400

08000eb8 <set_array>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Write same state to an array of GPIOs */
static void set_array(const GpioDef *arr, size_t count, GPIO_PinState s)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	71fb      	strb	r3, [r7, #7]
  for (size_t i = 0; i < count; ++i) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e010      	b.n	8000eee <set_array+0x36>
    HAL_GPIO_WritePin(arr[i].port, arr[i].pin, s);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	889b      	ldrh	r3, [r3, #4]
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f001 ff60 	bl	8002da8 <HAL_GPIO_WritePin>
  for (size_t i = 0; i < count; ++i) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3ea      	bcc.n	8000ecc <set_array+0x14>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <set_led>:


/* Write same state to an array of GPIOs */
static void set_led(const GpioDef led, GPIO_PinState s)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f0e:	4613      	mov	r3, r2
 8000f10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led.port, led.pin, s);
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	89b9      	ldrh	r1, [r7, #12]
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 ff45 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 fb2c 	bl	800158a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f84d 	bl	8000fd0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f7ff fd7b 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3a:	f7ff fc55 	bl	80007e8 <MX_DMA_Init>
  MX_ETH_Init();
 8000f3e:	f7ff fc71 	bl	8000824 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f42:	f000 f9c1 	bl	80012c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f46:	f000 fa4f 	bl	80013e8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 8000f4a:	f7ff fb0b 	bl	8000564 <MX_ADC3_Init>
  MX_RNG_Init();
 8000f4e:	f000 f8e7 	bl	8001120 <MX_RNG_Init>
  MX_I2C2_Init();
 8000f52:	f7ff ff13 	bl	8000d7c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /* Optional: ensure all LEDs start OFF */
  set_array(all_leds, sizeof(all_leds)/sizeof(all_leds[0]), GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210b      	movs	r1, #11
 8000f5a:	481a      	ldr	r0, [pc, #104]	@ (8000fc4 <main+0x9c>)
 8000f5c:	f7ff ffac 	bl	8000eb8 <set_array>
//			  );
//	  size_t len = (n < 0) ? 0 : (n >= (int)sizeof(msg) ? sizeof(msg) - 1 : (size_t)n);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, (uint16_t)len, 1000);
//
//
  for(int i = 0 ; i < 16; i ++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e029      	b.n	8000fba <main+0x92>
	  idx = i;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <main+0xa0>)
 8000f6a:	6013      	str	r3, [r2, #0]
	for (size_t j = 0; j < 8; ++j) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	e019      	b.n	8000fa6 <main+0x7e>
	GPIO_PinState state = SEQ[idx][j] ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <main+0xa0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a15      	ldr	r2, [pc, #84]	@ (8000fcc <main+0xa4>)
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	441a      	add	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	71fb      	strb	r3, [r7, #7]
	  set_led(all_leds[j] ,state);
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <main+0x9c>)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f9c:	f7ff ffb0 	bl	8000f00 <set_led>
	for (size_t j = 0; j < 8; ++j) {
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d9e2      	bls.n	8000f72 <main+0x4a>
	}
	HAL_Delay(400);
 8000fac:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000fb0:	f000 fb48 	bl	8001644 <HAL_Delay>
  for(int i = 0 ; i < 16; i ++){
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	ddd2      	ble.n	8000f66 <main+0x3e>
  }
  while(1){}
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <main+0x98>
 8000fc4:	0800564c 	.word	0x0800564c
 8000fc8:	200003dc 	.word	0x200003dc
 8000fcc:	080055cc 	.word	0x080055cc

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	@ 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2234      	movs	r2, #52	@ 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 fabc 	bl	800555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80010a4 <SystemClock_Config+0xd4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80010a4 <SystemClock_Config+0xd4>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001000:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <SystemClock_Config+0xd4>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <SystemClock_Config+0xd8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <SystemClock_Config+0xd8>)
 8001012:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <SystemClock_Config+0xd8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001028:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800102c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001036:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800103c:	23d8      	movs	r3, #216	@ 0xd8
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001040:	2302      	movs	r3, #2
 8001042:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001044:	2309      	movs	r3, #9
 8001046:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4618      	mov	r0, r3
 8001052:	f002 f999 	bl	8003388 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800105c:	f000 f85a 	bl	8001114 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001060:	f002 f942 	bl	80032e8 <HAL_PWREx_EnableOverDrive>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800106a:	f000 f853 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2302      	movs	r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2107      	movs	r1, #7
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fc29 	bl	80038e4 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001098:	f000 f83c 	bl	8001114 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3750      	adds	r7, #80	@ 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
  // simple debounce shared by all buttons
  static uint32_t last_tick = 0;
  uint32_t now = HAL_GetTick();
 80010b6:	f000 fab9 	bl	800162c <HAL_GetTick>
 80010ba:	60b8      	str	r0, [r7, #8]
  if (now - last_tick < 200) return;   // ~200 ms
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_GPIO_EXTI_Callback+0x60>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80010c6:	d91d      	bls.n	8001104 <HAL_GPIO_EXTI_Callback+0x58>
  last_tick = now;
 80010c8:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_GPIO_EXTI_Callback+0x60>)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	6013      	str	r3, [r2, #0]


  // persist current frame index across button presses
  // how many LEDs we actually have in all_leds (cap at 8)
  if (GPIO_Pin == BTN2_PIN) {
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d4:	d117      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x5a>
    // clear all & reset sequence to the stadrt
    for (size_t j = 0; j < 8; ++j) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e00f      	b.n	80010fc <HAL_GPIO_EXTI_Callback+0x50>
      HAL_GPIO_WritePin(all_leds[j].port, all_leds[j].pin, GPIO_PIN_RESET);
 80010dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <HAL_GPIO_EXTI_Callback+0x64>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_GPIO_EXTI_Callback+0x64>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	f001 fe59 	bl	8002da8 <HAL_GPIO_WritePin>
    for (size_t j = 0; j < 8; ++j) {
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b07      	cmp	r3, #7
 8001100:	d9ec      	bls.n	80010dc <HAL_GPIO_EXTI_Callback+0x30>
 8001102:	e000      	b.n	8001106 <HAL_GPIO_EXTI_Callback+0x5a>
  if (now - last_tick < 200) return;   // ~200 ms
 8001104:	bf00      	nop
    }
  }

  // BTN3/BTN4 free for other actions if you want later
}
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200003e0 	.word	0x200003e0
 8001110:	0800564c 	.word	0x0800564c

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <Error_Handler+0x8>

08001120 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_RNG_Init+0x20>)
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <MX_RNG_Init+0x24>)
 8001128:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_RNG_Init+0x20>)
 800112c:	f003 fa28 	bl	8004580 <HAL_RNG_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001136:	f7ff ffed 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003e4 	.word	0x200003e4
 8001144:	50060800 	.word	0x50060800

08001148 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0a8      	sub	sp, #160	@ 0xa0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2290      	movs	r2, #144	@ 0x90
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f004 f9ff 	bl	800555c <memset>
  if(rngHandle->Instance==RNG)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <HAL_RNG_MspInit+0x60>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d11b      	bne.n	80011a0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001168:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800116c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fdd9 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001184:	f7ff ffc6 	bl	8001114 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_RNG_MspInit+0x64>)
 800118a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_RNG_MspInit+0x64>)
 800118e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001192:	6353      	str	r3, [r2, #52]	@ 0x34
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_RNG_MspInit+0x64>)
 8001196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	37a0      	adds	r7, #160	@ 0xa0
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	50060800 	.word	0x50060800
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_MspInit+0x44>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <HAL_MspInit+0x44>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_MspInit+0x44>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_MspInit+0x44>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <HAL_MspInit+0x44>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_MspInit+0x44>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80011e6:	2006      	movs	r0, #6
 80011e8:	f000 fdb8 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <MemManage_Handler+0x4>

08001210 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <UsageFault_Handler+0x4>

08001220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f9d9 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQH 0 */

  /* USER CODE END EXTI9_5_IRQH 0 */
	HAL_GPIO_EXTI_IRQHandler(EXTI09__Pin);
 800125a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800125e:	f001 fdbd 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQH 1 */

  /* USER CODE END EXTI9_5_IRQH 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}

08001266 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10__Pin);
 800126a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800126e:	f001 fdb5 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11__Pin);
 8001272:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001276:	f001 fdb1 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI12__Pin);
 800127a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800127e:	f001 fdad 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(User_B1_Button_Pin);
 8001282:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001286:	f001 fda9 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001296:	f000 fe51 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001b0 	.word	0x200001b0

080012a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <MX_USART3_UART_Init>:
extern UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012ce:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <MX_USART3_UART_Init+0x5c>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART3_UART_Init+0x58>)
 800130c:	f003 f962 	bl	80045d4 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001316:	f7ff fefd 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000354 	.word	0x20000354
 8001324:	40004800 	.word	0x40004800

08001328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0ae      	sub	sp, #184	@ 0xb8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2290      	movs	r2, #144	@ 0x90
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f004 f907 	bl	800555c <memset>
  if(uartHandle->Instance==USART3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a22      	ldr	r2, [pc, #136]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d13c      	bne.n	80013d2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800135e:	2300      	movs	r3, #0
 8001360:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fce2 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001372:	f7ff fecf 	bl	8001114 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_UART_MspInit+0xb8>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_UART_MspInit+0xb8>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_UART_MspInit+0xb8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_UART_MspInit+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a13      	ldr	r2, [pc, #76]	@ (80013e0 <HAL_UART_MspInit+0xb8>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_UART_MspInit+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c0:	2307      	movs	r3, #7
 80013c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <HAL_UART_MspInit+0xbc>)
 80013ce:	f001 fb3f 	bl	8002a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	37b8      	adds	r7, #184	@ 0xb8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004800 	.word	0x40004800
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f6:	2206      	movs	r2, #6
 80013f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001408:	2202      	movs	r2, #2
 800140a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140e:	2201      	movs	r2, #1
 8001410:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	2201      	movs	r2, #1
 8001422:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	f001 fe21 	bl	8003072 <HAL_PCD_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001436:	f7ff fe6d 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200003f4 	.word	0x200003f4

08001444 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0ae      	sub	sp, #184	@ 0xb8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2290      	movs	r2, #144	@ 0x90
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f879 	bl	800555c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001472:	d159      	bne.n	8001528 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001474:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001478:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fc53 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001490:	f7ff fe40 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014ac:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80014b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014c6:	230a      	movs	r3, #10
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4818      	ldr	r0, [pc, #96]	@ (8001534 <HAL_PCD_MspInit+0xf0>)
 80014d4:	f001 fabc 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4810      	ldr	r0, [pc, #64]	@ (8001534 <HAL_PCD_MspInit+0xf0>)
 80014f4:	f001 faac 	bl	8002a50 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 80014fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 80014fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001502:	6353      	str	r3, [r2, #52]	@ 0x34
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001514:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151a:	6453      	str	r3, [r2, #68]	@ 0x44
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <HAL_PCD_MspInit+0xec>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	37b8      	adds	r7, #184	@ 0xb8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800153c:	f7ff feb2 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001566:	f004 f801 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff fcdd 	bl	8000f28 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800157c:	080056d4 	.word	0x080056d4
  ldr r2, =_sbss
 8001580:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001584:	200008d8 	.word	0x200008d8

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>

0800158a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158e:	2003      	movs	r0, #3
 8001590:	f000 fbe4 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001594:	2000      	movs	r0, #0
 8001596:	f000 f805 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff fe09 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fbff 	bl	8001dc6 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 fbc7 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	200008d4 	.word	0x200008d4

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200008d4 	.word	0x200008d4

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e031      	b.n	8001706 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7fe fff2 	bl	8000694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_ADC_Init+0x84>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f974 	bl	80019c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016f6:	e001      	b.n	80016fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	ffffeefd 	.word	0xffffeefd

08001714 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1c>
 800172c:	2302      	movs	r3, #2
 800172e:	e13a      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x292>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b09      	cmp	r3, #9
 800173e:	d93a      	bls.n	80017b6 <HAL_ADC_ConfigChannel+0xa2>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001748:	d035      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68d9      	ldr	r1, [r3, #12]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	3b1e      	subs	r3, #30
 8001760:	2207      	movs	r2, #7
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a8f      	ldr	r2, [pc, #572]	@ (80019b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10a      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68d9      	ldr	r1, [r3, #12]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	061a      	lsls	r2, r3, #24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800178e:	e039      	b.n	8001804 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4403      	add	r3, r0
 80017a8:	3b1e      	subs	r3, #30
 80017aa:	409a      	lsls	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b4:	e026      	b.n	8001804 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6919      	ldr	r1, [r3, #16]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2207      	movs	r2, #7
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43da      	mvns	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	400a      	ands	r2, r1
 80017dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6919      	ldr	r1, [r3, #16]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4403      	add	r3, r0
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	409a      	lsls	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d824      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b05      	subs	r3, #5
 800181e:	221f      	movs	r2, #31
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43da      	mvns	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	400a      	ands	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b05      	subs	r3, #5
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	@ 0x34
 8001854:	e04c      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d824      	bhi.n	80018a8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b23      	subs	r3, #35	@ 0x23
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b23      	subs	r3, #35	@ 0x23
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80018a6:	e023      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	3b41      	subs	r3, #65	@ 0x41
 80018ba:	221f      	movs	r2, #31
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b41      	subs	r3, #65	@ 0x41
 80018e4:	fa00 f203 	lsl.w	r2, r0, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <HAL_ADC_ConfigChannel+0x2a4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10a      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1fc>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001902:	d105      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a2c      	ldr	r2, [pc, #176]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 800190a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800190e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_ADC_ConfigChannel+0x226>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b12      	cmp	r3, #18
 8001920:	d10b      	bne.n	800193a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a25      	ldr	r2, [pc, #148]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001928:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800192c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001934:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001938:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1e      	ldr	r2, [pc, #120]	@ (80019b8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d12b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x288>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1a      	ldr	r2, [pc, #104]	@ (80019b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x242>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b11      	cmp	r3, #17
 8001954:	d122      	bne.n	800199c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 800195c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001960:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001968:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800196c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a10      	ldr	r2, [pc, #64]	@ (80019b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d111      	bne.n	800199c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <HAL_ADC_ConfigChannel+0x2ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	@ (80019c4 <HAL_ADC_ConfigChannel+0x2b0>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9a      	lsrs	r2, r3, #18
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800198e:	e002      	b.n	8001996 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3b01      	subs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f9      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	10000012 	.word	0x10000012
 80019b8:	40012000 	.word	0x40012000
 80019bc:	40012300 	.word	0x40012300
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019d0:	4b78      	ldr	r3, [pc, #480]	@ (8001bb4 <ADC_Init+0x1ec>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a77      	ldr	r2, [pc, #476]	@ (8001bb4 <ADC_Init+0x1ec>)
 80019d6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80019da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019dc:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <ADC_Init+0x1ec>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4973      	ldr	r1, [pc, #460]	@ (8001bb4 <ADC_Init+0x1ec>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	021a      	lsls	r2, r3, #8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	4a58      	ldr	r2, [pc, #352]	@ (8001bb8 <ADC_Init+0x1f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e00f      	b.n	8001ac2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0202 	bic.w	r2, r2, #2
 8001ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6899      	ldr	r1, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	005a      	lsls	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	035a      	lsls	r2, r3, #13
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	e007      	b.n	8001b38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	051a      	lsls	r2, r3, #20
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b7a:	025a      	lsls	r2, r3, #9
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	029a      	lsls	r2, r3, #10
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40012300 	.word	0x40012300
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	05fa0000 	.word	0x05fa0000

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	@ (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	@ (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fc1e 	bl	800162c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff fc05 	bl	800162c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f9e9 	bl	80022bc <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	@ 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f9a0 	bl	8002250 <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f18:	223f      	movs	r2, #63	@ 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	e010803f 	.word	0xe010803f

08001f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f48:	4b8e      	ldr	r3, [pc, #568]	@ (8002184 <HAL_DMA_IRQHandler+0x248>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002188 <HAL_DMA_IRQHandler+0x24c>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0a9b      	lsrs	r3, r3, #10
 8001f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	2208      	movs	r2, #8
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01a      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	2208      	movs	r2, #8
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	2204      	movs	r2, #4
 8002002:	409a      	lsls	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	2210      	movs	r2, #16
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d043      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03c      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002036:	2210      	movs	r2, #16
 8002038:	409a      	lsls	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d018      	beq.n	800207e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d108      	bne.n	800206c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d024      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
 800206a:	e01f      	b.n	80020ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
 800207c:	e016      	b.n	80020ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0208 	bic.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	2220      	movs	r2, #32
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 808f 	beq.w	80021dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8087 	beq.w	80021dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	2220      	movs	r2, #32
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d136      	bne.n	8002154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0216 	bic.w	r2, r2, #22
 80020f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <HAL_DMA_IRQHandler+0x1da>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0208 	bic.w	r2, r2, #8
 8002124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212a:	223f      	movs	r2, #63	@ 0x3f
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07e      	beq.n	8002248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
        }
        return;
 8002152:	e079      	b.n	8002248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01d      	beq.n	800219e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002174:	2b00      	cmp	r3, #0
 8002176:	d031      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
 8002180:	e02c      	b.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
 8002182:	bf00      	nop
 8002184:	20000000 	.word	0x20000000
 8002188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e01e      	b.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10f      	bne.n	80021cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0210 	bic.w	r2, r2, #16
 80021ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d032      	beq.n	800224a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2205      	movs	r2, #5
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3301      	adds	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	d307      	bcc.n	8002224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f2      	bne.n	8002208 <HAL_DMA_IRQHandler+0x2cc>
 8002222:	e000      	b.n	8002226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
 8002246:	e000      	b.n	800224a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002248:	bf00      	nop
    }
  }
}
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	3b10      	subs	r3, #16
 8002260:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <DMA_CalcBaseAndBitshift+0x60>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <DMA_CalcBaseAndBitshift+0x64>)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d908      	bls.n	8002290 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002286:	4013      	ands	r3, r2
 8002288:	1d1a      	adds	r2, r3, #4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	659a      	str	r2, [r3, #88]	@ 0x58
 800228e:	e006      	b.n	800229e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	aaaaaaab 	.word	0xaaaaaaab
 80022b4:	080056bc 	.word	0x080056bc
 80022b8:	fffffc00 	.word	0xfffffc00

080022bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11f      	bne.n	8002316 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d856      	bhi.n	800238a <DMA_CheckFifoParam+0xce>
 80022dc:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <DMA_CheckFifoParam+0x28>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	08002307 	.word	0x08002307
 80022ec:	080022f5 	.word	0x080022f5
 80022f0:	0800238b 	.word	0x0800238b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d046      	beq.n	800238e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002304:	e043      	b.n	800238e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800230e:	d140      	bne.n	8002392 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002314:	e03d      	b.n	8002392 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800231e:	d121      	bne.n	8002364 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d837      	bhi.n	8002396 <DMA_CheckFifoParam+0xda>
 8002326:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <DMA_CheckFifoParam+0x70>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800233d 	.word	0x0800233d
 8002330:	08002343 	.word	0x08002343
 8002334:	0800233d 	.word	0x0800233d
 8002338:	08002355 	.word	0x08002355
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      break;
 8002340:	e030      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d025      	beq.n	800239a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002352:	e022      	b.n	800239a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800235c:	d11f      	bne.n	800239e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002362:	e01c      	b.n	800239e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d903      	bls.n	8002372 <DMA_CheckFifoParam+0xb6>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d003      	beq.n	8002378 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002370:	e018      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      break;
 8002376:	e015      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00e      	beq.n	80023a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e00b      	b.n	80023a2 <DMA_CheckFifoParam+0xe6>
      break;
 800238a:	bf00      	nop
 800238c:	e00a      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e008      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e006      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e004      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e002      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800239e:	bf00      	nop
 80023a0:	e000      	b.n	80023a4 <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
    }
  } 
  
  return status; 
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e086      	b.n	80024d4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fa71 	bl	80008c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	4b3f      	ldr	r3, [pc, #252]	@ (80024dc <HAL_ETH_Init+0x128>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	4a3e      	ldr	r2, [pc, #248]	@ (80024dc <HAL_ETH_Init+0x128>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ea:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <HAL_ETH_Init+0x128>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023f6:	4b3a      	ldr	r3, [pc, #232]	@ (80024e0 <HAL_ETH_Init+0x12c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a39      	ldr	r2, [pc, #228]	@ (80024e0 <HAL_ETH_Init+0x12c>)
 80023fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002400:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002402:	4b37      	ldr	r3, [pc, #220]	@ (80024e0 <HAL_ETH_Init+0x12c>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4935      	ldr	r1, [pc, #212]	@ (80024e0 <HAL_ETH_Init+0x12c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002410:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <HAL_ETH_Init+0x12c>)
 8002412:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800242a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800242c:	f7ff f8fe 	bl	800162c <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002432:	e011      	b.n	8002458 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002434:	f7ff f8fa 	bl	800162c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002442:	d909      	bls.n	8002458 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	22e0      	movs	r2, #224	@ 0xe0
 8002450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e03d      	b.n	80024d4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e4      	bne.n	8002434 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f97a 	bl	8002764 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fa25 	bl	80028c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa7b 	bl	8002972 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	461a      	mov	r2, r3
 8002482:	2100      	movs	r1, #0
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9e3 	bl	8002850 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002498:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <HAL_ETH_Init+0x130>)
 80024a8:	430b      	orrs	r3, r1
 80024aa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80024be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2210      	movs	r2, #16
 80024ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	00020060 	.word	0x00020060

080024e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <ETH_SetMACConfig+0x164>)
 80024fe:	4013      	ands	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	7b9b      	ldrb	r3, [r3, #14]
 8002506:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	7c12      	ldrb	r2, [r2, #16]
 800250c:	2a00      	cmp	r2, #0
 800250e:	d102      	bne.n	8002516 <ETH_SetMACConfig+0x2e>
 8002510:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002514:	e000      	b.n	8002518 <ETH_SetMACConfig+0x30>
 8002516:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002518:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	7c52      	ldrb	r2, [r2, #17]
 800251e:	2a00      	cmp	r2, #0
 8002520:	d102      	bne.n	8002528 <ETH_SetMACConfig+0x40>
 8002522:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002526:	e000      	b.n	800252a <ETH_SetMACConfig+0x42>
 8002528:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800252a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002530:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7fdb      	ldrb	r3, [r3, #31]
 8002536:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002538:	431a      	orrs	r2, r3
                        macconf->Speed |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800253e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	7f92      	ldrb	r2, [r2, #30]
 8002544:	2a00      	cmp	r2, #0
 8002546:	d102      	bne.n	800254e <ETH_SetMACConfig+0x66>
 8002548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800254c:	e000      	b.n	8002550 <ETH_SetMACConfig+0x68>
 800254e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002550:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7f1b      	ldrb	r3, [r3, #28]
 8002556:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002558:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800255e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	791b      	ldrb	r3, [r3, #4]
 8002564:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002566:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800256e:	2a00      	cmp	r2, #0
 8002570:	d102      	bne.n	8002578 <ETH_SetMACConfig+0x90>
 8002572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002576:	e000      	b.n	800257a <ETH_SetMACConfig+0x92>
 8002578:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800257a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	7bdb      	ldrb	r3, [r3, #15]
 8002580:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002582:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002588:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002590:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002592:	4313      	orrs	r3, r2
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff f84a 	bl	8001644 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80025d6:	2a00      	cmp	r2, #0
 80025d8:	d101      	bne.n	80025de <ETH_SetMACConfig+0xf6>
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	e000      	b.n	80025e0 <ETH_SetMACConfig+0xf8>
 80025de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80025ee:	2a01      	cmp	r2, #1
 80025f0:	d101      	bne.n	80025f6 <ETH_SetMACConfig+0x10e>
 80025f2:	2208      	movs	r2, #8
 80025f4:	e000      	b.n	80025f8 <ETH_SetMACConfig+0x110>
 80025f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80025f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002600:	2a01      	cmp	r2, #1
 8002602:	d101      	bne.n	8002608 <ETH_SetMACConfig+0x120>
 8002604:	2204      	movs	r2, #4
 8002606:	e000      	b.n	800260a <ETH_SetMACConfig+0x122>
 8002608:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800260a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002612:	2a01      	cmp	r2, #1
 8002614:	d101      	bne.n	800261a <ETH_SetMACConfig+0x132>
 8002616:	2202      	movs	r2, #2
 8002618:	e000      	b.n	800261c <ETH_SetMACConfig+0x134>
 800261a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800261c:	4313      	orrs	r3, r2
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002634:	2001      	movs	r0, #1
 8002636:	f7ff f805 	bl	8001644 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	fd20810f 	.word	0xfd20810f

08002650 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4b3d      	ldr	r3, [pc, #244]	@ (8002760 <ETH_SetDMAConfig+0x110>)
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	7b1b      	ldrb	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <ETH_SetDMAConfig+0x2c>
 8002676:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800267a:	e000      	b.n	800267e <ETH_SetDMAConfig+0x2e>
 800267c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7b5b      	ldrb	r3, [r3, #13]
 8002682:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002684:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	7f52      	ldrb	r2, [r2, #29]
 800268a:	2a00      	cmp	r2, #0
 800268c:	d102      	bne.n	8002694 <ETH_SetDMAConfig+0x44>
 800268e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002692:	e000      	b.n	8002696 <ETH_SetDMAConfig+0x46>
 8002694:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002696:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	7b9b      	ldrb	r3, [r3, #14]
 800269c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800269e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7f1b      	ldrb	r3, [r3, #28]
 80026aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7f9b      	ldrb	r3, [r3, #30]
 80026b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026c4:	4313      	orrs	r3, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7fe ffac 	bl	8001644 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026f4:	461a      	mov	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	791b      	ldrb	r3, [r3, #4]
 80026fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002704:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800270a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002710:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002718:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800271a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002722:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002728:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002736:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002744:	2001      	movs	r0, #1
 8002746:	f7fe ff7d 	bl	8001644 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	f8de3f23 	.word	0xf8de3f23

08002764 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b0a6      	sub	sp, #152	@ 0x98
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002778:	2300      	movs	r3, #0
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027a6:	2300      	movs	r3, #0
 80027a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fe7f 	bl	80024e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80027ee:	2301      	movs	r3, #1
 80027f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800280c:	2300      	movs	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002810:	2301      	movs	r3, #1
 8002812:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002816:	2301      	movs	r3, #1
 8002818:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800281a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800281e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002820:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002824:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002832:	2300      	movs	r3, #0
 8002834:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff05 	bl	8002650 <ETH_SetDMAConfig>
}
 8002846:	bf00      	nop
 8002848:	3798      	adds	r7, #152	@ 0x98
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3305      	adds	r3, #5
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	3204      	adds	r2, #4
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <ETH_MACAddressConfig+0x68>)
 8002872:	4413      	add	r3, r2
 8002874:	461a      	mov	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3303      	adds	r3, #3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	061a      	lsls	r2, r3, #24
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3302      	adds	r3, #2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3301      	adds	r3, #1
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	4313      	orrs	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <ETH_MACAddressConfig+0x6c>)
 80028a2:	4413      	add	r3, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6013      	str	r3, [r2, #0]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40028040 	.word	0x40028040
 80028bc:	40028044 	.word	0x40028044

080028c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e03e      	b.n	800294c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68d9      	ldr	r1, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	3206      	adds	r2, #6
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d80c      	bhi.n	8002930 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68d9      	ldr	r1, [r3, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	e004      	b.n	800293a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d9bd      	bls.n	80028ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002964:	611a      	str	r2, [r3, #16]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e048      	b.n	8002a12 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6919      	ldr	r1, [r3, #16]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	3212      	adds	r2, #18
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d80c      	bhi.n	8002a02 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	e004      	b.n	8002a0c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d9b3      	bls.n	8002980 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e175      	b.n	8002d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f040 8164 	bne.w	8002d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d005      	beq.n	8002aa6 <HAL_GPIO_Init+0x56>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d130      	bne.n	8002b08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0201 	and.w	r2, r3, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d017      	beq.n	8002b44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d123      	bne.n	8002b98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	08da      	lsrs	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3208      	adds	r2, #8
 8002b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	220f      	movs	r2, #15
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80be 	beq.w	8002d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b66      	ldr	r3, [pc, #408]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	4a65      	ldr	r2, [pc, #404]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be6:	4b63      	ldr	r3, [pc, #396]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bf2:	4a61      	ldr	r2, [pc, #388]	@ (8002d78 <HAL_GPIO_Init+0x328>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a58      	ldr	r2, [pc, #352]	@ (8002d7c <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d037      	beq.n	8002c8e <HAL_GPIO_Init+0x23e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a57      	ldr	r2, [pc, #348]	@ (8002d80 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_GPIO_Init+0x23a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02b      	beq.n	8002c86 <HAL_GPIO_Init+0x236>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a55      	ldr	r2, [pc, #340]	@ (8002d88 <HAL_GPIO_Init+0x338>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d025      	beq.n	8002c82 <HAL_GPIO_Init+0x232>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a54      	ldr	r2, [pc, #336]	@ (8002d8c <HAL_GPIO_Init+0x33c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <HAL_GPIO_Init+0x22e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a53      	ldr	r2, [pc, #332]	@ (8002d90 <HAL_GPIO_Init+0x340>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x22a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a52      	ldr	r2, [pc, #328]	@ (8002d94 <HAL_GPIO_Init+0x344>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x226>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a51      	ldr	r2, [pc, #324]	@ (8002d98 <HAL_GPIO_Init+0x348>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x222>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a50      	ldr	r2, [pc, #320]	@ (8002d9c <HAL_GPIO_Init+0x34c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x21e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	@ (8002da0 <HAL_GPIO_Init+0x350>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x21a>
 8002c66:	2309      	movs	r3, #9
 8002c68:	e012      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c6a:	230a      	movs	r3, #10
 8002c6c:	e010      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	e00e      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00c      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c76:	2306      	movs	r3, #6
 8002c78:	e00a      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e008      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ca0:	4935      	ldr	r1, [pc, #212]	@ (8002d78 <HAL_GPIO_Init+0x328>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd2:	4a34      	ldr	r2, [pc, #208]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cfc:	4a29      	ldr	r2, [pc, #164]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d02:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d26:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d50:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	f67f ae86 	bls.w	8002a70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800
 8002d98:	40021c00 	.word	0x40021c00
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40022400 	.word	0x40022400
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002de6:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df2:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f956 	bl	80010ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08b      	b.n	8002f36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd ffe2 	bl	8000dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	@ 0x24
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e006      	b.n	8002e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d108      	bne.n	8002eae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e007      	b.n	8002ebe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_I2C_Init+0x134>)
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	02008000 	.word	0x02008000

08002f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d138      	bne.n	8002fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e032      	b.n	8002fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	@ 0x24
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d139      	bne.n	8003064 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e033      	b.n	8003066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2224      	movs	r2, #36	@ 0x24
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800302c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af02      	add	r7, sp, #8
 8003078:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e108      	b.n	8003296 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f9d0 	bl	8001444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 ffb0 	bl	8005024 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7c1a      	ldrb	r2, [r3, #16]
 80030cc:	f88d 2000 	strb.w	r2, [sp]
 80030d0:	3304      	adds	r3, #4
 80030d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d4:	f001 ff4c 	bl	8004f70 <USB_CoreInit>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0d5      	b.n	8003296 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 ffa8 	bl	8005046 <USB_SetCurrentMode>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0c6      	b.n	8003296 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e04a      	b.n	80031a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3315      	adds	r3, #21
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3314      	adds	r3, #20
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	b298      	uxth	r0, r3
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	332e      	adds	r3, #46	@ 0x2e
 800314a:	4602      	mov	r2, r0
 800314c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3318      	adds	r3, #24
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	331c      	adds	r3, #28
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3320      	adds	r3, #32
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3324      	adds	r3, #36	@ 0x24
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	3301      	adds	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	791b      	ldrb	r3, [r3, #4]
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3af      	bcc.n	800310e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e044      	b.n	800323e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	3301      	adds	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	791b      	ldrb	r3, [r3, #4]
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	429a      	cmp	r2, r3
 8003246:	d3b5      	bcc.n	80031b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7c1a      	ldrb	r2, [r3, #16]
 8003250:	f88d 2000 	strb.w	r2, [sp]
 8003254:	3304      	adds	r3, #4
 8003256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003258:	f001 ff42 	bl	80050e0 <USB_DevInit>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e013      	b.n	8003296 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b1b      	ldrb	r3, [r3, #12]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f80b 	bl	80032a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f002 f8fd 	bl	800548e <USB_DevDisconnect>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	10000003 	.word	0x10000003

080032e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	4b23      	ldr	r3, [pc, #140]	@ (8003380 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_PWREx_EnableOverDrive+0x98>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800330a:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x9c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1d      	ldr	r2, [pc, #116]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003314:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003316:	f7fe f989 	bl	800162c <HAL_GetTick>
 800331a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800331c:	e009      	b.n	8003332 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800331e:	f7fe f985 	bl	800162c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800332c:	d901      	bls.n	8003332 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e022      	b.n	8003378 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003332:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333e:	d1ee      	bne.n	800331e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0f      	ldr	r2, [pc, #60]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800334c:	f7fe f96e 	bl	800162c <HAL_GetTick>
 8003350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003352:	e009      	b.n	8003368 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003354:	f7fe f96a 	bl	800162c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003362:	d901      	bls.n	8003368 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e007      	b.n	8003378 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003374:	d1ee      	bne.n	8003354 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e29b      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ac:	4b96      	ldr	r3, [pc, #600]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d00c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b8:	4b93      	ldr	r3, [pc, #588]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d112      	bne.n	80033ea <HAL_RCC_OscConfig+0x62>
 80033c4:	4b90      	ldr	r3, [pc, #576]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d0:	d10b      	bne.n	80033ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d06c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x130>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d168      	bne.n	80034b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e275      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x7a>
 80033f4:	4b84      	ldr	r3, [pc, #528]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a83      	ldr	r2, [pc, #524]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e02e      	b.n	8003460 <HAL_RCC_OscConfig+0xd8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x9c>
 800340a:	4b7f      	ldr	r3, [pc, #508]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7e      	ldr	r2, [pc, #504]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b7c      	ldr	r3, [pc, #496]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7b      	ldr	r2, [pc, #492]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800341c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e01d      	b.n	8003460 <HAL_RCC_OscConfig+0xd8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0xc0>
 800342e:	4b76      	ldr	r3, [pc, #472]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a75      	ldr	r2, [pc, #468]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b73      	ldr	r3, [pc, #460]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a72      	ldr	r2, [pc, #456]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0xd8>
 8003448:	4b6f      	ldr	r3, [pc, #444]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6e      	ldr	r2, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b6c      	ldr	r3, [pc, #432]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6b      	ldr	r2, [pc, #428]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800345a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800345e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f8e0 	bl	800162c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe f8dc 	bl	800162c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	@ 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e229      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b61      	ldr	r3, [pc, #388]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0xe8>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f8cc 	bl	800162c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe f8c8 	bl	800162c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	@ 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e215      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	4b57      	ldr	r3, [pc, #348]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x110>
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d069      	beq.n	800359a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c6:	4b50      	ldr	r3, [pc, #320]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11c      	bne.n	8003518 <HAL_RCC_OscConfig+0x190>
 80034de:	4b4a      	ldr	r3, [pc, #296]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x17a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1e9      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b41      	ldr	r3, [pc, #260]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	493d      	ldr	r1, [pc, #244]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e040      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d023      	beq.n	8003568 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b39      	ldr	r3, [pc, #228]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a38      	ldr	r2, [pc, #224]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe f87e 	bl	800162c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe f87a 	bl	800162c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1c7      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	4b30      	ldr	r3, [pc, #192]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b2d      	ldr	r3, [pc, #180]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4929      	ldr	r1, [pc, #164]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
 8003566:	e018      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe f85a 	bl	800162c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357c:	f7fe f856 	bl	800162c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1a3      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d038      	beq.n	8003618 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d019      	beq.n	80035e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b2:	4a15      	ldr	r2, [pc, #84]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe f837 	bl	800162c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe f833 	bl	800162c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e180      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x23a>
 80035e0:	e01a      	b.n	8003618 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fe f81d 	bl	800162c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f6:	f7fe f819 	bl	800162c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d903      	bls.n	800360c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e166      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
 8003608:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	4b92      	ldr	r3, [pc, #584]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ee      	bne.n	80035f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a4 	beq.w	800376e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b8c      	ldr	r3, [pc, #560]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	4b89      	ldr	r3, [pc, #548]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	4a88      	ldr	r2, [pc, #544]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	@ 0x40
 800363e:	4b86      	ldr	r3, [pc, #536]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364e:	4b83      	ldr	r3, [pc, #524]	@ (800385c <HAL_RCC_OscConfig+0x4d4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800365a:	4b80      	ldr	r3, [pc, #512]	@ (800385c <HAL_RCC_OscConfig+0x4d4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7f      	ldr	r2, [pc, #508]	@ (800385c <HAL_RCC_OscConfig+0x4d4>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003666:	f7fd ffe1 	bl	800162c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fd ffdd 	bl	800162c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	@ 0x64
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e12a      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003680:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x4d4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x31a>
 8003694:	4b70      	ldr	r3, [pc, #448]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003698:	4a6f      	ldr	r2, [pc, #444]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a0:	e02d      	b.n	80036fe <HAL_RCC_OscConfig+0x376>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x33c>
 80036aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b6:	4b68      	ldr	r3, [pc, #416]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	4a67      	ldr	r2, [pc, #412]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c2:	e01c      	b.n	80036fe <HAL_RCC_OscConfig+0x376>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d10c      	bne.n	80036e6 <HAL_RCC_OscConfig+0x35e>
 80036cc:	4b62      	ldr	r3, [pc, #392]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d0:	4a61      	ldr	r2, [pc, #388]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	f043 0304 	orr.w	r3, r3, #4
 80036d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d8:	4b5f      	ldr	r3, [pc, #380]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e4:	e00b      	b.n	80036fe <HAL_RCC_OscConfig+0x376>
 80036e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a58      	ldr	r2, [pc, #352]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d015      	beq.n	8003732 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd ff91 	bl	800162c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fd ff8d 	bl	800162c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0d8      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003724:	4b4c      	ldr	r3, [pc, #304]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ee      	beq.n	800370e <HAL_RCC_OscConfig+0x386>
 8003730:	e014      	b.n	800375c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd ff7b 	bl	800162c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd ff77 	bl	800162c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0c2      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003750:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ee      	bne.n	800373a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d105      	bne.n	800376e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003762:	4b3d      	ldr	r3, [pc, #244]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	4a3c      	ldr	r2, [pc, #240]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800376c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80ae 	beq.w	80038d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003778:	4b37      	ldr	r3, [pc, #220]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d06d      	beq.n	8003860 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d14b      	bne.n	8003824 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378c:	4b32      	ldr	r3, [pc, #200]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd ff48 	bl	800162c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fd ff44 	bl	800162c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e091      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	4b29      	ldr	r3, [pc, #164]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	071b      	lsls	r3, r3, #28
 80037ea:	491b      	ldr	r1, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd ff16 	bl	800162c <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd ff12 	bl	800162c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e05f      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x47c>
 8003822:	e057      	b.n	80038d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0b      	ldr	r2, [pc, #44]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd fefc 	bl	800162c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd fef8 	bl	800162c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e045      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_RCC_OscConfig+0x4d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x4b0>
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x54c>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003860:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_RCC_OscConfig+0x558>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d030      	beq.n	80038d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d129      	bne.n	80038d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d122      	bne.n	80038d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003896:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003898:	4293      	cmp	r3, r2
 800389a:	d119      	bne.n	80038d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d10f      	bne.n	80038d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0d0      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d910      	bls.n	800392c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b67      	ldr	r3, [pc, #412]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 020f 	bic.w	r2, r3, #15
 8003912:	4965      	ldr	r1, [pc, #404]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b63      	ldr	r3, [pc, #396]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b59      	ldr	r3, [pc, #356]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a58      	ldr	r2, [pc, #352]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b53      	ldr	r3, [pc, #332]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a52      	ldr	r2, [pc, #328]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b50      	ldr	r3, [pc, #320]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	494d      	ldr	r1, [pc, #308]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d040      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b47      	ldr	r3, [pc, #284]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d115      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b41      	ldr	r3, [pc, #260]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e073      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06b      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c6:	4b39      	ldr	r3, [pc, #228]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4936      	ldr	r1, [pc, #216]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d8:	f7fd fe28 	bl	800162c <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fd fe24 	bl	800162c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e053      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b2d      	ldr	r3, [pc, #180]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 020c 	and.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1eb      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d210      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 020f 	bic.w	r2, r3, #15
 8003a1e:	4922      	ldr	r1, [pc, #136]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4916      	ldr	r1, [pc, #88]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490e      	ldr	r1, [pc, #56]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f821 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490a      	ldr	r1, [pc, #40]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a92:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1d4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fd84 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023c00 	.word	0x40023c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	080056a4 	.word	0x080056a4
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b094      	sub	sp, #80	@ 0x50
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003acc:	2300      	movs	r3, #0
 8003ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad4:	4b79      	ldr	r3, [pc, #484]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d00d      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x40>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f200 80e1 	bhi.w	8003ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aee:	e0db      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b73      	ldr	r3, [pc, #460]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003af4:	e0db      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af6:	4b73      	ldr	r3, [pc, #460]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003afa:	e0d8      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b06:	4b6d      	ldr	r3, [pc, #436]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d063      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b6a      	ldr	r3, [pc, #424]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	0159      	lsls	r1, r3, #5
 8003b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b40:	0150      	lsls	r0, r2, #5
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4621      	mov	r1, r4
 8003b48:	1a51      	subs	r1, r2, r1
 8003b4a:	6139      	str	r1, [r7, #16]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b60:	4659      	mov	r1, fp
 8003b62:	018b      	lsls	r3, r1, #6
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	018a      	lsls	r2, r1, #6
 8003b6e:	4651      	mov	r1, sl
 8003b70:	ebb2 0801 	subs.w	r8, r2, r1
 8003b74:	4659      	mov	r1, fp
 8003b76:	eb63 0901 	sbc.w	r9, r3, r1
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8e:	4690      	mov	r8, r2
 8003b90:	4699      	mov	r9, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	eb18 0303 	adds.w	r3, r8, r3
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	eb49 0303 	adc.w	r3, r9, r3
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	024b      	lsls	r3, r1, #9
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bb8:	4621      	mov	r1, r4
 8003bba:	024a      	lsls	r2, r1, #9
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bcc:	f7fc fb34 	bl	8000238 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	e058      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	2200      	movs	r2, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	4611      	mov	r1, r2
 8003be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bea:	623b      	str	r3, [r7, #32]
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	0159      	lsls	r1, r3, #5
 8003c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c06:	0150      	lsls	r0, r2, #5
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c12:	4649      	mov	r1, r9
 8003c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c30:	eb63 050b 	sbc.w	r5, r3, fp
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	00eb      	lsls	r3, r5, #3
 8003c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c42:	00e2      	lsls	r2, r4, #3
 8003c44:	4614      	mov	r4, r2
 8003c46:	461d      	mov	r5, r3
 8003c48:	4643      	mov	r3, r8
 8003c4a:	18e3      	adds	r3, r4, r3
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	464b      	mov	r3, r9
 8003c50:	eb45 0303 	adc.w	r3, r5, r3
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c62:	4629      	mov	r1, r5
 8003c64:	028b      	lsls	r3, r1, #10
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	028a      	lsls	r2, r1, #10
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c76:	2200      	movs	r2, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	61fa      	str	r2, [r7, #28]
 8003c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c80:	f7fc fada 	bl	8000238 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	3301      	adds	r3, #1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ca6:	e002      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3750      	adds	r7, #80	@ 0x50
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000000 	.word	0x20000000

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ce4:	f7ff fff0 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0a9b      	lsrs	r3, r3, #10
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	@ (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	080056b4 	.word	0x080056b4

08003d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d0c:	f7ff ffdc 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	0b5b      	lsrs	r3, r3, #13
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	@ (8003d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	080056b4 	.word	0x080056b4

08003d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d58:	4b69      	ldr	r3, [pc, #420]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a68      	ldr	r2, [pc, #416]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d62:	6093      	str	r3, [r2, #8]
 8003d64:	4b66      	ldr	r3, [pc, #408]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6c:	4964      	ldr	r1, [pc, #400]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	4959      	ldr	r1, [pc, #356]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d017      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	494a      	ldr	r1, [pc, #296]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 808b 	beq.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b3a      	ldr	r3, [pc, #232]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	4a39      	ldr	r2, [pc, #228]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e20:	4b37      	ldr	r3, [pc, #220]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e2c:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a34      	ldr	r2, [pc, #208]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fd fbf8 	bl	800162c <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd fbf4 	bl	800162c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e38f      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e52:	4b2c      	ldr	r3, [pc, #176]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e5e:	4b28      	ldr	r3, [pc, #160]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d035      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d02e      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e7c:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e86:	4b1e      	ldr	r3, [pc, #120]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e90:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e92:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e9e:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ea4:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d114      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fbbc 	bl	800162c <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	e00a      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fbb8 	bl	800162c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e351      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0ee      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ee6:	d111      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ef6:	400b      	ands	r3, r1
 8003ef8:	4901      	ldr	r1, [pc, #4]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40007000 	.word	0x40007000
 8003f08:	0ffffcff 	.word	0x0ffffcff
 8003f0c:	4bac      	ldr	r3, [pc, #688]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4aab      	ldr	r2, [pc, #684]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f16:	6093      	str	r3, [r2, #8]
 8003f18:	4ba9      	ldr	r3, [pc, #676]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	49a6      	ldr	r1, [pc, #664]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f36:	4ba2      	ldr	r3, [pc, #648]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f3c:	4aa0      	ldr	r2, [pc, #640]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f46:	4b9e      	ldr	r3, [pc, #632]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	499b      	ldr	r1, [pc, #620]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f64:	4b96      	ldr	r3, [pc, #600]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f72:	4993      	ldr	r1, [pc, #588]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f86:	4b8e      	ldr	r3, [pc, #568]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f94:	498a      	ldr	r1, [pc, #552]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa8:	4b85      	ldr	r3, [pc, #532]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb6:	4982      	ldr	r1, [pc, #520]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fca:	4b7d      	ldr	r3, [pc, #500]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd8:	4979      	ldr	r1, [pc, #484]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fec:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	4971      	ldr	r1, [pc, #452]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800400e:	4b6c      	ldr	r3, [pc, #432]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004014:	f023 020c 	bic.w	r2, r3, #12
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401c:	4968      	ldr	r1, [pc, #416]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004030:	4b63      	ldr	r3, [pc, #396]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	4960      	ldr	r1, [pc, #384]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004052:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004060:	4957      	ldr	r1, [pc, #348]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004074:	4b52      	ldr	r3, [pc, #328]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	494f      	ldr	r1, [pc, #316]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004096:	4b4a      	ldr	r3, [pc, #296]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a4:	4946      	ldr	r1, [pc, #280]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040b8:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	493e      	ldr	r1, [pc, #248]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040da:	4b39      	ldr	r3, [pc, #228]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e8:	4935      	ldr	r1, [pc, #212]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040fc:	4b30      	ldr	r3, [pc, #192]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800410a:	492d      	ldr	r1, [pc, #180]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d011      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800411e:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004124:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800412c:	4924      	ldr	r1, [pc, #144]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415e:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416c:	4914      	ldr	r1, [pc, #80]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004180:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004190:	490b      	ldr	r1, [pc, #44]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b4:	4902      	ldr	r1, [pc, #8]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d0:	4b8a      	ldr	r3, [pc, #552]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	4986      	ldr	r1, [pc, #536]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041f4:	4b81      	ldr	r3, [pc, #516]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004204:	497d      	ldr	r1, [pc, #500]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d006      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80d6 	beq.w	80043cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004220:	4b76      	ldr	r3, [pc, #472]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a75      	ldr	r2, [pc, #468]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800422a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422c:	f7fd f9fe 	bl	800162c <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004234:	f7fd f9fa 	bl	800162c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e195      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004246:	4b6d      	ldr	r3, [pc, #436]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d021      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11d      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004266:	4b65      	ldr	r3, [pc, #404]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004274:	4b61      	ldr	r3, [pc, #388]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427a:	0e1b      	lsrs	r3, r3, #24
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	4958      	ldr	r1, [pc, #352]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02e      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042cc:	d129      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042dc:	4b47      	ldr	r3, [pc, #284]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e2:	0f1b      	lsrs	r3, r3, #28
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	019a      	lsls	r2, r3, #6
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	493e      	ldr	r1, [pc, #248]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800430a:	4b3c      	ldr	r3, [pc, #240]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004310:	f023 021f 	bic.w	r2, r3, #31
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	3b01      	subs	r3, #1
 800431a:	4938      	ldr	r1, [pc, #224]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01d      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800432e:	4b33      	ldr	r3, [pc, #204]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800433c:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004342:	0f1b      	lsrs	r3, r3, #28
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	019a      	lsls	r2, r3, #6
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	431a      	orrs	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	061b      	lsls	r3, r3, #24
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	071b      	lsls	r3, r3, #28
 8004362:	4926      	ldr	r1, [pc, #152]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d011      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	019a      	lsls	r2, r3, #6
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	491a      	ldr	r1, [pc, #104]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800439a:	4b18      	ldr	r3, [pc, #96]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a6:	f7fd f941 	bl	800162c <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ae:	f7fd f93d 	bl	800162c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	@ 0x64
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0d8      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c0:	4b0e      	ldr	r3, [pc, #56]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	f040 80ce 	bne.w	8004570 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e0:	f7fd f924 	bl	800162c <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e6:	e00b      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043e8:	f7fd f920 	bl	800162c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	@ 0x64
 80043f4:	d904      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0bb      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004400:	4b5e      	ldr	r3, [pc, #376]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800440c:	d0ec      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d12a      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004436:	4b51      	ldr	r3, [pc, #324]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004444:	4b4d      	ldr	r3, [pc, #308]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444a:	0f1b      	lsrs	r3, r3, #28
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	019a      	lsls	r2, r3, #6
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	061b      	lsls	r3, r3, #24
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	071b      	lsls	r3, r3, #28
 800446a:	4944      	ldr	r1, [pc, #272]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004472:	4b42      	ldr	r3, [pc, #264]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004478:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	493d      	ldr	r1, [pc, #244]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d022      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800449c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a0:	d11d      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044a2:	4b36      	ldr	r3, [pc, #216]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	0e1b      	lsrs	r3, r3, #24
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b0:	4b32      	ldr	r3, [pc, #200]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	0f1b      	lsrs	r3, r3, #28
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	019a      	lsls	r2, r3, #6
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	071b      	lsls	r3, r3, #28
 80044d6:	4929      	ldr	r1, [pc, #164]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d028      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ea:	4b24      	ldr	r3, [pc, #144]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	0e1b      	lsrs	r3, r3, #24
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044f8:	4b20      	ldr	r3, [pc, #128]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	019a      	lsls	r2, r3, #6
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	431a      	orrs	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	071b      	lsls	r3, r3, #28
 800451e:	4917      	ldr	r1, [pc, #92]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800452c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	4911      	ldr	r1, [pc, #68]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800453c:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0e      	ldr	r2, [pc, #56]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fd f870 	bl	800162c <HAL_GetTick>
 800454c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004550:	f7fd f86c 	bl	800162c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e007      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800456a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800456e:	d1ef      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800

08004580 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e01c      	b.n	80045cc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	795b      	ldrb	r3, [r3, #5]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc fdd0 	bl	8001148 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0204 	orr.w	r2, r2, #4
 80045bc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e040      	b.n	8004668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fe96 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	@ 0x24
 8004600:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa8c 	bl	8004b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f825 	bl	8004670 <UART_SetConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01b      	b.n	8004668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fb0b 	bl	8004c7c <UART_CheckIdleState>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4ba6      	ldr	r3, [pc, #664]	@ (8004934 <UART_SetConfig+0x2c4>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a94      	ldr	r2, [pc, #592]	@ (8004938 <UART_SetConfig+0x2c8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d120      	bne.n	800472e <UART_SetConfig+0xbe>
 80046ec:	4b93      	ldr	r3, [pc, #588]	@ (800493c <UART_SetConfig+0x2cc>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d816      	bhi.n	8004728 <UART_SetConfig+0xb8>
 80046fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <UART_SetConfig+0x90>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004711 	.word	0x08004711
 8004704:	0800471d 	.word	0x0800471d
 8004708:	08004717 	.word	0x08004717
 800470c:	08004723 	.word	0x08004723
 8004710:	2301      	movs	r3, #1
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e150      	b.n	80049b8 <UART_SetConfig+0x348>
 8004716:	2302      	movs	r3, #2
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e14d      	b.n	80049b8 <UART_SetConfig+0x348>
 800471c:	2304      	movs	r3, #4
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e14a      	b.n	80049b8 <UART_SetConfig+0x348>
 8004722:	2308      	movs	r3, #8
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e147      	b.n	80049b8 <UART_SetConfig+0x348>
 8004728:	2310      	movs	r3, #16
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e144      	b.n	80049b8 <UART_SetConfig+0x348>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a83      	ldr	r2, [pc, #524]	@ (8004940 <UART_SetConfig+0x2d0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d132      	bne.n	800479e <UART_SetConfig+0x12e>
 8004738:	4b80      	ldr	r3, [pc, #512]	@ (800493c <UART_SetConfig+0x2cc>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d828      	bhi.n	8004798 <UART_SetConfig+0x128>
 8004746:	a201      	add	r2, pc, #4	@ (adr r2, 800474c <UART_SetConfig+0xdc>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004781 	.word	0x08004781
 8004750:	08004799 	.word	0x08004799
 8004754:	08004799 	.word	0x08004799
 8004758:	08004799 	.word	0x08004799
 800475c:	0800478d 	.word	0x0800478d
 8004760:	08004799 	.word	0x08004799
 8004764:	08004799 	.word	0x08004799
 8004768:	08004799 	.word	0x08004799
 800476c:	08004787 	.word	0x08004787
 8004770:	08004799 	.word	0x08004799
 8004774:	08004799 	.word	0x08004799
 8004778:	08004799 	.word	0x08004799
 800477c:	08004793 	.word	0x08004793
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e118      	b.n	80049b8 <UART_SetConfig+0x348>
 8004786:	2302      	movs	r3, #2
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e115      	b.n	80049b8 <UART_SetConfig+0x348>
 800478c:	2304      	movs	r3, #4
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e112      	b.n	80049b8 <UART_SetConfig+0x348>
 8004792:	2308      	movs	r3, #8
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e10f      	b.n	80049b8 <UART_SetConfig+0x348>
 8004798:	2310      	movs	r3, #16
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e10c      	b.n	80049b8 <UART_SetConfig+0x348>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a68      	ldr	r2, [pc, #416]	@ (8004944 <UART_SetConfig+0x2d4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d120      	bne.n	80047ea <UART_SetConfig+0x17a>
 80047a8:	4b64      	ldr	r3, [pc, #400]	@ (800493c <UART_SetConfig+0x2cc>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047b2:	2b30      	cmp	r3, #48	@ 0x30
 80047b4:	d013      	beq.n	80047de <UART_SetConfig+0x16e>
 80047b6:	2b30      	cmp	r3, #48	@ 0x30
 80047b8:	d814      	bhi.n	80047e4 <UART_SetConfig+0x174>
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d009      	beq.n	80047d2 <UART_SetConfig+0x162>
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d810      	bhi.n	80047e4 <UART_SetConfig+0x174>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <UART_SetConfig+0x15c>
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d006      	beq.n	80047d8 <UART_SetConfig+0x168>
 80047ca:	e00b      	b.n	80047e4 <UART_SetConfig+0x174>
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e0f2      	b.n	80049b8 <UART_SetConfig+0x348>
 80047d2:	2302      	movs	r3, #2
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e0ef      	b.n	80049b8 <UART_SetConfig+0x348>
 80047d8:	2304      	movs	r3, #4
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e0ec      	b.n	80049b8 <UART_SetConfig+0x348>
 80047de:	2308      	movs	r3, #8
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e0e9      	b.n	80049b8 <UART_SetConfig+0x348>
 80047e4:	2310      	movs	r3, #16
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e0e6      	b.n	80049b8 <UART_SetConfig+0x348>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a56      	ldr	r2, [pc, #344]	@ (8004948 <UART_SetConfig+0x2d8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <UART_SetConfig+0x1c6>
 80047f4:	4b51      	ldr	r3, [pc, #324]	@ (800493c <UART_SetConfig+0x2cc>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004800:	d013      	beq.n	800482a <UART_SetConfig+0x1ba>
 8004802:	2bc0      	cmp	r3, #192	@ 0xc0
 8004804:	d814      	bhi.n	8004830 <UART_SetConfig+0x1c0>
 8004806:	2b80      	cmp	r3, #128	@ 0x80
 8004808:	d009      	beq.n	800481e <UART_SetConfig+0x1ae>
 800480a:	2b80      	cmp	r3, #128	@ 0x80
 800480c:	d810      	bhi.n	8004830 <UART_SetConfig+0x1c0>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <UART_SetConfig+0x1a8>
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d006      	beq.n	8004824 <UART_SetConfig+0x1b4>
 8004816:	e00b      	b.n	8004830 <UART_SetConfig+0x1c0>
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e0cc      	b.n	80049b8 <UART_SetConfig+0x348>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e0c9      	b.n	80049b8 <UART_SetConfig+0x348>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e0c6      	b.n	80049b8 <UART_SetConfig+0x348>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e0c3      	b.n	80049b8 <UART_SetConfig+0x348>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e0c0      	b.n	80049b8 <UART_SetConfig+0x348>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a44      	ldr	r2, [pc, #272]	@ (800494c <UART_SetConfig+0x2dc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d125      	bne.n	800488c <UART_SetConfig+0x21c>
 8004840:	4b3e      	ldr	r3, [pc, #248]	@ (800493c <UART_SetConfig+0x2cc>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800484e:	d017      	beq.n	8004880 <UART_SetConfig+0x210>
 8004850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004854:	d817      	bhi.n	8004886 <UART_SetConfig+0x216>
 8004856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485a:	d00b      	beq.n	8004874 <UART_SetConfig+0x204>
 800485c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004860:	d811      	bhi.n	8004886 <UART_SetConfig+0x216>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <UART_SetConfig+0x1fe>
 8004866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800486a:	d006      	beq.n	800487a <UART_SetConfig+0x20a>
 800486c:	e00b      	b.n	8004886 <UART_SetConfig+0x216>
 800486e:	2300      	movs	r3, #0
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e0a1      	b.n	80049b8 <UART_SetConfig+0x348>
 8004874:	2302      	movs	r3, #2
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e09e      	b.n	80049b8 <UART_SetConfig+0x348>
 800487a:	2304      	movs	r3, #4
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e09b      	b.n	80049b8 <UART_SetConfig+0x348>
 8004880:	2308      	movs	r3, #8
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e098      	b.n	80049b8 <UART_SetConfig+0x348>
 8004886:	2310      	movs	r3, #16
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e095      	b.n	80049b8 <UART_SetConfig+0x348>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2f      	ldr	r2, [pc, #188]	@ (8004950 <UART_SetConfig+0x2e0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d125      	bne.n	80048e2 <UART_SetConfig+0x272>
 8004896:	4b29      	ldr	r3, [pc, #164]	@ (800493c <UART_SetConfig+0x2cc>)
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048a4:	d017      	beq.n	80048d6 <UART_SetConfig+0x266>
 80048a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048aa:	d817      	bhi.n	80048dc <UART_SetConfig+0x26c>
 80048ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b0:	d00b      	beq.n	80048ca <UART_SetConfig+0x25a>
 80048b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b6:	d811      	bhi.n	80048dc <UART_SetConfig+0x26c>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <UART_SetConfig+0x254>
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c0:	d006      	beq.n	80048d0 <UART_SetConfig+0x260>
 80048c2:	e00b      	b.n	80048dc <UART_SetConfig+0x26c>
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e076      	b.n	80049b8 <UART_SetConfig+0x348>
 80048ca:	2302      	movs	r3, #2
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e073      	b.n	80049b8 <UART_SetConfig+0x348>
 80048d0:	2304      	movs	r3, #4
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e070      	b.n	80049b8 <UART_SetConfig+0x348>
 80048d6:	2308      	movs	r3, #8
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e06d      	b.n	80049b8 <UART_SetConfig+0x348>
 80048dc:	2310      	movs	r3, #16
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e06a      	b.n	80049b8 <UART_SetConfig+0x348>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <UART_SetConfig+0x2e4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d138      	bne.n	800495e <UART_SetConfig+0x2ee>
 80048ec:	4b13      	ldr	r3, [pc, #76]	@ (800493c <UART_SetConfig+0x2cc>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048fa:	d017      	beq.n	800492c <UART_SetConfig+0x2bc>
 80048fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004900:	d82a      	bhi.n	8004958 <UART_SetConfig+0x2e8>
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	d00b      	beq.n	8004920 <UART_SetConfig+0x2b0>
 8004908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490c:	d824      	bhi.n	8004958 <UART_SetConfig+0x2e8>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <UART_SetConfig+0x2aa>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d006      	beq.n	8004926 <UART_SetConfig+0x2b6>
 8004918:	e01e      	b.n	8004958 <UART_SetConfig+0x2e8>
 800491a:	2300      	movs	r3, #0
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e04b      	b.n	80049b8 <UART_SetConfig+0x348>
 8004920:	2302      	movs	r3, #2
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e048      	b.n	80049b8 <UART_SetConfig+0x348>
 8004926:	2304      	movs	r3, #4
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e045      	b.n	80049b8 <UART_SetConfig+0x348>
 800492c:	2308      	movs	r3, #8
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e042      	b.n	80049b8 <UART_SetConfig+0x348>
 8004932:	bf00      	nop
 8004934:	efff69f3 	.word	0xefff69f3
 8004938:	40011000 	.word	0x40011000
 800493c:	40023800 	.word	0x40023800
 8004940:	40004400 	.word	0x40004400
 8004944:	40004800 	.word	0x40004800
 8004948:	40004c00 	.word	0x40004c00
 800494c:	40005000 	.word	0x40005000
 8004950:	40011400 	.word	0x40011400
 8004954:	40007800 	.word	0x40007800
 8004958:	2310      	movs	r3, #16
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e02c      	b.n	80049b8 <UART_SetConfig+0x348>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a72      	ldr	r2, [pc, #456]	@ (8004b2c <UART_SetConfig+0x4bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d125      	bne.n	80049b4 <UART_SetConfig+0x344>
 8004968:	4b71      	ldr	r3, [pc, #452]	@ (8004b30 <UART_SetConfig+0x4c0>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004972:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004976:	d017      	beq.n	80049a8 <UART_SetConfig+0x338>
 8004978:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800497c:	d817      	bhi.n	80049ae <UART_SetConfig+0x33e>
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004982:	d00b      	beq.n	800499c <UART_SetConfig+0x32c>
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004988:	d811      	bhi.n	80049ae <UART_SetConfig+0x33e>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <UART_SetConfig+0x326>
 800498e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004992:	d006      	beq.n	80049a2 <UART_SetConfig+0x332>
 8004994:	e00b      	b.n	80049ae <UART_SetConfig+0x33e>
 8004996:	2300      	movs	r3, #0
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e00d      	b.n	80049b8 <UART_SetConfig+0x348>
 800499c:	2302      	movs	r3, #2
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e00a      	b.n	80049b8 <UART_SetConfig+0x348>
 80049a2:	2304      	movs	r3, #4
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e007      	b.n	80049b8 <UART_SetConfig+0x348>
 80049a8:	2308      	movs	r3, #8
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e004      	b.n	80049b8 <UART_SetConfig+0x348>
 80049ae:	2310      	movs	r3, #16
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e001      	b.n	80049b8 <UART_SetConfig+0x348>
 80049b4:	2310      	movs	r3, #16
 80049b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c0:	d15b      	bne.n	8004a7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049c2:	7ffb      	ldrb	r3, [r7, #31]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d828      	bhi.n	8004a1a <UART_SetConfig+0x3aa>
 80049c8:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <UART_SetConfig+0x360>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a0b 	.word	0x08004a0b
 80049e4:	08004a1b 	.word	0x08004a1b
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a13 	.word	0x08004a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7ff f974 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80049f8:	61b8      	str	r0, [r7, #24]
        break;
 80049fa:	e013      	b.n	8004a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7ff f984 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8004a00:	61b8      	str	r0, [r7, #24]
        break;
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a04:	4b4b      	ldr	r3, [pc, #300]	@ (8004b34 <UART_SetConfig+0x4c4>)
 8004a06:	61bb      	str	r3, [r7, #24]
        break;
 8004a08:	e00c      	b.n	8004a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7ff f857 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004a0e:	61b8      	str	r0, [r7, #24]
        break;
 8004a10:	e008      	b.n	8004a24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a16:	61bb      	str	r3, [r7, #24]
        break;
 8004a18:	e004      	b.n	8004a24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	77bb      	strb	r3, [r7, #30]
        break;
 8004a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d074      	beq.n	8004b14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	005a      	lsls	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	441a      	add	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d916      	bls.n	8004a74 <UART_SetConfig+0x404>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4c:	d212      	bcs.n	8004a74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f023 030f 	bic.w	r3, r3, #15
 8004a56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	89fb      	ldrh	r3, [r7, #14]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	89fa      	ldrh	r2, [r7, #14]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	e04f      	b.n	8004b14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77bb      	strb	r3, [r7, #30]
 8004a78:	e04c      	b.n	8004b14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a7a:	7ffb      	ldrb	r3, [r7, #31]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d828      	bhi.n	8004ad2 <UART_SetConfig+0x462>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <UART_SetConfig+0x418>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	08004abd 	.word	0x08004abd
 8004a94:	08004ad3 	.word	0x08004ad3
 8004a98:	08004ac3 	.word	0x08004ac3
 8004a9c:	08004ad3 	.word	0x08004ad3
 8004aa0:	08004ad3 	.word	0x08004ad3
 8004aa4:	08004ad3 	.word	0x08004ad3
 8004aa8:	08004acb 	.word	0x08004acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aac:	f7ff f918 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	61b8      	str	r0, [r7, #24]
        break;
 8004ab2:	e013      	b.n	8004adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7ff f928 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	61b8      	str	r0, [r7, #24]
        break;
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004abc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <UART_SetConfig+0x4c4>)
 8004abe:	61bb      	str	r3, [r7, #24]
        break;
 8004ac0:	e00c      	b.n	8004adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac2:	f7fe fffb 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004ac6:	61b8      	str	r0, [r7, #24]
        break;
 8004ac8:	e008      	b.n	8004adc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ace:	61bb      	str	r3, [r7, #24]
        break;
 8004ad0:	e004      	b.n	8004adc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8004ada:	bf00      	nop
    }

    if (pclk != 0U)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	085a      	lsrs	r2, r3, #1
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	441a      	add	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b0f      	cmp	r3, #15
 8004afa:	d909      	bls.n	8004b10 <UART_SetConfig+0x4a0>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b02:	d205      	bcs.n	8004b10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	e001      	b.n	8004b14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b20:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40007c00 	.word	0x40007c00
 8004b30:	40023800 	.word	0x40023800
 8004b34:	00f42400 	.word	0x00f42400

08004b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01a      	beq.n	8004c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c36:	d10a      	bne.n	8004c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
  }
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b098      	sub	sp, #96	@ 0x60
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c8c:	f7fc fcce 	bl	800162c <HAL_GetTick>
 8004c90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d12e      	bne.n	8004cfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f88c 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d021      	beq.n	8004cfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e062      	b.n	8004dc4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d149      	bne.n	8004da0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d14:	2200      	movs	r2, #0
 8004d16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f856 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d03c      	beq.n	8004da0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	623b      	str	r3, [r7, #32]
   return(result);
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d78:	61fa      	str	r2, [r7, #28]
 8004d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	69b9      	ldr	r1, [r7, #24]
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	617b      	str	r3, [r7, #20]
   return(result);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e011      	b.n	8004dc4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3758      	adds	r7, #88	@ 0x58
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	e04f      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d04b      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fc fc21 	bl	800162c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e04e      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d037      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d034      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d031      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d110      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f838 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e029      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e58:	d111      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f81e 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e00f      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d0a0      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b095      	sub	sp, #84	@ 0x54
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ece:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d118      	bne.n	8004f4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0310 	bic.w	r3, r3, #16
 8004f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	613b      	str	r3, [r7, #16]
   return(result);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f62:	bf00      	nop
 8004f64:	3754      	adds	r7, #84	@ 0x54
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f70:	b084      	sub	sp, #16
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	f107 001c 	add.w	r0, r7, #28
 8004f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d121      	bne.n	8004fce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	4b21      	ldr	r3, [pc, #132]	@ (8005020 <USB_CoreInit+0xb0>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa92 	bl	80054ec <USB_CoreReset>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	e010      	b.n	8004ff0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa86 	bl	80054ec <USB_CoreReset>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ff0:	7fbb      	ldrb	r3, [r7, #30]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d10b      	bne.n	800500e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f043 0206 	orr.w	r2, r3, #6
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800501a:	b004      	add	sp, #16
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	ffbdffbf 	.word	0xffbdffbf

08005024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f023 0201 	bic.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d115      	bne.n	8005094 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005074:	200a      	movs	r0, #10
 8005076:	f7fc fae5 	bl	8001644 <HAL_Delay>
      ms += 10U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	330a      	adds	r3, #10
 800507e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa25 	bl	80054d0 <USB_GetMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b01      	cmp	r3, #1
 800508a:	d01e      	beq.n	80050ca <USB_SetCurrentMode+0x84>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005090:	d9f0      	bls.n	8005074 <USB_SetCurrentMode+0x2e>
 8005092:	e01a      	b.n	80050ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050a6:	200a      	movs	r0, #10
 80050a8:	f7fc facc 	bl	8001644 <HAL_Delay>
      ms += 10U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	330a      	adds	r3, #10
 80050b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa0c 	bl	80054d0 <USB_GetMode>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <USB_SetCurrentMode+0x84>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80050c2:	d9f0      	bls.n	80050a6 <USB_SetCurrentMode+0x60>
 80050c4:	e001      	b.n	80050ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e005      	b.n	80050d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80050ce:	d101      	bne.n	80050d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e0:	b084      	sub	sp, #16
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	e009      	b.n	8005114 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3340      	adds	r3, #64	@ 0x40
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3301      	adds	r3, #1
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b0e      	cmp	r3, #14
 8005118:	d9f2      	bls.n	8005100 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800511a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11c      	bne.n	800515c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e005      	b.n	8005168 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005160:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005174:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10d      	bne.n	8005198 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800517c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005184:	2100      	movs	r1, #0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f968 	bl	800545c <USB_SetDevSpeed>
 800518c:	e008      	b.n	80051a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800518e:	2101      	movs	r1, #1
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f963 	bl	800545c <USB_SetDevSpeed>
 8005196:	e003      	b.n	80051a0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005198:	2103      	movs	r1, #3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f95e 	bl	800545c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051a0:	2110      	movs	r1, #16
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f8fa 	bl	800539c <USB_FlushTxFifo>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f924 	bl	8005400 <USB_FlushRxFifo>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e043      	b.n	8005274 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005202:	d118      	bne.n	8005236 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e013      	b.n	8005248 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522c:	461a      	mov	r2, r3
 800522e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	e008      	b.n	8005248 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005242:	461a      	mov	r2, r3
 8005244:	2300      	movs	r3, #0
 8005246:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	461a      	mov	r2, r3
 8005268:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800526c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3301      	adds	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005278:	461a      	mov	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4293      	cmp	r3, r2
 800527e:	d3b5      	bcc.n	80051ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e043      	b.n	800530e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800529c:	d118      	bne.n	80052d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e013      	b.n	80052e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c6:	461a      	mov	r2, r3
 80052c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e008      	b.n	80052e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ee:	461a      	mov	r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005300:	461a      	mov	r2, r3
 8005302:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3301      	adds	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005312:	461a      	mov	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4293      	cmp	r3, r2
 8005318:	d3b5      	bcc.n	8005286 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800532c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800533a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800533c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 0210 	orr.w	r2, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <USB_DevInit+0x2b4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800535c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f043 0208 	orr.w	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005370:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <USB_DevInit+0x2b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005390:	b004      	add	sp, #16
 8005392:	4770      	bx	lr
 8005394:	803c3800 	.word	0x803c3800
 8005398:	40000004 	.word	0x40000004

0800539c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b6:	d901      	bls.n	80053bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e01b      	b.n	80053f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	daf2      	bge.n	80053aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	019b      	lsls	r3, r3, #6
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053e0:	d901      	bls.n	80053e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e006      	b.n	80053f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d0f0      	beq.n	80053d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005418:	d901      	bls.n	800541e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e018      	b.n	8005450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	daf2      	bge.n	800540c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2210      	movs	r2, #16
 800542e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800543c:	d901      	bls.n	8005442 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e006      	b.n	8005450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b10      	cmp	r3, #16
 800544c:	d0f0      	beq.n	8005430 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80054a8:	f023 0303 	bic.w	r3, r3, #3
 80054ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054bc:	f043 0302 	orr.w	r3, r3, #2
 80054c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f003 0301 	and.w	r3, r3, #1
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005504:	d901      	bls.n	800550a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e022      	b.n	8005550 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	daf2      	bge.n	80054f8 <USB_CoreReset+0xc>

  count = 10U;
 8005512:	230a      	movs	r3, #10
 8005514:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005516:	e002      	b.n	800551e <USB_CoreReset+0x32>
  {
    count--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f9      	bne.n	8005518 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800553c:	d901      	bls.n	8005542 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e006      	b.n	8005550 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d0f0      	beq.n	8005530 <USB_CoreReset+0x44>

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <memset>:
 800555c:	4402      	add	r2, r0
 800555e:	4603      	mov	r3, r0
 8005560:	4293      	cmp	r3, r2
 8005562:	d100      	bne.n	8005566 <memset+0xa>
 8005564:	4770      	bx	lr
 8005566:	f803 1b01 	strb.w	r1, [r3], #1
 800556a:	e7f9      	b.n	8005560 <memset+0x4>

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	@ (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	@ (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	@ (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	@ (80055b0 <__libc_init_array+0x44>)
 8005580:	f000 f818 	bl	80055b4 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	080056cc 	.word	0x080056cc
 80055a8:	080056cc 	.word	0x080056cc
 80055ac:	080056cc 	.word	0x080056cc
 80055b0:	080056d0 	.word	0x080056d0

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
