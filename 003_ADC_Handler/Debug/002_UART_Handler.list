
002_UART_Handler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e9c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800609c  0800609c  0000709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  000081a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800610c  0800610c  000081a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800610c  0800610c  0000710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006114  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08006174  00008060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08006214  00008100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008d4  200001a0  080062b4  000081a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a74  080062b4  00008a74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000081a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017ff8  00000000  00000000  000081ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b3b  00000000  00000000  000201c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a8  00000000  00000000  00023d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e4d  00000000  00000000  00024fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b1d1  00000000  00000000  00025dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b262  00000000  00000000  00050fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100fe2  00000000  00000000  0006c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016d212  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005184  00000000  00000000  0016d258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  001723dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08006084 	.word	0x08006084

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08006084 	.word	0x08006084

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800061e:	4b44      	ldr	r3, [pc, #272]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000620:	4a44      	ldr	r2, [pc, #272]	@ (8000734 <MX_ADC3_Init+0x128>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b42      	ldr	r3, [pc, #264]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b40      	ldr	r3, [pc, #256]	@ (8000730 <MX_ADC3_Init+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000632:	4b3f      	ldr	r3, [pc, #252]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000634:	2201      	movs	r2, #1
 8000636:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000638:	4b3d      	ldr	r3, [pc, #244]	@ (8000730 <MX_ADC3_Init+0x124>)
 800063a:	2201      	movs	r2, #1
 800063c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b3c      	ldr	r3, [pc, #240]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b3a      	ldr	r3, [pc, #232]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b38      	ldr	r3, [pc, #224]	@ (8000730 <MX_ADC3_Init+0x124>)
 800064e:	4a3a      	ldr	r2, [pc, #232]	@ (8000738 <MX_ADC3_Init+0x12c>)
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b37      	ldr	r3, [pc, #220]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000658:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <MX_ADC3_Init+0x124>)
 800065a:	2206      	movs	r2, #6
 800065c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_ADC3_Init+0x124>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800066c:	4830      	ldr	r0, [pc, #192]	@ (8000730 <MX_ADC3_Init+0x124>)
 800066e:	f001 f863 	bl	8001738 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fd6c 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800067c:	2303      	movs	r3, #3
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000684:	2307      	movs	r3, #7
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4828      	ldr	r0, [pc, #160]	@ (8000730 <MX_ADC3_Init+0x124>)
 800068e:	f001 f897 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fd5c 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800069c:	230a      	movs	r3, #10
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <MX_ADC3_Init+0x124>)
 80006aa:	f001 f889 	bl	80017c0 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80006b4:	f000 fd4e 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006b8:	230d      	movs	r3, #13
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006bc:	2303      	movs	r3, #3
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	481a      	ldr	r0, [pc, #104]	@ (8000730 <MX_ADC3_Init+0x124>)
 80006c6:	f001 f87b 	bl	80017c0 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80006d0:	f000 fd40 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d4:	2309      	movs	r3, #9
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006d8:	2304      	movs	r3, #4
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4813      	ldr	r0, [pc, #76]	@ (8000730 <MX_ADC3_Init+0x124>)
 80006e2:	f001 f86d 	bl	80017c0 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80006ec:	f000 fd32 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006f0:	230f      	movs	r3, #15
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006f4:	2305      	movs	r3, #5
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_ADC3_Init+0x124>)
 80006fe:	f001 f85f 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000708:	f000 fd24 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800070c:	2308      	movs	r3, #8
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000710:	2306      	movs	r3, #6
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_ADC3_Init+0x124>)
 800071a:	f001 f851 	bl	80017c0 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8000724:	f000 fd16 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001bc 	.word	0x200001bc
 8000734:	40012200 	.word	0x40012200
 8000738:	0f000001 	.word	0x0f000001

0800073c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a46      	ldr	r2, [pc, #280]	@ (8000874 <HAL_ADC_MspInit+0x138>)
 800075a:	4293      	cmp	r3, r2
 800075c:	f040 8085 	bne.w	800086a <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000760:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 8000762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000764:	4a44      	ldr	r2, [pc, #272]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800076a:	6453      	str	r3, [r2, #68]	@ 0x44
 800076c:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 800076e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000778:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077c:	4a3e      	ldr	r2, [pc, #248]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6313      	str	r3, [r2, #48]	@ 0x30
 8000784:	4b3c      	ldr	r3, [pc, #240]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000788:	f003 0320 	and.w	r3, r3, #32
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000794:	4a38      	ldr	r2, [pc, #224]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6313      	str	r3, [r2, #48]	@ 0x30
 800079c:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ac:	4a32      	ldr	r2, [pc, #200]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b4:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <HAL_ADC_MspInit+0x13c>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC3     ------> ADC3_IN13
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = ADC3_09_R4_Pin|ADC3_15_R5_Pin|ADC3_08_R6_Pin;
 80007c0:	f44f 6385 	mov.w	r3, #1064	@ 0x428
 80007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4829      	ldr	r0, [pc, #164]	@ (800087c <HAL_ADC_MspInit+0x140>)
 80007d6:	f002 f991 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC3_10_R2_Pin|ADC3_13_R3_Pin;
 80007da:	2309      	movs	r3, #9
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4824      	ldr	r0, [pc, #144]	@ (8000880 <HAL_ADC_MspInit+0x144>)
 80007ee:	f002 f985 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC3_03_R1_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC3_03_R1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	481f      	ldr	r0, [pc, #124]	@ (8000884 <HAL_ADC_MspInit+0x148>)
 8000806:	f002 f979 	bl	8002afc <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 800080c:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <HAL_ADC_MspInit+0x150>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000812:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000816:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_DISABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 800082c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000830:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000838:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 800083c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000840:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000850:	f001 fb1c 	bl	8001e8c <HAL_DMA_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 800085a:	f000 fc7b 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000862:	639a      	str	r2, [r3, #56]	@ 0x38
 8000864:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_ADC_MspInit+0x14c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800086a:	bf00      	nop
 800086c:	3730      	adds	r7, #48	@ 0x30
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40012200 	.word	0x40012200
 8000878:	40023800 	.word	0x40023800
 800087c:	40021400 	.word	0x40021400
 8000880:	40020800 	.word	0x40020800
 8000884:	40020000 	.word	0x40020000
 8000888:	20000204 	.word	0x20000204
 800088c:	40026410 	.word	0x40026410

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_DMA_Init+0x38>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a0b      	ldr	r2, [pc, #44]	@ (80008c8 <MX_DMA_Init+0x38>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_DMA_Init+0x38>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2038      	movs	r0, #56	@ 0x38
 80008b4:	f001 fab3 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b8:	2038      	movs	r0, #56	@ 0x38
 80008ba:	f001 facc 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_ETH_Init+0x84>)
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <MX_ETH_Init+0x88>)
 80008d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008e4:	22e1      	movs	r2, #225	@ 0xe1
 80008e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_ETH_Init+0x84>)
 80008fc:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_ETH_Init+0x84>)
 8000902:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000906:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_ETH_Init+0x84>)
 800090a:	4a14      	ldr	r2, [pc, #80]	@ (800095c <MX_ETH_Init+0x90>)
 800090c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_ETH_Init+0x84>)
 8000910:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_ETH_Init+0x94>)
 8000912:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_ETH_Init+0x84>)
 8000916:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800091a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_ETH_Init+0x84>)
 800091e:	f001 fd9f 	bl	8002460 <HAL_ETH_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 fc14 	bl	8001154 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800092c:	2238      	movs	r2, #56	@ 0x38
 800092e:	2100      	movs	r1, #0
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_ETH_Init+0x98>)
 8000932:	f004 ff29 	bl	8005788 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_ETH_Init+0x98>)
 8000938:	2221      	movs	r2, #33	@ 0x21
 800093a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_ETH_Init+0x98>)
 800093e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000942:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_ETH_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000029c 	.word	0x2000029c
 8000954:	40028000 	.word	0x40028000
 8000958:	2000034c 	.word	0x2000034c
 800095c:	20000100 	.word	0x20000100
 8000960:	20000060 	.word	0x20000060
 8000964:	20000264 	.word	0x20000264

08000968 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a4e      	ldr	r2, [pc, #312]	@ (8000ac0 <HAL_ETH_MspInit+0x158>)
 8000986:	4293      	cmp	r3, r2
 8000988:	f040 8096 	bne.w	8000ab8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800098c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000990:	4a4c      	ldr	r2, [pc, #304]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000996:	6313      	str	r3, [r2, #48]	@ 0x30
 8000998:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009a0:	623b      	str	r3, [r7, #32]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	4a46      	ldr	r2, [pc, #280]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b0:	4b44      	ldr	r3, [pc, #272]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	4b41      	ldr	r3, [pc, #260]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c0:	4a40      	ldr	r2, [pc, #256]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80009c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e0:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	4a34      	ldr	r2, [pc, #208]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f8:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a34:	2332      	movs	r3, #50	@ 0x32
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481e      	ldr	r0, [pc, #120]	@ (8000ac8 <HAL_ETH_MspInit+0x160>)
 8000a50:	f002 f854 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a54:	2386      	movs	r3, #134	@ 0x86
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4817      	ldr	r0, [pc, #92]	@ (8000acc <HAL_ETH_MspInit+0x164>)
 8000a70:	f002 f844 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <HAL_ETH_MspInit+0x168>)
 8000a92:	f002 f833 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a96:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <HAL_ETH_MspInit+0x16c>)
 8000ab4:	f002 f822 	bl	8002afc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	@ 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40028000 	.word	0x40028000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800

08000ad8 <MX_GPIO_Init>:
     PD15   ------> S_TIM4_CH4
     PC7   ------> S_TIM3_CH2
     PC8   ------> S_TIM3_CH3
*/
void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	@ 0x38
 8000adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	4bb5      	ldr	r3, [pc, #724]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4ab4      	ldr	r2, [pc, #720]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4bb2      	ldr	r3, [pc, #712]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	623b      	str	r3, [r7, #32]
 8000b04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4baf      	ldr	r3, [pc, #700]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4aae      	ldr	r2, [pc, #696]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4bac      	ldr	r3, [pc, #688]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1e:	4ba9      	ldr	r3, [pc, #676]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4aa8      	ldr	r2, [pc, #672]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b24:	f043 0320 	orr.w	r3, r3, #32
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4ba6      	ldr	r3, [pc, #664]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4ba3      	ldr	r3, [pc, #652]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4aa2      	ldr	r2, [pc, #648]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4ba0      	ldr	r3, [pc, #640]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b9d      	ldr	r3, [pc, #628]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a9c      	ldr	r2, [pc, #624]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b9a      	ldr	r3, [pc, #616]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b97      	ldr	r3, [pc, #604]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a96      	ldr	r2, [pc, #600]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b94      	ldr	r3, [pc, #592]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	4b91      	ldr	r3, [pc, #580]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a90      	ldr	r2, [pc, #576]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b8b      	ldr	r3, [pc, #556]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a8a      	ldr	r2, [pc, #552]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b88      	ldr	r3, [pc, #544]	@ (8000dc4 <MX_GPIO_Init+0x2ec>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_Touch_CS_Pin|LED_7_Pin|LED_6_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f642 2110 	movw	r1, #10768	@ 0x2a10
 8000bb4:	4884      	ldr	r0, [pc, #528]	@ (8000dc8 <MX_GPIO_Init+0x2f0>)
 8000bb6:	f002 f94d 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bc0:	4882      	ldr	r0, [pc, #520]	@ (8000dcc <MX_GPIO_Init+0x2f4>)
 8000bc2:	f002 f947 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_8_Pin|LED_5_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000bcc:	4880      	ldr	r0, [pc, #512]	@ (8000dd0 <MX_GPIO_Init+0x2f8>)
 8000bce:	f002 f941 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|USB_PowerSwitchOn_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f244 2142 	movw	r1, #16962	@ 0x4242
 8000bd8:	487e      	ldr	r0, [pc, #504]	@ (8000dd4 <MX_GPIO_Init+0x2fc>)
 8000bda:	f002 f93b 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2118      	movs	r1, #24
 8000be2:	487d      	ldr	r0, [pc, #500]	@ (8000dd8 <MX_GPIO_Init+0x300>)
 8000be4:	f002 f936 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_Touch_CLK_Pin LCD_Touch_DO_Pin LCD_Touch_DIN_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_CLK_Pin|LCD_Touch_DO_Pin|LCD_Touch_DIN_Pin;
 8000be8:	2364      	movs	r3, #100	@ 0x64
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4871      	ldr	r0, [pc, #452]	@ (8000dc8 <MX_GPIO_Init+0x2f0>)
 8000c04:	f001 ff7a 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Touch_IRQ_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_IRQ_Pin;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LCD_Touch_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	486b      	ldr	r0, [pc, #428]	@ (8000dc8 <MX_GPIO_Init+0x2f0>)
 8000c1c:	f001 ff6e 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Touch_CS_Pin LED_7_Pin LED_6_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LCD_Touch_CS_Pin|LED_7_Pin|LED_6_Pin|LED_4_Pin;
 8000c20:	f642 2310 	movw	r3, #10768	@ 0x2a10
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4863      	ldr	r0, [pc, #396]	@ (8000dc8 <MX_GPIO_Init+0x2f0>)
 8000c3a:	f001 ff5f 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : User_B1_Button_Pin EXTI09__Pin EXTI10__Pin EXTI11__Pin
                           EXTI12__Pin */
  GPIO_InitStruct.Pin = User_B1_Button_Pin|EXTI09__Pin|EXTI10__Pin|EXTI11__Pin
 8000c3e:	f44f 5378 	mov.w	r3, #15872	@ 0x3e00
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |EXTI12__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4861      	ldr	r0, [pc, #388]	@ (8000ddc <MX_GPIO_Init+0x304>)
 8000c56:	f001 ff51 	bl	8002afc <HAL_GPIO_Init>


  /* NVIC for EXTI lines */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn,   1, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2017      	movs	r0, #23
 8000c60:	f001 f8dd 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c64:	2017      	movs	r0, #23
 8000c66:	f001 f8f6 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	2028      	movs	r0, #40	@ 0x28
 8000c70:	f001 f8d5 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c74:	2028      	movs	r0, #40	@ 0x28
 8000c76:	f001 f8ee 	bl	8001e56 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : LCD_SCK_Pin LCD_MISO_Pin LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000c7a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	484e      	ldr	r0, [pc, #312]	@ (8000dd0 <MX_GPIO_Init+0x2f8>)
 8000c98:	f001 ff30 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM3_CH1__Pin */
  GPIO_InitStruct.Pin = TIM3_CH1__Pin;
 8000c9c:	2340      	movs	r3, #64	@ 0x40
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cac:	2302      	movs	r3, #2
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TIM3_CH1__GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	484a      	ldr	r0, [pc, #296]	@ (8000de0 <MX_GPIO_Init+0x308>)
 8000cb8:	f001 ff20 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cbc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	483d      	ldr	r0, [pc, #244]	@ (8000dcc <MX_GPIO_Init+0x2f4>)
 8000cd6:	f001 ff11 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cea:	2302      	movs	r3, #2
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4835      	ldr	r0, [pc, #212]	@ (8000dcc <MX_GPIO_Init+0x2f4>)
 8000cf6:	f001 ff01 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_8_Pin LED_5_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_8_Pin|LED_5_Pin|LED_3_Pin;
 8000cfa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	482f      	ldr	r0, [pc, #188]	@ (8000dd0 <MX_GPIO_Init+0x2f8>)
 8000d14:	f001 fef2 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin USB_PowerSwitchOn_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|USB_PowerSwitchOn_Pin|LED_1_Pin|LED_2_Pin;
 8000d18:	f244 2342 	movw	r3, #16962	@ 0x4242
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <MX_GPIO_Init+0x2fc>)
 8000d32:	f001 fee3 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d36:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4821      	ldr	r0, [pc, #132]	@ (8000dd8 <MX_GPIO_Init+0x300>)
 8000d54:	f001 fed2 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <MX_GPIO_Init+0x2fc>)
 8000d6e:	f001 fec5 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <MX_GPIO_Init+0x2fc>)
 8000d86:	f001 feb9 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM3_CH2__Pin TIM3_CH3__Pin */
  GPIO_InitStruct.Pin = TIM3_CH2__Pin|TIM3_CH3__Pin;
 8000d8a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_GPIO_Init+0x304>)
 8000da8:	f001 fea8 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dac:	2304      	movs	r3, #4
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	e010      	b.n	8000de4 <MX_GPIO_Init+0x30c>
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40021400 	.word	0x40021400
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <MX_GPIO_Init+0x348>)
 8000de6:	f001 fe89 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8000dea:	2318      	movs	r3, #24
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <MX_GPIO_Init+0x348>)
 8000e02:	f001 fe7b 	bl	8002afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2101      	movs	r1, #1
 8000e0a:	2028      	movs	r0, #40	@ 0x28
 8000e0c:	f001 f807 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e10:	2028      	movs	r0, #40	@ 0x28
 8000e12:	f001 f820 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	@ 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40020c00 	.word	0x40020c00

08000e24 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <MX_I2C2_Init+0x78>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <MX_I2C2_Init+0x7c>)
 8000e32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e5e:	480e      	ldr	r0, [pc, #56]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e60:	f002 f82a 	bl	8002eb8 <HAL_I2C_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e6a:	f000 f973 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e72:	f002 f8bd 	bl	8002ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e7c:	f000 f96a 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e80:	2100      	movs	r1, #0
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_I2C2_Init+0x74>)
 8000e84:	f002 f8ff 	bl	8003086 <HAL_I2CEx_ConfigDigitalFilter>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 f961 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000354 	.word	0x20000354
 8000e9c:	40005800 	.word	0x40005800
 8000ea0:	20404768 	.word	0x20404768

08000ea4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2290      	movs	r2, #144	@ 0x90
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fc5f 	bl	8005788 <memset>
  if(i2cHandle->Instance==I2C2)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_I2C_MspInit+0xb0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d13b      	bne.n	8000f4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ed8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 ff7a 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f000 f931 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a18      	ldr	r2, [pc, #96]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f22:	2304      	movs	r3, #4
 8000f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_I2C_MspInit+0xb8>)
 8000f30:	f001 fde4 	bl	8002afc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	37b8      	adds	r7, #184	@ 0xb8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005800 	.word	0x40005800
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40021400 	.word	0x40021400

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b09f      	sub	sp, #124	@ 0x7c
 8000f64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fb66 	bl	8001636 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f865 	bl	8001038 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f7ff fdb3 	bl	8000ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f72:	f7ff fc8d 	bl	8000890 <MX_DMA_Init>
  MX_ETH_Init();
 8000f76:	f7ff fca9 	bl	80008cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f7a:	f000 f9fb 	bl	8001374 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f7e:	f000 fa89 	bl	8001494 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 8000f82:	f7ff fb43 	bl	800060c <MX_ADC3_Init>
  MX_RNG_Init();
 8000f86:	f000 f8eb 	bl	8001160 <MX_RNG_Init>
  MX_I2C2_Init();
 8000f8a:	f7ff ff4b 	bl	8000e24 <MX_I2C2_Init>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  static size_t a = 19;
	  char msg[96];
	  uint32_t now = HAL_GetTick();
 8000f8e:	f000 fba3 	bl	80016d8 <HAL_GetTick>
 8000f92:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  int n = snprintf(msg, sizeof(msg),
			  "TIME: %02lu:%02lu\r\n",
			  (now-a) / 60000,
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <main+0xc0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f9a:	1ad3      	subs	r3, r2, r3
	  int n = snprintf(msg, sizeof(msg),
 8000f9c:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <main+0xc4>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	0b9c      	lsrs	r4, r3, #14
			  ((now-a) / 1000) % 60
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <main+0xc0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <main+0xc8>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	0999      	lsrs	r1, r3, #6
	  int n = snprintf(msg, sizeof(msg),
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <main+0xcc>)
 8000fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fba:	095a      	lsrs	r2, r3, #5
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	1aca      	subs	r2, r1, r3
 8000fc6:	1d38      	adds	r0, r7, #4
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <main+0xd0>)
 8000fce:	2160      	movs	r1, #96	@ 0x60
 8000fd0:	f004 fba4 	bl	800571c <sniprintf>
 8000fd4:	66b8      	str	r0, [r7, #104]	@ 0x68
			  );
	  size_t len = (n < 0) ? 0 : (n >= (int)sizeof(msg) ? sizeof(msg) - 1 : (size_t)n);
 8000fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db04      	blt.n	8000fe6 <main+0x86>
 8000fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fde:	2b5f      	cmp	r3, #95	@ 0x5f
 8000fe0:	bfa8      	it	ge
 8000fe2:	235f      	movge	r3, #95	@ 0x5f
 8000fe4:	e000      	b.n	8000fe8 <main+0x88>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	667b      	str	r3, [r7, #100]	@ 0x64
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, (uint16_t)len, 1000);
 8000fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	1d39      	adds	r1, r7, #4
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	480f      	ldr	r0, [pc, #60]	@ (8001034 <main+0xd4>)
 8000ff6:	f003 fb91 	bl	800471c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffe:	f000 fb77 	bl	80016f0 <HAL_Delay>
	  if (a == 19)
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <main+0xc0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b13      	cmp	r3, #19
 8001008:	d103      	bne.n	8001012 <main+0xb2>
	  {
		  a = 20;
 800100a:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <main+0xc0>)
 800100c:	2214      	movs	r2, #20
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e7bd      	b.n	8000f8e <main+0x2e>
	  }
	  else
	  {
		  a = a +2;
 8001012:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <main+0xc0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3302      	adds	r3, #2
 8001018:	4a01      	ldr	r2, [pc, #4]	@ (8001020 <main+0xc0>)
 800101a:	6013      	str	r3, [r2, #0]
  {
 800101c:	e7b7      	b.n	8000f8e <main+0x2e>
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	45e7b273 	.word	0x45e7b273
 8001028:	10624dd3 	.word	0x10624dd3
 800102c:	88888889 	.word	0x88888889
 8001030:	0800609c 	.word	0x0800609c
 8001034:	200003a8 	.word	0x200003a8

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	@ 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2234      	movs	r2, #52	@ 0x34
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fb9e 	bl	8005788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <SystemClock_Config+0xd4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a2a      	ldr	r2, [pc, #168]	@ (800110c <SystemClock_Config+0xd4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b28      	ldr	r3, [pc, #160]	@ (800110c <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <SystemClock_Config+0xd8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a25      	ldr	r2, [pc, #148]	@ (8001110 <SystemClock_Config+0xd8>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <SystemClock_Config+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001090:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001094:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800109e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010a4:	23d8      	movs	r3, #216	@ 0xd8
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010ac:	2309      	movs	r3, #9
 80010ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f9bb 	bl	8003434 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010c4:	f000 f846 	bl	8001154 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010c8:	f002 f964 	bl	8003394 <HAL_PWREx_EnableOverDrive>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010d2:	f000 f83f 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	2107      	movs	r1, #7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fc4b 	bl	8003990 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001100:	f000 f828 	bl	8001154 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	@ 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  // simple debounce shared by all buttons
  static uint32_t last_tick = 0;
  uint32_t now = HAL_GetTick();
 800111e:	f000 fadb 	bl	80016d8 <HAL_GetTick>
 8001122:	60f8      	str	r0, [r7, #12]
  if (now - last_tick < 200) return;   // ~200 ms
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2bc7      	cmp	r3, #199	@ 0xc7
 800112e:	d90b      	bls.n	8001148 <HAL_GPIO_EXTI_Callback+0x34>
  last_tick = now;
 8001130:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6013      	str	r3, [r2, #0]
  if( GPIO_Pin == GPIO_PIN_9){
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d105      	bne.n	800114a <HAL_GPIO_EXTI_Callback+0x36>
	  HAL_Delay(2000);
 800113e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001142:	f000 fad5 	bl	80016f0 <HAL_Delay>
 8001146:	e000      	b.n	800114a <HAL_GPIO_EXTI_Callback+0x36>
  if (now - last_tick < 200) return;   // ~200 ms
 8001148:	bf00      	nop
  }

}
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000430 	.word	0x20000430

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_RNG_Init+0x20>)
 8001166:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <MX_RNG_Init+0x24>)
 8001168:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_RNG_Init+0x20>)
 800116c:	f003 fa5e 	bl	800462c <HAL_RNG_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001176:	f7ff ffed 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000434 	.word	0x20000434
 8001184:	50060800 	.word	0x50060800

08001188 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0a8      	sub	sp, #160	@ 0xa0
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2290      	movs	r2, #144	@ 0x90
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 faf5 	bl	8005788 <memset>
  if(rngHandle->Instance==RNG)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <HAL_RNG_MspInit+0x60>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d11b      	bne.n	80011e0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fe0f 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80011c4:	f7ff ffc6 	bl	8001154 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_RNG_MspInit+0x64>)
 80011ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <HAL_RNG_MspInit+0x64>)
 80011ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_RNG_MspInit+0x64>)
 80011d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80011e0:	bf00      	nop
 80011e2:	37a0      	adds	r7, #160	@ 0xa0
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	50060800 	.word	0x50060800
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_MspInit+0x44>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <HAL_MspInit+0x44>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_MspInit+0x44>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <HAL_MspInit+0x44>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_MspInit+0x44>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001226:	2006      	movs	r0, #6
 8001228:	f000 fdee 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <UsageFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 fa0f 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}

08001296 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQH 0 */

  /* USER CODE END EXTI9_5_IRQH 0 */
	HAL_GPIO_EXTI_IRQHandler(EXTI09__Pin);
 800129a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800129e:	f001 fdf3 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQH 1 */

  /* USER CODE END EXTI9_5_IRQH 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10__Pin);
 80012aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80012ae:	f001 fdeb 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11__Pin);
 80012b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80012b6:	f001 fde7 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI12__Pin);
 80012ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80012be:	f001 fde3 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(User_B1_Button_Pin);
 80012c2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012c6:	f001 fddf 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <DMA2_Stream0_IRQHandler+0x10>)
 80012d6:	f000 fe87 	bl	8001fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000204 	.word	0x20000204

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f004 fa40 	bl	8005798 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20080000 	.word	0x20080000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000444 	.word	0x20000444
 800134c:	20000a78 	.word	0x20000a78

08001350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <MX_USART3_UART_Init>:
extern UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 800137a:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <MX_USART3_UART_Init+0x5c>)
 800137c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_USART3_UART_Init+0x58>)
 80013b8:	f003 f962 	bl	8004680 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013c2:	f7ff fec7 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200003a8 	.word	0x200003a8
 80013d0:	40004800 	.word	0x40004800

080013d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ae      	sub	sp, #184	@ 0xb8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2290      	movs	r2, #144	@ 0x90
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 f9c7 	bl	8005788 <memset>
  if(uartHandle->Instance==USART3)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <HAL_UART_MspInit+0xb4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d13c      	bne.n	800147e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001408:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800140a:	2300      	movs	r3, #0
 800140c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fce2 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800141e:	f7ff fe99 	bl	8001154 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001422:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_UART_MspInit+0xb8>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_UART_MspInit+0xb8>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_UART_MspInit+0xb8>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_UART_MspInit+0xb8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <HAL_UART_MspInit+0xb8>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_UART_MspInit+0xb8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800146c:	2307      	movs	r3, #7
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_UART_MspInit+0xbc>)
 800147a:	f001 fb3f 	bl	8002afc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800147e:	bf00      	nop
 8001480:	37b8      	adds	r7, #184	@ 0xb8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40004800 	.word	0x40004800
 800148c:	40023800 	.word	0x40023800
 8001490:	40020c00 	.word	0x40020c00

08001494 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800149e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a2:	2206      	movs	r2, #6
 80014a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d8:	f001 fe21 	bl	800311e <HAL_PCD_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014e2:	f7ff fe37 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000448 	.word	0x20000448

080014f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ae      	sub	sp, #184	@ 0xb8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2290      	movs	r2, #144	@ 0x90
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f004 f939 	bl	8005788 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800151e:	d159      	bne.n	80015d4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001520:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001524:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fc53 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800153c:	f7ff fe0a 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a25      	ldr	r2, [pc, #148]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001558:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800155c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001572:	230a      	movs	r3, #10
 8001574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800157c:	4619      	mov	r1, r3
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 8001580:	f001 fabc 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800159c:	4619      	mov	r1, r3
 800159e:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <HAL_PCD_MspInit+0xf0>)
 80015a0:	f001 faac 	bl	8002afc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a8:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 80015aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 80015b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <HAL_PCD_MspInit+0xec>)
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015d4:	bf00      	nop
 80015d6:	37b8      	adds	r7, #184	@ 0xb8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800161c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e8:	f7ff feb2 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	@ (8001630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001612:	f004 f8c7 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fca3 	bl	8000f60 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001628:	08006114 	.word	0x08006114
  ldr r2, =_sbss
 800162c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001630:	20000a74 	.word	0x20000a74

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>

08001636 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 fbe4 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001640:	2000      	movs	r0, #0
 8001642:	f000 f805 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001646:	f7ff fdd3 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fbff 	bl	8001e72 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 fbc7 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000004 	.word	0x20000004
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	20000928 	.word	0x20000928

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000928 	.word	0x20000928

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000000c 	.word	0x2000000c

08001738 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e031      	b.n	80017b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7fe fff0 	bl	800073c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_ADC_Init+0x84>)
 800177c:	4013      	ands	r3, r2
 800177e:	f043 0202 	orr.w	r2, r3, #2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f974 	bl	8001a74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a2:	e001      	b.n	80017a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	ffffeefd 	.word	0xffffeefd

080017c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1c>
 80017d8:	2302      	movs	r3, #2
 80017da:	e13a      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x292>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d93a      	bls.n	8001862 <HAL_ADC_ConfigChannel+0xa2>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017f4:	d035      	beq.n	8001862 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68d9      	ldr	r1, [r3, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	3b1e      	subs	r3, #30
 800180c:	2207      	movs	r2, #7
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	400a      	ands	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a8f      	ldr	r2, [pc, #572]	@ (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10a      	bne.n	800183c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	061a      	lsls	r2, r3, #24
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800183a:	e039      	b.n	80018b0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68d9      	ldr	r1, [r3, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4403      	add	r3, r0
 8001854:	3b1e      	subs	r3, #30
 8001856:	409a      	lsls	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001860:	e026      	b.n	80018b0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2207      	movs	r2, #7
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43da      	mvns	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	400a      	ands	r2, r1
 8001888:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6919      	ldr	r1, [r3, #16]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	4603      	mov	r3, r0
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4403      	add	r3, r0
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	409a      	lsls	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d824      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3b05      	subs	r3, #5
 80018ca:	221f      	movs	r2, #31
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	400a      	ands	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b05      	subs	r3, #5
 80018f4:	fa00 f203 	lsl.w	r2, r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001900:	e04c      	b.n	800199c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d824      	bhi.n	8001954 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b23      	subs	r3, #35	@ 0x23
 800191c:	221f      	movs	r2, #31
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	400a      	ands	r2, r1
 800192a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	3b23      	subs	r3, #35	@ 0x23
 8001946:	fa00 f203 	lsl.w	r2, r0, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30
 8001952:	e023      	b.n	800199c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b41      	subs	r3, #65	@ 0x41
 8001966:	221f      	movs	r2, #31
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b41      	subs	r3, #65	@ 0x41
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a30      	ldr	r2, [pc, #192]	@ (8001a64 <HAL_ADC_ConfigChannel+0x2a4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10a      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1fc>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 80019b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80019ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <HAL_ADC_ConfigChannel+0x2a4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10f      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x226>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b12      	cmp	r3, #18
 80019cc:	d10b      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019ce:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a25      	ldr	r2, [pc, #148]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 80019d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80019d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019da:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 80019e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_ADC_ConfigChannel+0x2a4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d12b      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x288>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d003      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x242>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b11      	cmp	r3, #17
 8001a00:	d122      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a08:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a0c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a18:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a10      	ldr	r2, [pc, #64]	@ (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_ADC_ConfigChannel+0x2ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <HAL_ADC_ConfigChannel+0x2b0>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9a      	lsrs	r2, r3, #18
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a3a:	e002      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	10000012 	.word	0x10000012
 8001a64:	40012000 	.word	0x40012000
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a7c:	4b78      	ldr	r3, [pc, #480]	@ (8001c60 <ADC_Init+0x1ec>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a77      	ldr	r2, [pc, #476]	@ (8001c60 <ADC_Init+0x1ec>)
 8001a82:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001a86:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a88:	4b75      	ldr	r3, [pc, #468]	@ (8001c60 <ADC_Init+0x1ec>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4973      	ldr	r1, [pc, #460]	@ (8001c60 <ADC_Init+0x1ec>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	021a      	lsls	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6899      	ldr	r1, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <ADC_Init+0x1f0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d022      	beq.n	8001b4e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6899      	ldr	r1, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	e00f      	b.n	8001b6e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0202 	bic.w	r2, r2, #2
 8001b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	005a      	lsls	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01b      	beq.n	8001bd4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001baa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	035a      	lsls	r2, r3, #13
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e007      	b.n	8001be4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	051a      	lsls	r2, r3, #20
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c26:	025a      	lsls	r2, r3, #9
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6899      	ldr	r1, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	029a      	lsls	r2, r3, #10
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	609a      	str	r2, [r3, #8]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40012300 	.word	0x40012300
 8001c64:	0f000001 	.word	0x0f000001

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	@ (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff3e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fc1e 	bl	80016d8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e099      	b.n	8001fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec8:	e00f      	b.n	8001eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eca:	f7ff fc05 	bl	80016d8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d908      	bls.n	8001eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e078      	b.n	8001fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e8      	bne.n	8001eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4b38      	ldr	r3, [pc, #224]	@ (8001fe4 <HAL_DMA_Init+0x158>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f023 0307 	bic.w	r3, r3, #7
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d117      	bne.n	8001fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f9e9 	bl	8002368 <DMA_CheckFifoParam>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	@ 0x40
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001faa:	2301      	movs	r3, #1
 8001fac:	e016      	b.n	8001fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f9a0 	bl	80022fc <DMA_CalcBaseAndBitshift>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	223f      	movs	r2, #63	@ 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	e010803f 	.word	0xe010803f

08001fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8002230 <HAL_DMA_IRQHandler+0x248>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8002234 <HAL_DMA_IRQHandler+0x24c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2208      	movs	r2, #8
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01a      	beq.n	8002054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2208      	movs	r2, #8
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	2201      	movs	r2, #1
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2201      	movs	r2, #1
 8002078:	409a      	lsls	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f043 0202 	orr.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	2204      	movs	r2, #4
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	2204      	movs	r2, #4
 80020ae:	409a      	lsls	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	2210      	movs	r2, #16
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d043      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03c      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	2210      	movs	r2, #16
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d018      	beq.n	800212a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d024      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	e01f      	b.n	8002158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e016      	b.n	8002158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0208 	bic.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	2220      	movs	r2, #32
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808f 	beq.w	8002288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8087 	beq.w	8002288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	2220      	movs	r2, #32
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d136      	bne.n	8002200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0216 	bic.w	r2, r2, #22
 80021a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x1da>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0208 	bic.w	r2, r2, #8
 80021d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	223f      	movs	r2, #63	@ 0x3f
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07e      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
        }
        return;
 80021fe:	e079      	b.n	80022f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01d      	beq.n	800224a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10d      	bne.n	8002238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002220:	2b00      	cmp	r3, #0
 8002222:	d031      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e02c      	b.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
 800222e:	bf00      	nop
 8002230:	20000004 	.word	0x20000004
 8002234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	e01e      	b.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10f      	bne.n	8002278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0210 	bic.w	r2, r2, #16
 8002266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228c:	2b00      	cmp	r3, #0
 800228e:	d032      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2205      	movs	r2, #5
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d307      	bcc.n	80022d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f2      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x2cc>
 80022ce:	e000      	b.n	80022d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e000      	b.n	80022f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f4:	bf00      	nop
    }
  }
}
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3b10      	subs	r3, #16
 800230c:	4a13      	ldr	r2, [pc, #76]	@ (800235c <DMA_CalcBaseAndBitshift+0x60>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <DMA_CalcBaseAndBitshift+0x64>)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d908      	bls.n	800233c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <DMA_CalcBaseAndBitshift+0x68>)
 8002332:	4013      	ands	r3, r2
 8002334:	1d1a      	adds	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	@ 0x58
 800233a:	e006      	b.n	800234a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <DMA_CalcBaseAndBitshift+0x68>)
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	aaaaaaab 	.word	0xaaaaaaab
 8002360:	080060c8 	.word	0x080060c8
 8002364:	fffffc00 	.word	0xfffffc00

08002368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11f      	bne.n	80023c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d856      	bhi.n	8002436 <DMA_CheckFifoParam+0xce>
 8002388:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <DMA_CheckFifoParam+0x28>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023b3 	.word	0x080023b3
 8002398:	080023a1 	.word	0x080023a1
 800239c:	08002437 	.word	0x08002437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d046      	beq.n	800243a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e043      	b.n	800243a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ba:	d140      	bne.n	800243e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e03d      	b.n	800243e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ca:	d121      	bne.n	8002410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d837      	bhi.n	8002442 <DMA_CheckFifoParam+0xda>
 80023d2:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <DMA_CheckFifoParam+0x70>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023ef 	.word	0x080023ef
 80023e0:	080023e9 	.word	0x080023e9
 80023e4:	08002401 	.word	0x08002401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      break;
 80023ec:	e030      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d025      	beq.n	8002446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fe:	e022      	b.n	8002446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002408:	d11f      	bne.n	800244a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800240e:	e01c      	b.n	800244a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d903      	bls.n	800241e <DMA_CheckFifoParam+0xb6>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d003      	beq.n	8002424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800241c:	e018      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      break;
 8002422:	e015      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      break;
 8002434:	e00b      	b.n	800244e <DMA_CheckFifoParam+0xe6>
      break;
 8002436:	bf00      	nop
 8002438:	e00a      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e008      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e006      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e004      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e002      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;   
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
    }
  } 
  
  return status; 
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop

08002460 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e086      	b.n	8002580 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe fa6f 	bl	8000968 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <HAL_ETH_Init+0x128>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	4a3e      	ldr	r2, [pc, #248]	@ (8002588 <HAL_ETH_Init+0x128>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002494:	6453      	str	r3, [r2, #68]	@ 0x44
 8002496:	4b3c      	ldr	r3, [pc, #240]	@ (8002588 <HAL_ETH_Init+0x128>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024a2:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_ETH_Init+0x12c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a39      	ldr	r2, [pc, #228]	@ (800258c <HAL_ETH_Init+0x12c>)
 80024a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_ETH_Init+0x12c>)
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_ETH_Init+0x12c>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024bc:	4b33      	ldr	r3, [pc, #204]	@ (800258c <HAL_ETH_Init+0x12c>)
 80024be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7ff f8fe 	bl	80016d8 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024de:	e011      	b.n	8002504 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024e0:	f7ff f8fa 	bl	80016d8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024ee:	d909      	bls.n	8002504 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2204      	movs	r2, #4
 80024f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	22e0      	movs	r2, #224	@ 0xe0
 80024fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e03d      	b.n	8002580 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e4      	bne.n	80024e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f97a 	bl	8002810 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fa25 	bl	800296c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa7b 	bl	8002a1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	461a      	mov	r2, r3
 800252e:	2100      	movs	r1, #0
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f9e3 	bl	80028fc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_ETH_Init+0x130>)
 8002554:	430b      	orrs	r3, r1
 8002556:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800256a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2210      	movs	r2, #16
 800257a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	00020060 	.word	0x00020060

08002594 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4b53      	ldr	r3, [pc, #332]	@ (80026f8 <ETH_SetMACConfig+0x164>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	7b9b      	ldrb	r3, [r3, #14]
 80025b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	7c12      	ldrb	r2, [r2, #16]
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d102      	bne.n	80025c2 <ETH_SetMACConfig+0x2e>
 80025bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025c0:	e000      	b.n	80025c4 <ETH_SetMACConfig+0x30>
 80025c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	7c52      	ldrb	r2, [r2, #17]
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	d102      	bne.n	80025d4 <ETH_SetMACConfig+0x40>
 80025ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025d2:	e000      	b.n	80025d6 <ETH_SetMACConfig+0x42>
 80025d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	7fdb      	ldrb	r3, [r3, #31]
 80025e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	7f92      	ldrb	r2, [r2, #30]
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d102      	bne.n	80025fa <ETH_SetMACConfig+0x66>
 80025f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x68>
 80025fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80025fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	7f1b      	ldrb	r3, [r3, #28]
 8002602:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002604:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800260a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002612:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	f892 2020 	ldrb.w	r2, [r2, #32]
 800261a:	2a00      	cmp	r2, #0
 800261c:	d102      	bne.n	8002624 <ETH_SetMACConfig+0x90>
 800261e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002622:	e000      	b.n	8002626 <ETH_SetMACConfig+0x92>
 8002624:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002626:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	7bdb      	ldrb	r3, [r3, #15]
 800262c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800262e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002634:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800263c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800263e:	4313      	orrs	r3, r2
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff f84a 	bl	80016f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002682:	2a00      	cmp	r2, #0
 8002684:	d101      	bne.n	800268a <ETH_SetMACConfig+0xf6>
 8002686:	2280      	movs	r2, #128	@ 0x80
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0xf8>
 800268a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800268c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002692:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800269a:	2a01      	cmp	r2, #1
 800269c:	d101      	bne.n	80026a2 <ETH_SetMACConfig+0x10e>
 800269e:	2208      	movs	r2, #8
 80026a0:	e000      	b.n	80026a4 <ETH_SetMACConfig+0x110>
 80026a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80026ac:	2a01      	cmp	r2, #1
 80026ae:	d101      	bne.n	80026b4 <ETH_SetMACConfig+0x120>
 80026b0:	2204      	movs	r2, #4
 80026b2:	e000      	b.n	80026b6 <ETH_SetMACConfig+0x122>
 80026b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026be:	2a01      	cmp	r2, #1
 80026c0:	d101      	bne.n	80026c6 <ETH_SetMACConfig+0x132>
 80026c2:	2202      	movs	r2, #2
 80026c4:	e000      	b.n	80026c8 <ETH_SetMACConfig+0x134>
 80026c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026c8:	4313      	orrs	r3, r2
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff f805 	bl	80016f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	fd20810f 	.word	0xfd20810f

080026fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4b3d      	ldr	r3, [pc, #244]	@ (800280c <ETH_SetDMAConfig+0x110>)
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <ETH_SetDMAConfig+0x2c>
 8002722:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002726:	e000      	b.n	800272a <ETH_SetDMAConfig+0x2e>
 8002728:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	7b5b      	ldrb	r3, [r3, #13]
 800272e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002730:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	7f52      	ldrb	r2, [r2, #29]
 8002736:	2a00      	cmp	r2, #0
 8002738:	d102      	bne.n	8002740 <ETH_SetDMAConfig+0x44>
 800273a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800273e:	e000      	b.n	8002742 <ETH_SetDMAConfig+0x46>
 8002740:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002742:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7b9b      	ldrb	r3, [r3, #14]
 8002748:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800274a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002750:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7f1b      	ldrb	r3, [r3, #28]
 8002756:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002758:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7f9b      	ldrb	r3, [r3, #30]
 800275e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002760:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002766:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002770:	4313      	orrs	r3, r2
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002792:	2001      	movs	r0, #1
 8002794:	f7fe ffac 	bl	80016f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a0:	461a      	mov	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f0:	2001      	movs	r0, #1
 80027f2:	f7fe ff7d 	bl	80016f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	f8de3f23 	.word	0xf8de3f23

08002810 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0a6      	sub	sp, #152	@ 0x98
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002852:	2300      	movs	r3, #0
 8002854:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800285c:	2300      	movs	r3, #0
 800285e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002878:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800287c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800287e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800288a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fe7f 	bl	8002594 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002896:	2301      	movs	r3, #1
 8002898:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028d0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff05 	bl	80026fc <ETH_SetDMAConfig>
}
 80028f2:	bf00      	nop
 80028f4:	3798      	adds	r7, #152	@ 0x98
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3305      	adds	r3, #5
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	3204      	adds	r2, #4
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <ETH_MACAddressConfig+0x68>)
 800291e:	4413      	add	r3, r2
 8002920:	461a      	mov	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3303      	adds	r3, #3
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	061a      	lsls	r2, r3, #24
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3302      	adds	r3, #2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	4313      	orrs	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <ETH_MACAddressConfig+0x6c>)
 800294e:	4413      	add	r3, r2
 8002950:	461a      	mov	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	6013      	str	r3, [r2, #0]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40028040 	.word	0x40028040
 8002968:	40028044 	.word	0x40028044

0800296c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e03e      	b.n	80029f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68d9      	ldr	r1, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	3206      	adds	r2, #6
 80029ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d80c      	bhi.n	80029dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68d9      	ldr	r1, [r3, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	e004      	b.n	80029e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3301      	adds	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d9bd      	bls.n	800297a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a10:	611a      	str	r2, [r3, #16]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e048      	b.n	8002abe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6919      	ldr	r1, [r3, #16]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	3212      	adds	r2, #18
 8002a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d80c      	bhi.n	8002aae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6919      	ldr	r1, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	e004      	b.n	8002ab8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3301      	adds	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d9b3      	bls.n	8002a2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aee:	60da      	str	r2, [r3, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e175      	b.n	8002e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8164 	bne.w	8002e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x56>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80be 	beq.w	8002e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c92:	4b63      	ldr	r3, [pc, #396]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c9e:	4a61      	ldr	r2, [pc, #388]	@ (8002e24 <HAL_GPIO_Init+0x328>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	@ (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d037      	beq.n	8002d3a <HAL_GPIO_Init+0x23e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a57      	ldr	r2, [pc, #348]	@ (8002e2c <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_GPIO_Init+0x23a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a56      	ldr	r2, [pc, #344]	@ (8002e30 <HAL_GPIO_Init+0x334>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02b      	beq.n	8002d32 <HAL_GPIO_Init+0x236>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a55      	ldr	r2, [pc, #340]	@ (8002e34 <HAL_GPIO_Init+0x338>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d025      	beq.n	8002d2e <HAL_GPIO_Init+0x232>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	@ (8002e38 <HAL_GPIO_Init+0x33c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <HAL_GPIO_Init+0x22e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a53      	ldr	r2, [pc, #332]	@ (8002e3c <HAL_GPIO_Init+0x340>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x22a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_GPIO_Init+0x344>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	@ (8002e44 <HAL_GPIO_Init+0x348>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_GPIO_Init+0x34c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_GPIO_Init+0x350>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002d12:	2309      	movs	r3, #9
 8002d14:	e012      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d16:	230a      	movs	r3, #10
 8002d18:	e010      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	e00e      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e00c      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d22:	2306      	movs	r3, #6
 8002d24:	e00a      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e008      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f002 0203 	and.w	r2, r2, #3
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4093      	lsls	r3, r2
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d4c:	4935      	ldr	r1, [pc, #212]	@ (8002e24 <HAL_GPIO_Init+0x328>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7e:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d84:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da8:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f67f ae86 	bls.w	8002b1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3724      	adds	r7, #36	@ 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40021c00 	.word	0x40021c00
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022400 	.word	0x40022400
 8002e50:	40013c00 	.word	0x40013c00

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9e:	4a05      	ldr	r2, [pc, #20]	@ (8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f934 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e08b      	b.n	8002fe2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd ffe0 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	@ 0x24
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e006      	b.n	8002f40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d108      	bne.n	8002f5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	e007      	b.n	8002f6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <HAL_I2C_Init+0x134>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1a      	ldr	r2, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	02008000 	.word	0x02008000

08002ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b20      	cmp	r3, #32
 8003004:	d138      	bne.n	8003078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003010:	2302      	movs	r3, #2
 8003012:	e032      	b.n	800307a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	@ 0x24
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d139      	bne.n	8003110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e033      	b.n	8003112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2224      	movs	r2, #36	@ 0x24
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af02      	add	r7, sp, #8
 8003124:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e108      	b.n	8003342 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe f9d0 	bl	80014f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2203      	movs	r2, #3
 8003154:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315e:	d102      	bne.n	8003166 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f002 f83a 	bl	80051e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7c1a      	ldrb	r2, [r3, #16]
 8003178:	f88d 2000 	strb.w	r2, [sp]
 800317c:	3304      	adds	r3, #4
 800317e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003180:	f001 ffd6 	bl	8005130 <USB_CoreInit>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0d5      	b.n	8003342 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f002 f832 	bl	8005206 <USB_SetCurrentMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0c6      	b.n	8003342 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e04a      	b.n	8003250 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3315      	adds	r3, #21
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3314      	adds	r3, #20
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	b298      	uxth	r0, r3
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	332e      	adds	r3, #46	@ 0x2e
 80031f6:	4602      	mov	r2, r0
 80031f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3318      	adds	r3, #24
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	331c      	adds	r3, #28
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3320      	adds	r3, #32
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3324      	adds	r3, #36	@ 0x24
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	3301      	adds	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	429a      	cmp	r2, r3
 8003258:	d3af      	bcc.n	80031ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e044      	b.n	80032ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	3301      	adds	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	791b      	ldrb	r3, [r3, #4]
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3b5      	bcc.n	8003260 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7c1a      	ldrb	r2, [r3, #16]
 80032fc:	f88d 2000 	strb.w	r2, [sp]
 8003300:	3304      	adds	r3, #4
 8003302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003304:	f001 ffcc 	bl	80052a0 <USB_DevInit>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e013      	b.n	8003342 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7b1b      	ldrb	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f80b 	bl	800334c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 f987 	bl	800564e <USB_DevDisconnect>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_PCDEx_ActivateLPM+0x44>)
 800337c:	4313      	orrs	r3, r2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	10000003 	.word	0x10000003

08003394 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b23      	ldr	r3, [pc, #140]	@ (800342c <HAL_PWREx_EnableOverDrive+0x98>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	4a22      	ldr	r2, [pc, #136]	@ (800342c <HAL_PWREx_EnableOverDrive+0x98>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_PWREx_EnableOverDrive+0x98>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c2:	f7fe f989 	bl	80016d8 <HAL_GetTick>
 80033c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033c8:	e009      	b.n	80033de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ca:	f7fe f985 	bl	80016d8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d8:	d901      	bls.n	80033de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e022      	b.n	8003424 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033de:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ea:	d1ee      	bne.n	80033ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f8:	f7fe f96e 	bl	80016d8 <HAL_GetTick>
 80033fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033fe:	e009      	b.n	8003414 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003400:	f7fe f96a 	bl	80016d8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800340e:	d901      	bls.n	8003414 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e007      	b.n	8003424 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003420:	d1ee      	bne.n	8003400 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000

08003434 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e29b      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8087 	beq.w	8003566 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003458:	4b96      	ldr	r3, [pc, #600]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b04      	cmp	r3, #4
 8003462:	d00c      	beq.n	800347e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003464:	4b93      	ldr	r3, [pc, #588]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d112      	bne.n	8003496 <HAL_RCC_OscConfig+0x62>
 8003470:	4b90      	ldr	r3, [pc, #576]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	4b8d      	ldr	r3, [pc, #564]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06c      	beq.n	8003564 <HAL_RCC_OscConfig+0x130>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d168      	bne.n	8003564 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e275      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x7a>
 80034a0:	4b84      	ldr	r3, [pc, #528]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a83      	ldr	r2, [pc, #524]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e02e      	b.n	800350c <HAL_RCC_OscConfig+0xd8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x9c>
 80034b6:	4b7f      	ldr	r3, [pc, #508]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7e      	ldr	r2, [pc, #504]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b7c      	ldr	r3, [pc, #496]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7b      	ldr	r2, [pc, #492]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0xd8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 80034da:	4b76      	ldr	r3, [pc, #472]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a75      	ldr	r2, [pc, #468]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b73      	ldr	r3, [pc, #460]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a72      	ldr	r2, [pc, #456]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xd8>
 80034f4:	4b6f      	ldr	r3, [pc, #444]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6e      	ldr	r2, [pc, #440]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b6c      	ldr	r3, [pc, #432]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6b      	ldr	r2, [pc, #428]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f8e0 	bl	80016d8 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe f8dc 	bl	80016d8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e229      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b61      	ldr	r3, [pc, #388]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xe8>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe f8cc 	bl	80016d8 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe f8c8 	bl	80016d8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e215      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b57      	ldr	r3, [pc, #348]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x110>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d069      	beq.n	8003646 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003572:	4b50      	ldr	r3, [pc, #320]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357e:	4b4d      	ldr	r3, [pc, #308]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d11c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x190>
 800358a:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d116      	bne.n	80035c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	4b47      	ldr	r3, [pc, #284]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x17a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e1e9      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ae:	4b41      	ldr	r3, [pc, #260]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	493d      	ldr	r1, [pc, #244]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	e040      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a38      	ldr	r2, [pc, #224]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe f87e 	bl	80016d8 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fe f87a 	bl	80016d8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1c7      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	4b30      	ldr	r3, [pc, #192]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fe:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4929      	ldr	r1, [pc, #164]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
 8003612:	e018      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003614:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a26      	ldr	r2, [pc, #152]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f85a 	bl	80016d8 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe f856 	bl	80016d8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1a3      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d038      	beq.n	80036c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d019      	beq.n	800368e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800365e:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe f837 	bl	80016d8 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366e:	f7fe f833 	bl	80016d8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e180      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x23a>
 800368c:	e01a      	b.n	80036c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	4a08      	ldr	r2, [pc, #32]	@ (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fe f81d 	bl	80016d8 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fe f819 	bl	80016d8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d903      	bls.n	80036b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e166      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
 80036b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	4b92      	ldr	r3, [pc, #584]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ee      	bne.n	80036a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a4 	beq.w	800381a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b8c      	ldr	r3, [pc, #560]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b89      	ldr	r3, [pc, #548]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	4a88      	ldr	r2, [pc, #544]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ea:	4b86      	ldr	r3, [pc, #536]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fa:	4b83      	ldr	r3, [pc, #524]	@ (8003908 <HAL_RCC_OscConfig+0x4d4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003706:	4b80      	ldr	r3, [pc, #512]	@ (8003908 <HAL_RCC_OscConfig+0x4d4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7f      	ldr	r2, [pc, #508]	@ (8003908 <HAL_RCC_OscConfig+0x4d4>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7fd ffe1 	bl	80016d8 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fd ffdd 	bl	80016d8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	@ 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e12a      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372c:	4b76      	ldr	r3, [pc, #472]	@ (8003908 <HAL_RCC_OscConfig+0x4d4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x31a>
 8003740:	4b70      	ldr	r3, [pc, #448]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	4a6f      	ldr	r2, [pc, #444]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6713      	str	r3, [r2, #112]	@ 0x70
 800374c:	e02d      	b.n	80037aa <HAL_RCC_OscConfig+0x376>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x33c>
 8003756:	4b6b      	ldr	r3, [pc, #428]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	4a6a      	ldr	r2, [pc, #424]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	@ 0x70
 8003762:	4b68      	ldr	r3, [pc, #416]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	4a67      	ldr	r2, [pc, #412]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	@ 0x70
 800376e:	e01c      	b.n	80037aa <HAL_RCC_OscConfig+0x376>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x35e>
 8003778:	4b62      	ldr	r3, [pc, #392]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377c:	4a61      	ldr	r2, [pc, #388]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6713      	str	r3, [r2, #112]	@ 0x70
 8003784:	4b5f      	ldr	r3, [pc, #380]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	4a5e      	ldr	r2, [pc, #376]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003790:	e00b      	b.n	80037aa <HAL_RCC_OscConfig+0x376>
 8003792:	4b5c      	ldr	r3, [pc, #368]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	4a5b      	ldr	r2, [pc, #364]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	@ 0x70
 800379e:	4b59      	ldr	r3, [pc, #356]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	4a58      	ldr	r2, [pc, #352]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd ff91 	bl	80016d8 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fd ff8d 	bl	80016d8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0d8      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ee      	beq.n	80037ba <HAL_RCC_OscConfig+0x386>
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fd ff7b 	bl	80016d8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd ff77 	bl	80016d8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0c2      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	4b41      	ldr	r3, [pc, #260]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ee      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	4b3d      	ldr	r3, [pc, #244]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	4a3c      	ldr	r2, [pc, #240]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80ae 	beq.w	8003980 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003824:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d06d      	beq.n	800390c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d14b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b32      	ldr	r3, [pc, #200]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a31      	ldr	r2, [pc, #196]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800383e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd ff48 	bl	80016d8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd ff44 	bl	80016d8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e091      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	491b      	ldr	r1, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd ff16 	bl	80016d8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd ff12 	bl	80016d8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e05f      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x47c>
 80038ce:	e057      	b.n	8003980 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fefc 	bl	80016d8 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd fef8 	bl	80016d8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e045      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4b0>
 8003902:	e03d      	b.n	8003980 <HAL_RCC_OscConfig+0x54c>
 8003904:	40023800 	.word	0x40023800
 8003908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800390c:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <HAL_RCC_OscConfig+0x558>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d030      	beq.n	800397c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d129      	bne.n	800397c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d122      	bne.n	800397c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003942:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003944:	4293      	cmp	r3, r2
 8003946:	d119      	bne.n	800397c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	3b01      	subs	r3, #1
 8003956:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d10f      	bne.n	800397c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0d0      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d910      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b67      	ldr	r3, [pc, #412]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 020f 	bic.w	r2, r3, #15
 80039be:	4965      	ldr	r1, [pc, #404]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b63      	ldr	r3, [pc, #396]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0b8      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f0:	4b59      	ldr	r3, [pc, #356]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a58      	ldr	r2, [pc, #352]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a08:	4b53      	ldr	r3, [pc, #332]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a14:	4b50      	ldr	r3, [pc, #320]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	494d      	ldr	r1, [pc, #308]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d040      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d115      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b41      	ldr	r3, [pc, #260]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e073      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	4b3d      	ldr	r3, [pc, #244]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e06b      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b39      	ldr	r3, [pc, #228]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4936      	ldr	r1, [pc, #216]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fd fe28 	bl	80016d8 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fd fe24 	bl	80016d8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e053      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b27      	ldr	r3, [pc, #156]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d210      	bcs.n	8003ae4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 020f 	bic.w	r2, r3, #15
 8003aca:	4922      	ldr	r1, [pc, #136]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e032      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4916      	ldr	r1, [pc, #88]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	490e      	ldr	r1, [pc, #56]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b22:	f000 f821 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	490a      	ldr	r1, [pc, #40]	@ (8003b5c <HAL_RCC_ClockConfig+0x1cc>)
 8003b34:	5ccb      	ldrb	r3, [r1, r3]
 8003b36:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <HAL_RCC_ClockConfig+0x1d0>)
 8003b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1d4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fd84 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	080060b0 	.word	0x080060b0
 8003b60:	20000004 	.word	0x20000004
 8003b64:	20000008 	.word	0x20000008

08003b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b094      	sub	sp, #80	@ 0x50
 8003b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b74:	2300      	movs	r3, #0
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b78:	2300      	movs	r3, #0
 8003b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b80:	4b79      	ldr	r3, [pc, #484]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	f200 80e1 	bhi.w	8003d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x34>
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b9a:	e0db      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b73      	ldr	r3, [pc, #460]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba0:	e0db      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba2:	4b73      	ldr	r3, [pc, #460]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba6:	e0d8      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d063      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bec:	0150      	lsls	r0, r2, #5
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	1a51      	subs	r1, r2, r1
 8003bf6:	6139      	str	r1, [r7, #16]
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	018b      	lsls	r3, r1, #6
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c16:	4651      	mov	r1, sl
 8003c18:	018a      	lsls	r2, r1, #6
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c20:	4659      	mov	r1, fp
 8003c22:	eb63 0901 	sbc.w	r9, r3, r1
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c3a:	4690      	mov	r8, r2
 8003c3c:	4699      	mov	r9, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	eb18 0303 	adds.w	r3, r8, r3
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	462b      	mov	r3, r5
 8003c48:	eb49 0303 	adc.w	r3, r9, r3
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	024b      	lsls	r3, r1, #9
 8003c5e:	4621      	mov	r1, r4
 8003c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c64:	4621      	mov	r1, r4
 8003c66:	024a      	lsls	r2, r1, #9
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6e:	2200      	movs	r2, #0
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c78:	f7fc fb32 	bl	80002e0 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c84:	e058      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c86:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	4611      	mov	r1, r2
 8003c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	f04f 0000 	mov.w	r0, #0
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	0159      	lsls	r1, r3, #5
 8003cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb2:	0150      	lsls	r0, r2, #5
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4641      	mov	r1, r8
 8003cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	00eb      	lsls	r3, r5, #3
 8003cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cee:	00e2      	lsls	r2, r4, #3
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	18e3      	adds	r3, r4, r3
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb45 0303 	adc.w	r3, r5, r3
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	028b      	lsls	r3, r1, #10
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d18:	4621      	mov	r1, r4
 8003d1a:	028a      	lsls	r2, r1, #10
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d22:	2200      	movs	r2, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	61fa      	str	r2, [r7, #28]
 8003d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d2c:	f7fc fad8 	bl	80002e0 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d52:	e002      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3750      	adds	r7, #80	@ 0x50
 8003d60:	46bd      	mov	sp, r7
 8003d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	007a1200 	.word	0x007a1200

08003d74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d90:	f7ff fff0 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0a9b      	lsrs	r3, r3, #10
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4903      	ldr	r1, [pc, #12]	@ (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	080060c0 	.word	0x080060c0

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db8:	f7ff ffdc 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0b5b      	lsrs	r3, r3, #13
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	@ (8003dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	080060c0 	.word	0x080060c0

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d012      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e04:	4b69      	ldr	r3, [pc, #420]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a68      	ldr	r2, [pc, #416]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	4b66      	ldr	r3, [pc, #408]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	4964      	ldr	r1, [pc, #400]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d017      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e36:	4b5d      	ldr	r3, [pc, #372]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e44:	4959      	ldr	r1, [pc, #356]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e54:	d101      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e72:	4b4e      	ldr	r3, [pc, #312]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	494a      	ldr	r1, [pc, #296]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e90:	d101      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 808b 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4a39      	ldr	r2, [pc, #228]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a34      	ldr	r2, [pc, #208]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fbf8 	bl	80016d8 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eec:	f7fd fbf4 	bl	80016d8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	@ 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e38f      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003efe:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d035      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d02e      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f28:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a1a      	ldr	r2, [pc, #104]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f4a:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f50:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d114      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fbbc 	bl	80016d8 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd fbb8 	bl	80016d8 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e351      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f92:	d111      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fa0:	4b04      	ldr	r3, [pc, #16]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	4901      	ldr	r1, [pc, #4]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	0ffffcff 	.word	0x0ffffcff
 8003fb8:	4bac      	ldr	r3, [pc, #688]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4aab      	ldr	r2, [pc, #684]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	4ba9      	ldr	r3, [pc, #676]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	49a6      	ldr	r1, [pc, #664]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d010      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fe2:	4ba2      	ldr	r3, [pc, #648]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe8:	4aa0      	ldr	r2, [pc, #640]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ff2:	4b9e      	ldr	r3, [pc, #632]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	499b      	ldr	r1, [pc, #620]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004010:	4b96      	ldr	r3, [pc, #600]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800401e:	4993      	ldr	r1, [pc, #588]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004032:	4b8e      	ldr	r3, [pc, #568]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004040:	498a      	ldr	r1, [pc, #552]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004054:	4b85      	ldr	r3, [pc, #532]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004062:	4982      	ldr	r1, [pc, #520]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004076:	4b7d      	ldr	r3, [pc, #500]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004084:	4979      	ldr	r1, [pc, #484]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004098:	4b74      	ldr	r3, [pc, #464]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	4971      	ldr	r1, [pc, #452]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ba:	4b6c      	ldr	r3, [pc, #432]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c0:	f023 020c 	bic.w	r2, r3, #12
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c8:	4968      	ldr	r1, [pc, #416]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040dc:	4b63      	ldr	r3, [pc, #396]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ea:	4960      	ldr	r1, [pc, #384]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040fe:	4b5b      	ldr	r3, [pc, #364]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800410c:	4957      	ldr	r1, [pc, #348]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004120:	4b52      	ldr	r3, [pc, #328]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412e:	494f      	ldr	r1, [pc, #316]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004142:	4b4a      	ldr	r3, [pc, #296]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004150:	4946      	ldr	r1, [pc, #280]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004164:	4b41      	ldr	r3, [pc, #260]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	493e      	ldr	r1, [pc, #248]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004186:	4b39      	ldr	r3, [pc, #228]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004194:	4935      	ldr	r1, [pc, #212]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041a8:	4b30      	ldr	r3, [pc, #192]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b6:	492d      	ldr	r1, [pc, #180]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041ca:	4b28      	ldr	r3, [pc, #160]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041d8:	4924      	ldr	r1, [pc, #144]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b18      	ldr	r3, [pc, #96]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004210:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004218:	4914      	ldr	r1, [pc, #80]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800422c:	4b0f      	ldr	r3, [pc, #60]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004232:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423c:	490b      	ldr	r1, [pc, #44]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004256:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004260:	4902      	ldr	r1, [pc, #8]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800427c:	4b8a      	ldr	r3, [pc, #552]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428c:	4986      	ldr	r1, [pc, #536]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042a0:	4b81      	ldr	r3, [pc, #516]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b0:	497d      	ldr	r1, [pc, #500]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d006      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80d6 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042cc:	4b76      	ldr	r3, [pc, #472]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a75      	ldr	r2, [pc, #468]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fd f9fe 	bl	80016d8 <HAL_GetTick>
 80042dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042e0:	f7fd f9fa 	bl	80016d8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	@ 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e195      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f2:	4b6d      	ldr	r3, [pc, #436]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430e:	2b00      	cmp	r3, #0
 8004310:	d11d      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004312:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004320:	4b61      	ldr	r3, [pc, #388]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004326:	0e1b      	lsrs	r3, r3, #24
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	019a      	lsls	r2, r3, #6
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	4958      	ldr	r1, [pc, #352]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004378:	d129      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800437a:	4b4b      	ldr	r3, [pc, #300]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004388:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438e:	0f1b      	lsrs	r3, r3, #28
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	019a      	lsls	r2, r3, #6
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	071b      	lsls	r3, r3, #28
 80043ae:	493e      	ldr	r1, [pc, #248]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043b6:	4b3c      	ldr	r3, [pc, #240]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043bc:	f023 021f 	bic.w	r2, r3, #31
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	3b01      	subs	r3, #1
 80043c6:	4938      	ldr	r1, [pc, #224]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01d      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043da:	4b33      	ldr	r3, [pc, #204]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e8:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ee:	0f1b      	lsrs	r3, r3, #28
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	071b      	lsls	r3, r3, #28
 800440e:	4926      	ldr	r1, [pc, #152]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d011      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	019a      	lsls	r2, r3, #6
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	071b      	lsls	r3, r3, #28
 800443e:	491a      	ldr	r1, [pc, #104]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004452:	f7fd f941 	bl	80016d8 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800445a:	f7fd f93d 	bl	80016d8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	@ 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0d8      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b01      	cmp	r3, #1
 800447c:	f040 80ce 	bne.w	800461c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004480:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a08      	ldr	r2, [pc, #32]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7fd f924 	bl	80016d8 <HAL_GetTick>
 8004490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004492:	e00b      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004494:	f7fd f920 	bl	80016d8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	@ 0x64
 80044a0:	d904      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0bb      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044b8:	d0ec      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d02e      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d12a      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e2:	4b51      	ldr	r3, [pc, #324]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	0f1b      	lsrs	r3, r3, #28
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	019a      	lsls	r2, r3, #6
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	071b      	lsls	r3, r3, #28
 8004516:	4944      	ldr	r1, [pc, #272]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800451e:	4b42      	ldr	r3, [pc, #264]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004524:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	493d      	ldr	r1, [pc, #244]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800454c:	d11d      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800454e:	4b36      	ldr	r3, [pc, #216]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004554:	0e1b      	lsrs	r3, r3, #24
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800455c:	4b32      	ldr	r3, [pc, #200]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	0f1b      	lsrs	r3, r3, #28
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	019a      	lsls	r2, r3, #6
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	041b      	lsls	r3, r3, #16
 8004576:	431a      	orrs	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	071b      	lsls	r3, r3, #28
 8004582:	4929      	ldr	r1, [pc, #164]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d028      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004596:	4b24      	ldr	r3, [pc, #144]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459c:	0e1b      	lsrs	r3, r3, #24
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045a4:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045aa:	0c1b      	lsrs	r3, r3, #16
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	019a      	lsls	r2, r3, #6
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	071b      	lsls	r3, r3, #28
 80045ca:	4917      	ldr	r1, [pc, #92]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	4911      	ldr	r1, [pc, #68]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f4:	f7fd f870 	bl	80016d8 <HAL_GetTick>
 80045f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045fc:	f7fd f86c 	bl	80016d8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e007      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800461a:	d1ef      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e01c      	b.n	8004678 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	795b      	ldrb	r3, [r3, #5]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fd9a 	bl	8001188 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0204 	orr.w	r2, r2, #4
 8004668:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e040      	b.n	8004714 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fe96 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	@ 0x24
 80046ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fb16 	bl	8004cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8af 	bl	8004830 <UART_SetConfig>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e01b      	b.n	8004714 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fb95 	bl	8004e3c <UART_CheckIdleState>
 8004712:	4603      	mov	r3, r0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	@ 0x28
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004730:	2b20      	cmp	r3, #32
 8004732:	d177      	bne.n	8004824 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Transmit+0x24>
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e070      	b.n	8004826 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2221      	movs	r2, #33	@ 0x21
 8004750:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004752:	f7fc ffc1 	bl	80016d8 <HAL_GetTick>
 8004756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004770:	d108      	bne.n	8004784 <HAL_UART_Transmit+0x68>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e003      	b.n	800478c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800478c:	e02f      	b.n	80047ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	@ 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fbf7 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e03b      	b.n	8004826 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	3302      	adds	r3, #2
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e007      	b.n	80047dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1c9      	bne.n	800478e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2140      	movs	r1, #64	@ 0x40
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fbc1 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e005      	b.n	8004826 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4ba6      	ldr	r3, [pc, #664]	@ (8004af4 <UART_SetConfig+0x2c4>)
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	430b      	orrs	r3, r1
 8004866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a94      	ldr	r2, [pc, #592]	@ (8004af8 <UART_SetConfig+0x2c8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d120      	bne.n	80048ee <UART_SetConfig+0xbe>
 80048ac:	4b93      	ldr	r3, [pc, #588]	@ (8004afc <UART_SetConfig+0x2cc>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d816      	bhi.n	80048e8 <UART_SetConfig+0xb8>
 80048ba:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0x90>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048d7 	.word	0x080048d7
 80048cc:	080048e3 	.word	0x080048e3
 80048d0:	2301      	movs	r3, #1
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e150      	b.n	8004b78 <UART_SetConfig+0x348>
 80048d6:	2302      	movs	r3, #2
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e14d      	b.n	8004b78 <UART_SetConfig+0x348>
 80048dc:	2304      	movs	r3, #4
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e14a      	b.n	8004b78 <UART_SetConfig+0x348>
 80048e2:	2308      	movs	r3, #8
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e147      	b.n	8004b78 <UART_SetConfig+0x348>
 80048e8:	2310      	movs	r3, #16
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e144      	b.n	8004b78 <UART_SetConfig+0x348>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a83      	ldr	r2, [pc, #524]	@ (8004b00 <UART_SetConfig+0x2d0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d132      	bne.n	800495e <UART_SetConfig+0x12e>
 80048f8:	4b80      	ldr	r3, [pc, #512]	@ (8004afc <UART_SetConfig+0x2cc>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d828      	bhi.n	8004958 <UART_SetConfig+0x128>
 8004906:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <UART_SetConfig+0xdc>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004941 	.word	0x08004941
 8004910:	08004959 	.word	0x08004959
 8004914:	08004959 	.word	0x08004959
 8004918:	08004959 	.word	0x08004959
 800491c:	0800494d 	.word	0x0800494d
 8004920:	08004959 	.word	0x08004959
 8004924:	08004959 	.word	0x08004959
 8004928:	08004959 	.word	0x08004959
 800492c:	08004947 	.word	0x08004947
 8004930:	08004959 	.word	0x08004959
 8004934:	08004959 	.word	0x08004959
 8004938:	08004959 	.word	0x08004959
 800493c:	08004953 	.word	0x08004953
 8004940:	2300      	movs	r3, #0
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e118      	b.n	8004b78 <UART_SetConfig+0x348>
 8004946:	2302      	movs	r3, #2
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e115      	b.n	8004b78 <UART_SetConfig+0x348>
 800494c:	2304      	movs	r3, #4
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e112      	b.n	8004b78 <UART_SetConfig+0x348>
 8004952:	2308      	movs	r3, #8
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e10f      	b.n	8004b78 <UART_SetConfig+0x348>
 8004958:	2310      	movs	r3, #16
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e10c      	b.n	8004b78 <UART_SetConfig+0x348>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a68      	ldr	r2, [pc, #416]	@ (8004b04 <UART_SetConfig+0x2d4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d120      	bne.n	80049aa <UART_SetConfig+0x17a>
 8004968:	4b64      	ldr	r3, [pc, #400]	@ (8004afc <UART_SetConfig+0x2cc>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004972:	2b30      	cmp	r3, #48	@ 0x30
 8004974:	d013      	beq.n	800499e <UART_SetConfig+0x16e>
 8004976:	2b30      	cmp	r3, #48	@ 0x30
 8004978:	d814      	bhi.n	80049a4 <UART_SetConfig+0x174>
 800497a:	2b20      	cmp	r3, #32
 800497c:	d009      	beq.n	8004992 <UART_SetConfig+0x162>
 800497e:	2b20      	cmp	r3, #32
 8004980:	d810      	bhi.n	80049a4 <UART_SetConfig+0x174>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <UART_SetConfig+0x15c>
 8004986:	2b10      	cmp	r3, #16
 8004988:	d006      	beq.n	8004998 <UART_SetConfig+0x168>
 800498a:	e00b      	b.n	80049a4 <UART_SetConfig+0x174>
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e0f2      	b.n	8004b78 <UART_SetConfig+0x348>
 8004992:	2302      	movs	r3, #2
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e0ef      	b.n	8004b78 <UART_SetConfig+0x348>
 8004998:	2304      	movs	r3, #4
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e0ec      	b.n	8004b78 <UART_SetConfig+0x348>
 800499e:	2308      	movs	r3, #8
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e0e9      	b.n	8004b78 <UART_SetConfig+0x348>
 80049a4:	2310      	movs	r3, #16
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e0e6      	b.n	8004b78 <UART_SetConfig+0x348>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a56      	ldr	r2, [pc, #344]	@ (8004b08 <UART_SetConfig+0x2d8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d120      	bne.n	80049f6 <UART_SetConfig+0x1c6>
 80049b4:	4b51      	ldr	r3, [pc, #324]	@ (8004afc <UART_SetConfig+0x2cc>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049be:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c0:	d013      	beq.n	80049ea <UART_SetConfig+0x1ba>
 80049c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c4:	d814      	bhi.n	80049f0 <UART_SetConfig+0x1c0>
 80049c6:	2b80      	cmp	r3, #128	@ 0x80
 80049c8:	d009      	beq.n	80049de <UART_SetConfig+0x1ae>
 80049ca:	2b80      	cmp	r3, #128	@ 0x80
 80049cc:	d810      	bhi.n	80049f0 <UART_SetConfig+0x1c0>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <UART_SetConfig+0x1a8>
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d006      	beq.n	80049e4 <UART_SetConfig+0x1b4>
 80049d6:	e00b      	b.n	80049f0 <UART_SetConfig+0x1c0>
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e0cc      	b.n	8004b78 <UART_SetConfig+0x348>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e0c9      	b.n	8004b78 <UART_SetConfig+0x348>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e0c6      	b.n	8004b78 <UART_SetConfig+0x348>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e0c3      	b.n	8004b78 <UART_SetConfig+0x348>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e0c0      	b.n	8004b78 <UART_SetConfig+0x348>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a44      	ldr	r2, [pc, #272]	@ (8004b0c <UART_SetConfig+0x2dc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d125      	bne.n	8004a4c <UART_SetConfig+0x21c>
 8004a00:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <UART_SetConfig+0x2cc>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a0e:	d017      	beq.n	8004a40 <UART_SetConfig+0x210>
 8004a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a14:	d817      	bhi.n	8004a46 <UART_SetConfig+0x216>
 8004a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a1a:	d00b      	beq.n	8004a34 <UART_SetConfig+0x204>
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a20:	d811      	bhi.n	8004a46 <UART_SetConfig+0x216>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <UART_SetConfig+0x1fe>
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a2a:	d006      	beq.n	8004a3a <UART_SetConfig+0x20a>
 8004a2c:	e00b      	b.n	8004a46 <UART_SetConfig+0x216>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e0a1      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a34:	2302      	movs	r3, #2
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e09e      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e09b      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a40:	2308      	movs	r3, #8
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e098      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a46:	2310      	movs	r3, #16
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e095      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2f      	ldr	r2, [pc, #188]	@ (8004b10 <UART_SetConfig+0x2e0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d125      	bne.n	8004aa2 <UART_SetConfig+0x272>
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <UART_SetConfig+0x2cc>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a64:	d017      	beq.n	8004a96 <UART_SetConfig+0x266>
 8004a66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a6a:	d817      	bhi.n	8004a9c <UART_SetConfig+0x26c>
 8004a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a70:	d00b      	beq.n	8004a8a <UART_SetConfig+0x25a>
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a76:	d811      	bhi.n	8004a9c <UART_SetConfig+0x26c>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <UART_SetConfig+0x254>
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a80:	d006      	beq.n	8004a90 <UART_SetConfig+0x260>
 8004a82:	e00b      	b.n	8004a9c <UART_SetConfig+0x26c>
 8004a84:	2301      	movs	r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e076      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e073      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a90:	2304      	movs	r3, #4
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e070      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a96:	2308      	movs	r3, #8
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e06d      	b.n	8004b78 <UART_SetConfig+0x348>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e06a      	b.n	8004b78 <UART_SetConfig+0x348>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b14 <UART_SetConfig+0x2e4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d138      	bne.n	8004b1e <UART_SetConfig+0x2ee>
 8004aac:	4b13      	ldr	r3, [pc, #76]	@ (8004afc <UART_SetConfig+0x2cc>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004aba:	d017      	beq.n	8004aec <UART_SetConfig+0x2bc>
 8004abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ac0:	d82a      	bhi.n	8004b18 <UART_SetConfig+0x2e8>
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac6:	d00b      	beq.n	8004ae0 <UART_SetConfig+0x2b0>
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004acc:	d824      	bhi.n	8004b18 <UART_SetConfig+0x2e8>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <UART_SetConfig+0x2aa>
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad6:	d006      	beq.n	8004ae6 <UART_SetConfig+0x2b6>
 8004ad8:	e01e      	b.n	8004b18 <UART_SetConfig+0x2e8>
 8004ada:	2300      	movs	r3, #0
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e04b      	b.n	8004b78 <UART_SetConfig+0x348>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e048      	b.n	8004b78 <UART_SetConfig+0x348>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e045      	b.n	8004b78 <UART_SetConfig+0x348>
 8004aec:	2308      	movs	r3, #8
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e042      	b.n	8004b78 <UART_SetConfig+0x348>
 8004af2:	bf00      	nop
 8004af4:	efff69f3 	.word	0xefff69f3
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40004400 	.word	0x40004400
 8004b04:	40004800 	.word	0x40004800
 8004b08:	40004c00 	.word	0x40004c00
 8004b0c:	40005000 	.word	0x40005000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	40007800 	.word	0x40007800
 8004b18:	2310      	movs	r3, #16
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e02c      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a72      	ldr	r2, [pc, #456]	@ (8004cec <UART_SetConfig+0x4bc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d125      	bne.n	8004b74 <UART_SetConfig+0x344>
 8004b28:	4b71      	ldr	r3, [pc, #452]	@ (8004cf0 <UART_SetConfig+0x4c0>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b36:	d017      	beq.n	8004b68 <UART_SetConfig+0x338>
 8004b38:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b3c:	d817      	bhi.n	8004b6e <UART_SetConfig+0x33e>
 8004b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b42:	d00b      	beq.n	8004b5c <UART_SetConfig+0x32c>
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b48:	d811      	bhi.n	8004b6e <UART_SetConfig+0x33e>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <UART_SetConfig+0x326>
 8004b4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b52:	d006      	beq.n	8004b62 <UART_SetConfig+0x332>
 8004b54:	e00b      	b.n	8004b6e <UART_SetConfig+0x33e>
 8004b56:	2300      	movs	r3, #0
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e00d      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e00a      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b62:	2304      	movs	r3, #4
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e007      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e004      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b6e:	2310      	movs	r3, #16
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e001      	b.n	8004b78 <UART_SetConfig+0x348>
 8004b74:	2310      	movs	r3, #16
 8004b76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b80:	d15b      	bne.n	8004c3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b82:	7ffb      	ldrb	r3, [r7, #31]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d828      	bhi.n	8004bda <UART_SetConfig+0x3aa>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <UART_SetConfig+0x360>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7ff f8ea 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61b8      	str	r0, [r7, #24]
        break;
 8004bba:	e013      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7ff f8fa 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	61b8      	str	r0, [r7, #24]
        break;
 8004bc2:	e00f      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf4 <UART_SetConfig+0x4c4>)
 8004bc6:	61bb      	str	r3, [r7, #24]
        break;
 8004bc8:	e00c      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe ffcd 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8004bce:	61b8      	str	r0, [r7, #24]
        break;
 8004bd0:	e008      	b.n	8004be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e004      	b.n	8004be4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77bb      	strb	r3, [r7, #30]
        break;
 8004be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d074      	beq.n	8004cd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	005a      	lsls	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d916      	bls.n	8004c34 <UART_SetConfig+0x404>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0c:	d212      	bcs.n	8004c34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f023 030f 	bic.w	r3, r3, #15
 8004c16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	89fa      	ldrh	r2, [r7, #14]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e04f      	b.n	8004cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	77bb      	strb	r3, [r7, #30]
 8004c38:	e04c      	b.n	8004cd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d828      	bhi.n	8004c92 <UART_SetConfig+0x462>
 8004c40:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <UART_SetConfig+0x418>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c7d 	.word	0x08004c7d
 8004c54:	08004c93 	.word	0x08004c93
 8004c58:	08004c83 	.word	0x08004c83
 8004c5c:	08004c93 	.word	0x08004c93
 8004c60:	08004c93 	.word	0x08004c93
 8004c64:	08004c93 	.word	0x08004c93
 8004c68:	08004c8b 	.word	0x08004c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f7ff f88e 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8004c70:	61b8      	str	r0, [r7, #24]
        break;
 8004c72:	e013      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c74:	f7ff f89e 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8004c78:	61b8      	str	r0, [r7, #24]
        break;
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <UART_SetConfig+0x4c4>)
 8004c7e:	61bb      	str	r3, [r7, #24]
        break;
 8004c80:	e00c      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c82:	f7fe ff71 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8004c86:	61b8      	str	r0, [r7, #24]
        break;
 8004c88:	e008      	b.n	8004c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8e:	61bb      	str	r3, [r7, #24]
        break;
 8004c90:	e004      	b.n	8004c9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	77bb      	strb	r3, [r7, #30]
        break;
 8004c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d018      	beq.n	8004cd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085a      	lsrs	r2, r3, #1
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	441a      	add	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b0f      	cmp	r3, #15
 8004cba:	d909      	bls.n	8004cd0 <UART_SetConfig+0x4a0>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc2:	d205      	bcs.n	8004cd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e001      	b.n	8004cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40007c00 	.word	0x40007c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	00f42400 	.word	0x00f42400

08004cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df6:	d10a      	bne.n	8004e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b098      	sub	sp, #96	@ 0x60
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e4c:	f7fc fc44 	bl	80016d8 <HAL_GetTick>
 8004e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d12e      	bne.n	8004ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f88c 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d021      	beq.n	8004ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e6      	bne.n	8004e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e062      	b.n	8004f84 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d149      	bne.n	8004f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f856 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d03c      	beq.n	8004f60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e6      	bne.n	8004ee6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3308      	adds	r3, #8
 8004f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f38:	61fa      	str	r2, [r7, #28]
 8004f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	617b      	str	r3, [r7, #20]
   return(result);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e5      	bne.n	8004f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e011      	b.n	8004f84 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3758      	adds	r7, #88	@ 0x58
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	e04f      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d04b      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa6:	f7fc fb97 	bl	80016d8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d302      	bcc.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e04e      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d037      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b80      	cmp	r3, #128	@ 0x80
 8004fd2:	d034      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b40      	cmp	r3, #64	@ 0x40
 8004fd8:	d031      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d110      	bne.n	800500a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2208      	movs	r2, #8
 8004fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f838 	bl	8005066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e029      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d111      	bne.n	800503e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f81e 	bl	8005066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e00f      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4013      	ands	r3, r2
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	429a      	cmp	r2, r3
 800505a:	d0a0      	beq.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005066:	b480      	push	{r7}
 8005068:	b095      	sub	sp, #84	@ 0x54
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508c:	643b      	str	r3, [r7, #64]	@ 0x40
 800508e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e6      	bne.n	800506e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e5      	bne.n	80050a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d118      	bne.n	800510e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	613b      	str	r3, [r7, #16]
   return(result);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e6      	bne.n	80050dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005122:	bf00      	nop
 8005124:	3754      	adds	r7, #84	@ 0x54
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005130:	b084      	sub	sp, #16
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	f107 001c 	add.w	r0, r7, #28
 800513e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005142:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005146:	2b01      	cmp	r3, #1
 8005148:	d121      	bne.n	800518e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <USB_CoreInit+0xb0>)
 800515c:	4013      	ands	r3, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800516e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005172:	2b01      	cmp	r3, #1
 8005174:	d105      	bne.n	8005182 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fa92 	bl	80056ac <USB_CoreReset>
 8005188:	4603      	mov	r3, r0
 800518a:	73fb      	strb	r3, [r7, #15]
 800518c:	e010      	b.n	80051b0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa86 	bl	80056ac <USB_CoreReset>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80051b0:	7fbb      	ldrb	r3, [r7, #30]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d10b      	bne.n	80051ce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f043 0206 	orr.w	r2, r3, #6
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051da:	b004      	add	sp, #16
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	ffbdffbf 	.word	0xffbdffbf

080051e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 0201 	bic.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d115      	bne.n	8005254 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005234:	200a      	movs	r0, #10
 8005236:	f7fc fa5b 	bl	80016f0 <HAL_Delay>
      ms += 10U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	330a      	adds	r3, #10
 800523e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fa25 	bl	8005690 <USB_GetMode>
 8005246:	4603      	mov	r3, r0
 8005248:	2b01      	cmp	r3, #1
 800524a:	d01e      	beq.n	800528a <USB_SetCurrentMode+0x84>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005250:	d9f0      	bls.n	8005234 <USB_SetCurrentMode+0x2e>
 8005252:	e01a      	b.n	800528a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d115      	bne.n	8005286 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005266:	200a      	movs	r0, #10
 8005268:	f7fc fa42 	bl	80016f0 <HAL_Delay>
      ms += 10U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	330a      	adds	r3, #10
 8005270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa0c 	bl	8005690 <USB_GetMode>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <USB_SetCurrentMode+0x84>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2bc7      	cmp	r3, #199	@ 0xc7
 8005282:	d9f0      	bls.n	8005266 <USB_SetCurrentMode+0x60>
 8005284:	e001      	b.n	800528a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e005      	b.n	8005296 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2bc8      	cmp	r3, #200	@ 0xc8
 800528e:	d101      	bne.n	8005294 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a0:	b084      	sub	sp, #16
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	e009      	b.n	80052d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3340      	adds	r3, #64	@ 0x40
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	2200      	movs	r2, #0
 80052cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3301      	adds	r3, #1
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0e      	cmp	r3, #14
 80052d8:	d9f2      	bls.n	80052c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d11c      	bne.n	800531c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052f0:	f043 0302 	orr.w	r3, r3, #2
 80052f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e005      	b.n	8005328 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800532e:	461a      	mov	r2, r3
 8005330:	2300      	movs	r3, #0
 8005332:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005334:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10d      	bne.n	8005358 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800533c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005344:	2100      	movs	r1, #0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f968 	bl	800561c <USB_SetDevSpeed>
 800534c:	e008      	b.n	8005360 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800534e:	2101      	movs	r1, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f963 	bl	800561c <USB_SetDevSpeed>
 8005356:	e003      	b.n	8005360 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005358:	2103      	movs	r1, #3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f95e 	bl	800561c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005360:	2110      	movs	r1, #16
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8fa 	bl	800555c <USB_FlushTxFifo>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f924 	bl	80055c0 <USB_FlushRxFifo>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005388:	461a      	mov	r2, r3
 800538a:	2300      	movs	r3, #0
 800538c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005394:	461a      	mov	r2, r3
 8005396:	2300      	movs	r3, #0
 8005398:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e043      	b.n	8005434 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053c2:	d118      	bne.n	80053f6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d6:	461a      	mov	r2, r3
 80053d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e013      	b.n	8005408 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ec:	461a      	mov	r2, r3
 80053ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e008      	b.n	8005408 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005402:	461a      	mov	r2, r3
 8005404:	2300      	movs	r3, #0
 8005406:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005426:	461a      	mov	r2, r3
 8005428:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800542c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	3301      	adds	r3, #1
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005438:	461a      	mov	r2, r3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4293      	cmp	r3, r2
 800543e:	d3b5      	bcc.n	80053ac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e043      	b.n	80054ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800545c:	d118      	bne.n	8005490 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005470:	461a      	mov	r2, r3
 8005472:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e013      	b.n	80054a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	461a      	mov	r2, r3
 8005488:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e008      	b.n	80054a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	3301      	adds	r3, #1
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054d2:	461a      	mov	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d3b5      	bcc.n	8005446 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80054fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f043 0210 	orr.w	r2, r3, #16
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <USB_DevInit+0x2b4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800551c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f043 0208 	orr.w	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005530:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005534:	2b01      	cmp	r3, #1
 8005536:	d105      	bne.n	8005544 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <USB_DevInit+0x2b8>)
 800553e:	4313      	orrs	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005544:	7dfb      	ldrb	r3, [r7, #23]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005550:	b004      	add	sp, #16
 8005552:	4770      	bx	lr
 8005554:	803c3800 	.word	0x803c3800
 8005558:	40000004 	.word	0x40000004

0800555c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005576:	d901      	bls.n	800557c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e01b      	b.n	80055b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	daf2      	bge.n	800556a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	019b      	lsls	r3, r3, #6
 800558c:	f043 0220 	orr.w	r2, r3, #32
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3301      	adds	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055a0:	d901      	bls.n	80055a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e006      	b.n	80055b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d0f0      	beq.n	8005594 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3301      	adds	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055d8:	d901      	bls.n	80055de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e018      	b.n	8005610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	daf2      	bge.n	80055cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2210      	movs	r2, #16
 80055ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055fc:	d901      	bls.n	8005602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e006      	b.n	8005610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d0f0      	beq.n	80055f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005668:	f023 0303 	bic.w	r3, r3, #3
 800566c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0301 	and.w	r3, r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056c4:	d901      	bls.n	80056ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e022      	b.n	8005710 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	daf2      	bge.n	80056b8 <USB_CoreReset+0xc>

  count = 10U;
 80056d2:	230a      	movs	r3, #10
 80056d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80056d6:	e002      	b.n	80056de <USB_CoreReset+0x32>
  {
    count--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3b01      	subs	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f9      	bne.n	80056d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f043 0201 	orr.w	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056fc:	d901      	bls.n	8005702 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e006      	b.n	8005710 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d0f0      	beq.n	80056f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <sniprintf>:
 800571c:	b40c      	push	{r2, r3}
 800571e:	b530      	push	{r4, r5, lr}
 8005720:	4b18      	ldr	r3, [pc, #96]	@ (8005784 <sniprintf+0x68>)
 8005722:	1e0c      	subs	r4, r1, #0
 8005724:	681d      	ldr	r5, [r3, #0]
 8005726:	b09d      	sub	sp, #116	@ 0x74
 8005728:	da08      	bge.n	800573c <sniprintf+0x20>
 800572a:	238b      	movs	r3, #139	@ 0x8b
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	b01d      	add	sp, #116	@ 0x74
 8005734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005738:	b002      	add	sp, #8
 800573a:	4770      	bx	lr
 800573c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005740:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	931b      	str	r3, [sp, #108]	@ 0x6c
 800574a:	bf14      	ite	ne
 800574c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005750:	4623      	moveq	r3, r4
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	9307      	str	r3, [sp, #28]
 8005756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800575a:	9002      	str	r0, [sp, #8]
 800575c:	9006      	str	r0, [sp, #24]
 800575e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005762:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005764:	ab21      	add	r3, sp, #132	@ 0x84
 8005766:	a902      	add	r1, sp, #8
 8005768:	4628      	mov	r0, r5
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	f000 f994 	bl	8005a98 <_svfiprintf_r>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	bfbc      	itt	lt
 8005774:	238b      	movlt	r3, #139	@ 0x8b
 8005776:	602b      	strlt	r3, [r5, #0]
 8005778:	2c00      	cmp	r4, #0
 800577a:	d0da      	beq.n	8005732 <sniprintf+0x16>
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e7d6      	b.n	8005732 <sniprintf+0x16>
 8005784:	20000010 	.word	0x20000010

08005788 <memset>:
 8005788:	4402      	add	r2, r0
 800578a:	4603      	mov	r3, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <memset+0xa>
 8005790:	4770      	bx	lr
 8005792:	f803 1b01 	strb.w	r1, [r3], #1
 8005796:	e7f9      	b.n	800578c <memset+0x4>

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	@ (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000010 	.word	0x20000010

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	@ (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	@ (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	@ (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	@ (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 fc64 	bl	8006084 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	0800610c 	.word	0x0800610c
 80057e0:	0800610c 	.word	0x0800610c
 80057e4:	0800610c 	.word	0x0800610c
 80057e8:	08006110 	.word	0x08006110

080057ec <__retarget_lock_acquire_recursive>:
 80057ec:	4770      	bx	lr

080057ee <__retarget_lock_release_recursive>:
 80057ee:	4770      	bx	lr

080057f0 <_free_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d041      	beq.n	800587c <_free_r+0x8c>
 80057f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fc:	1f0c      	subs	r4, r1, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfb8      	it	lt
 8005802:	18e4      	addlt	r4, r4, r3
 8005804:	f000 f8e0 	bl	80059c8 <__malloc_lock>
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <_free_r+0x90>)
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	b933      	cbnz	r3, 800581c <_free_r+0x2c>
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	6014      	str	r4, [r2, #0]
 8005812:	4628      	mov	r0, r5
 8005814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005818:	f000 b8dc 	b.w	80059d4 <__malloc_unlock>
 800581c:	42a3      	cmp	r3, r4
 800581e:	d908      	bls.n	8005832 <_free_r+0x42>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	1821      	adds	r1, r4, r0
 8005824:	428b      	cmp	r3, r1
 8005826:	bf01      	itttt	eq
 8005828:	6819      	ldreq	r1, [r3, #0]
 800582a:	685b      	ldreq	r3, [r3, #4]
 800582c:	1809      	addeq	r1, r1, r0
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	e7ed      	b.n	800580e <_free_r+0x1e>
 8005832:	461a      	mov	r2, r3
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	b10b      	cbz	r3, 800583c <_free_r+0x4c>
 8005838:	42a3      	cmp	r3, r4
 800583a:	d9fa      	bls.n	8005832 <_free_r+0x42>
 800583c:	6811      	ldr	r1, [r2, #0]
 800583e:	1850      	adds	r0, r2, r1
 8005840:	42a0      	cmp	r0, r4
 8005842:	d10b      	bne.n	800585c <_free_r+0x6c>
 8005844:	6820      	ldr	r0, [r4, #0]
 8005846:	4401      	add	r1, r0
 8005848:	1850      	adds	r0, r2, r1
 800584a:	4283      	cmp	r3, r0
 800584c:	6011      	str	r1, [r2, #0]
 800584e:	d1e0      	bne.n	8005812 <_free_r+0x22>
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	6053      	str	r3, [r2, #4]
 8005856:	4408      	add	r0, r1
 8005858:	6010      	str	r0, [r2, #0]
 800585a:	e7da      	b.n	8005812 <_free_r+0x22>
 800585c:	d902      	bls.n	8005864 <_free_r+0x74>
 800585e:	230c      	movs	r3, #12
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	e7d6      	b.n	8005812 <_free_r+0x22>
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	1821      	adds	r1, r4, r0
 8005868:	428b      	cmp	r3, r1
 800586a:	bf04      	itt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	bf04      	itt	eq
 8005874:	1809      	addeq	r1, r1, r0
 8005876:	6021      	streq	r1, [r4, #0]
 8005878:	6054      	str	r4, [r2, #4]
 800587a:	e7ca      	b.n	8005812 <_free_r+0x22>
 800587c:	bd38      	pop	{r3, r4, r5, pc}
 800587e:	bf00      	nop
 8005880:	20000a70 	.word	0x20000a70

08005884 <sbrk_aligned>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4e0f      	ldr	r6, [pc, #60]	@ (80058c4 <sbrk_aligned+0x40>)
 8005888:	460c      	mov	r4, r1
 800588a:	6831      	ldr	r1, [r6, #0]
 800588c:	4605      	mov	r5, r0
 800588e:	b911      	cbnz	r1, 8005896 <sbrk_aligned+0x12>
 8005890:	f000 fba4 	bl	8005fdc <_sbrk_r>
 8005894:	6030      	str	r0, [r6, #0]
 8005896:	4621      	mov	r1, r4
 8005898:	4628      	mov	r0, r5
 800589a:	f000 fb9f 	bl	8005fdc <_sbrk_r>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d103      	bne.n	80058aa <sbrk_aligned+0x26>
 80058a2:	f04f 34ff 	mov.w	r4, #4294967295
 80058a6:	4620      	mov	r0, r4
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	1cc4      	adds	r4, r0, #3
 80058ac:	f024 0403 	bic.w	r4, r4, #3
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d0f8      	beq.n	80058a6 <sbrk_aligned+0x22>
 80058b4:	1a21      	subs	r1, r4, r0
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 fb90 	bl	8005fdc <_sbrk_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d1f2      	bne.n	80058a6 <sbrk_aligned+0x22>
 80058c0:	e7ef      	b.n	80058a2 <sbrk_aligned+0x1e>
 80058c2:	bf00      	nop
 80058c4:	20000a6c 	.word	0x20000a6c

080058c8 <_malloc_r>:
 80058c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058cc:	1ccd      	adds	r5, r1, #3
 80058ce:	f025 0503 	bic.w	r5, r5, #3
 80058d2:	3508      	adds	r5, #8
 80058d4:	2d0c      	cmp	r5, #12
 80058d6:	bf38      	it	cc
 80058d8:	250c      	movcc	r5, #12
 80058da:	2d00      	cmp	r5, #0
 80058dc:	4606      	mov	r6, r0
 80058de:	db01      	blt.n	80058e4 <_malloc_r+0x1c>
 80058e0:	42a9      	cmp	r1, r5
 80058e2:	d904      	bls.n	80058ee <_malloc_r+0x26>
 80058e4:	230c      	movs	r3, #12
 80058e6:	6033      	str	r3, [r6, #0]
 80058e8:	2000      	movs	r0, #0
 80058ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059c4 <_malloc_r+0xfc>
 80058f2:	f000 f869 	bl	80059c8 <__malloc_lock>
 80058f6:	f8d8 3000 	ldr.w	r3, [r8]
 80058fa:	461c      	mov	r4, r3
 80058fc:	bb44      	cbnz	r4, 8005950 <_malloc_r+0x88>
 80058fe:	4629      	mov	r1, r5
 8005900:	4630      	mov	r0, r6
 8005902:	f7ff ffbf 	bl	8005884 <sbrk_aligned>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	4604      	mov	r4, r0
 800590a:	d158      	bne.n	80059be <_malloc_r+0xf6>
 800590c:	f8d8 4000 	ldr.w	r4, [r8]
 8005910:	4627      	mov	r7, r4
 8005912:	2f00      	cmp	r7, #0
 8005914:	d143      	bne.n	800599e <_malloc_r+0xd6>
 8005916:	2c00      	cmp	r4, #0
 8005918:	d04b      	beq.n	80059b2 <_malloc_r+0xea>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	4639      	mov	r1, r7
 800591e:	4630      	mov	r0, r6
 8005920:	eb04 0903 	add.w	r9, r4, r3
 8005924:	f000 fb5a 	bl	8005fdc <_sbrk_r>
 8005928:	4581      	cmp	r9, r0
 800592a:	d142      	bne.n	80059b2 <_malloc_r+0xea>
 800592c:	6821      	ldr	r1, [r4, #0]
 800592e:	1a6d      	subs	r5, r5, r1
 8005930:	4629      	mov	r1, r5
 8005932:	4630      	mov	r0, r6
 8005934:	f7ff ffa6 	bl	8005884 <sbrk_aligned>
 8005938:	3001      	adds	r0, #1
 800593a:	d03a      	beq.n	80059b2 <_malloc_r+0xea>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	442b      	add	r3, r5
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	f8d8 3000 	ldr.w	r3, [r8]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	bb62      	cbnz	r2, 80059a4 <_malloc_r+0xdc>
 800594a:	f8c8 7000 	str.w	r7, [r8]
 800594e:	e00f      	b.n	8005970 <_malloc_r+0xa8>
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	1b52      	subs	r2, r2, r5
 8005954:	d420      	bmi.n	8005998 <_malloc_r+0xd0>
 8005956:	2a0b      	cmp	r2, #11
 8005958:	d917      	bls.n	800598a <_malloc_r+0xc2>
 800595a:	1961      	adds	r1, r4, r5
 800595c:	42a3      	cmp	r3, r4
 800595e:	6025      	str	r5, [r4, #0]
 8005960:	bf18      	it	ne
 8005962:	6059      	strne	r1, [r3, #4]
 8005964:	6863      	ldr	r3, [r4, #4]
 8005966:	bf08      	it	eq
 8005968:	f8c8 1000 	streq.w	r1, [r8]
 800596c:	5162      	str	r2, [r4, r5]
 800596e:	604b      	str	r3, [r1, #4]
 8005970:	4630      	mov	r0, r6
 8005972:	f000 f82f 	bl	80059d4 <__malloc_unlock>
 8005976:	f104 000b 	add.w	r0, r4, #11
 800597a:	1d23      	adds	r3, r4, #4
 800597c:	f020 0007 	bic.w	r0, r0, #7
 8005980:	1ac2      	subs	r2, r0, r3
 8005982:	bf1c      	itt	ne
 8005984:	1a1b      	subne	r3, r3, r0
 8005986:	50a3      	strne	r3, [r4, r2]
 8005988:	e7af      	b.n	80058ea <_malloc_r+0x22>
 800598a:	6862      	ldr	r2, [r4, #4]
 800598c:	42a3      	cmp	r3, r4
 800598e:	bf0c      	ite	eq
 8005990:	f8c8 2000 	streq.w	r2, [r8]
 8005994:	605a      	strne	r2, [r3, #4]
 8005996:	e7eb      	b.n	8005970 <_malloc_r+0xa8>
 8005998:	4623      	mov	r3, r4
 800599a:	6864      	ldr	r4, [r4, #4]
 800599c:	e7ae      	b.n	80058fc <_malloc_r+0x34>
 800599e:	463c      	mov	r4, r7
 80059a0:	687f      	ldr	r7, [r7, #4]
 80059a2:	e7b6      	b.n	8005912 <_malloc_r+0x4a>
 80059a4:	461a      	mov	r2, r3
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d1fb      	bne.n	80059a4 <_malloc_r+0xdc>
 80059ac:	2300      	movs	r3, #0
 80059ae:	6053      	str	r3, [r2, #4]
 80059b0:	e7de      	b.n	8005970 <_malloc_r+0xa8>
 80059b2:	230c      	movs	r3, #12
 80059b4:	6033      	str	r3, [r6, #0]
 80059b6:	4630      	mov	r0, r6
 80059b8:	f000 f80c 	bl	80059d4 <__malloc_unlock>
 80059bc:	e794      	b.n	80058e8 <_malloc_r+0x20>
 80059be:	6005      	str	r5, [r0, #0]
 80059c0:	e7d6      	b.n	8005970 <_malloc_r+0xa8>
 80059c2:	bf00      	nop
 80059c4:	20000a70 	.word	0x20000a70

080059c8 <__malloc_lock>:
 80059c8:	4801      	ldr	r0, [pc, #4]	@ (80059d0 <__malloc_lock+0x8>)
 80059ca:	f7ff bf0f 	b.w	80057ec <__retarget_lock_acquire_recursive>
 80059ce:	bf00      	nop
 80059d0:	20000a68 	.word	0x20000a68

080059d4 <__malloc_unlock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	@ (80059dc <__malloc_unlock+0x8>)
 80059d6:	f7ff bf0a 	b.w	80057ee <__retarget_lock_release_recursive>
 80059da:	bf00      	nop
 80059dc:	20000a68 	.word	0x20000a68

080059e0 <__ssputs_r>:
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	688e      	ldr	r6, [r1, #8]
 80059e6:	461f      	mov	r7, r3
 80059e8:	42be      	cmp	r6, r7
 80059ea:	680b      	ldr	r3, [r1, #0]
 80059ec:	4682      	mov	sl, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	4690      	mov	r8, r2
 80059f2:	d82d      	bhi.n	8005a50 <__ssputs_r+0x70>
 80059f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059fc:	d026      	beq.n	8005a4c <__ssputs_r+0x6c>
 80059fe:	6965      	ldr	r5, [r4, #20]
 8005a00:	6909      	ldr	r1, [r1, #16]
 8005a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a06:	eba3 0901 	sub.w	r9, r3, r1
 8005a0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a0e:	1c7b      	adds	r3, r7, #1
 8005a10:	444b      	add	r3, r9
 8005a12:	106d      	asrs	r5, r5, #1
 8005a14:	429d      	cmp	r5, r3
 8005a16:	bf38      	it	cc
 8005a18:	461d      	movcc	r5, r3
 8005a1a:	0553      	lsls	r3, r2, #21
 8005a1c:	d527      	bpl.n	8005a6e <__ssputs_r+0x8e>
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f7ff ff52 	bl	80058c8 <_malloc_r>
 8005a24:	4606      	mov	r6, r0
 8005a26:	b360      	cbz	r0, 8005a82 <__ssputs_r+0xa2>
 8005a28:	6921      	ldr	r1, [r4, #16]
 8005a2a:	464a      	mov	r2, r9
 8005a2c:	f000 fae6 	bl	8005ffc <memcpy>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a3a:	81a3      	strh	r3, [r4, #12]
 8005a3c:	6126      	str	r6, [r4, #16]
 8005a3e:	6165      	str	r5, [r4, #20]
 8005a40:	444e      	add	r6, r9
 8005a42:	eba5 0509 	sub.w	r5, r5, r9
 8005a46:	6026      	str	r6, [r4, #0]
 8005a48:	60a5      	str	r5, [r4, #8]
 8005a4a:	463e      	mov	r6, r7
 8005a4c:	42be      	cmp	r6, r7
 8005a4e:	d900      	bls.n	8005a52 <__ssputs_r+0x72>
 8005a50:	463e      	mov	r6, r7
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	4632      	mov	r2, r6
 8005a56:	4641      	mov	r1, r8
 8005a58:	f000 faa6 	bl	8005fa8 <memmove>
 8005a5c:	68a3      	ldr	r3, [r4, #8]
 8005a5e:	1b9b      	subs	r3, r3, r6
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	4433      	add	r3, r6
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	462a      	mov	r2, r5
 8005a70:	f000 fad2 	bl	8006018 <_realloc_r>
 8005a74:	4606      	mov	r6, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1e0      	bne.n	8005a3c <__ssputs_r+0x5c>
 8005a7a:	6921      	ldr	r1, [r4, #16]
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	f7ff feb7 	bl	80057f0 <_free_r>
 8005a82:	230c      	movs	r3, #12
 8005a84:	f8ca 3000 	str.w	r3, [sl]
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	e7e9      	b.n	8005a6a <__ssputs_r+0x8a>
	...

08005a98 <_svfiprintf_r>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	4698      	mov	r8, r3
 8005a9e:	898b      	ldrh	r3, [r1, #12]
 8005aa0:	061b      	lsls	r3, r3, #24
 8005aa2:	b09d      	sub	sp, #116	@ 0x74
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	d510      	bpl.n	8005ace <_svfiprintf_r+0x36>
 8005aac:	690b      	ldr	r3, [r1, #16]
 8005aae:	b973      	cbnz	r3, 8005ace <_svfiprintf_r+0x36>
 8005ab0:	2140      	movs	r1, #64	@ 0x40
 8005ab2:	f7ff ff09 	bl	80058c8 <_malloc_r>
 8005ab6:	6028      	str	r0, [r5, #0]
 8005ab8:	6128      	str	r0, [r5, #16]
 8005aba:	b930      	cbnz	r0, 8005aca <_svfiprintf_r+0x32>
 8005abc:	230c      	movs	r3, #12
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	b01d      	add	sp, #116	@ 0x74
 8005ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aca:	2340      	movs	r3, #64	@ 0x40
 8005acc:	616b      	str	r3, [r5, #20]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005adc:	2330      	movs	r3, #48	@ 0x30
 8005ade:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c7c <_svfiprintf_r+0x1e4>
 8005ae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ae6:	f04f 0901 	mov.w	r9, #1
 8005aea:	4623      	mov	r3, r4
 8005aec:	469a      	mov	sl, r3
 8005aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005af2:	b10a      	cbz	r2, 8005af8 <_svfiprintf_r+0x60>
 8005af4:	2a25      	cmp	r2, #37	@ 0x25
 8005af6:	d1f9      	bne.n	8005aec <_svfiprintf_r+0x54>
 8005af8:	ebba 0b04 	subs.w	fp, sl, r4
 8005afc:	d00b      	beq.n	8005b16 <_svfiprintf_r+0x7e>
 8005afe:	465b      	mov	r3, fp
 8005b00:	4622      	mov	r2, r4
 8005b02:	4629      	mov	r1, r5
 8005b04:	4638      	mov	r0, r7
 8005b06:	f7ff ff6b 	bl	80059e0 <__ssputs_r>
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f000 80a7 	beq.w	8005c5e <_svfiprintf_r+0x1c6>
 8005b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b12:	445a      	add	r2, fp
 8005b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b16:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 809f 	beq.w	8005c5e <_svfiprintf_r+0x1c6>
 8005b20:	2300      	movs	r3, #0
 8005b22:	f04f 32ff 	mov.w	r2, #4294967295
 8005b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b2a:	f10a 0a01 	add.w	sl, sl, #1
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	9307      	str	r3, [sp, #28]
 8005b32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b38:	4654      	mov	r4, sl
 8005b3a:	2205      	movs	r2, #5
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	484e      	ldr	r0, [pc, #312]	@ (8005c7c <_svfiprintf_r+0x1e4>)
 8005b42:	f7fa fb7d 	bl	8000240 <memchr>
 8005b46:	9a04      	ldr	r2, [sp, #16]
 8005b48:	b9d8      	cbnz	r0, 8005b82 <_svfiprintf_r+0xea>
 8005b4a:	06d0      	lsls	r0, r2, #27
 8005b4c:	bf44      	itt	mi
 8005b4e:	2320      	movmi	r3, #32
 8005b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b54:	0711      	lsls	r1, r2, #28
 8005b56:	bf44      	itt	mi
 8005b58:	232b      	movmi	r3, #43	@ 0x2b
 8005b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b64:	d015      	beq.n	8005b92 <_svfiprintf_r+0xfa>
 8005b66:	9a07      	ldr	r2, [sp, #28]
 8005b68:	4654      	mov	r4, sl
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f04f 0c0a 	mov.w	ip, #10
 8005b70:	4621      	mov	r1, r4
 8005b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b76:	3b30      	subs	r3, #48	@ 0x30
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d94b      	bls.n	8005c14 <_svfiprintf_r+0x17c>
 8005b7c:	b1b0      	cbz	r0, 8005bac <_svfiprintf_r+0x114>
 8005b7e:	9207      	str	r2, [sp, #28]
 8005b80:	e014      	b.n	8005bac <_svfiprintf_r+0x114>
 8005b82:	eba0 0308 	sub.w	r3, r0, r8
 8005b86:	fa09 f303 	lsl.w	r3, r9, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	46a2      	mov	sl, r4
 8005b90:	e7d2      	b.n	8005b38 <_svfiprintf_r+0xa0>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	1d19      	adds	r1, r3, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	9103      	str	r1, [sp, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bfbb      	ittet	lt
 8005b9e:	425b      	neglt	r3, r3
 8005ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ba4:	9307      	strge	r3, [sp, #28]
 8005ba6:	9307      	strlt	r3, [sp, #28]
 8005ba8:	bfb8      	it	lt
 8005baa:	9204      	strlt	r2, [sp, #16]
 8005bac:	7823      	ldrb	r3, [r4, #0]
 8005bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bb0:	d10a      	bne.n	8005bc8 <_svfiprintf_r+0x130>
 8005bb2:	7863      	ldrb	r3, [r4, #1]
 8005bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bb6:	d132      	bne.n	8005c1e <_svfiprintf_r+0x186>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	9203      	str	r2, [sp, #12]
 8005bc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bc4:	3402      	adds	r4, #2
 8005bc6:	9305      	str	r3, [sp, #20]
 8005bc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c8c <_svfiprintf_r+0x1f4>
 8005bcc:	7821      	ldrb	r1, [r4, #0]
 8005bce:	2203      	movs	r2, #3
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	f7fa fb35 	bl	8000240 <memchr>
 8005bd6:	b138      	cbz	r0, 8005be8 <_svfiprintf_r+0x150>
 8005bd8:	9b04      	ldr	r3, [sp, #16]
 8005bda:	eba0 000a 	sub.w	r0, r0, sl
 8005bde:	2240      	movs	r2, #64	@ 0x40
 8005be0:	4082      	lsls	r2, r0
 8005be2:	4313      	orrs	r3, r2
 8005be4:	3401      	adds	r4, #1
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bec:	4824      	ldr	r0, [pc, #144]	@ (8005c80 <_svfiprintf_r+0x1e8>)
 8005bee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bf2:	2206      	movs	r2, #6
 8005bf4:	f7fa fb24 	bl	8000240 <memchr>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d036      	beq.n	8005c6a <_svfiprintf_r+0x1d2>
 8005bfc:	4b21      	ldr	r3, [pc, #132]	@ (8005c84 <_svfiprintf_r+0x1ec>)
 8005bfe:	bb1b      	cbnz	r3, 8005c48 <_svfiprintf_r+0x1b0>
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	3307      	adds	r3, #7
 8005c04:	f023 0307 	bic.w	r3, r3, #7
 8005c08:	3308      	adds	r3, #8
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c0e:	4433      	add	r3, r6
 8005c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c12:	e76a      	b.n	8005aea <_svfiprintf_r+0x52>
 8005c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c18:	460c      	mov	r4, r1
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	e7a8      	b.n	8005b70 <_svfiprintf_r+0xd8>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	3401      	adds	r4, #1
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	4619      	mov	r1, r3
 8005c26:	f04f 0c0a 	mov.w	ip, #10
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c30:	3a30      	subs	r2, #48	@ 0x30
 8005c32:	2a09      	cmp	r2, #9
 8005c34:	d903      	bls.n	8005c3e <_svfiprintf_r+0x1a6>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0c6      	beq.n	8005bc8 <_svfiprintf_r+0x130>
 8005c3a:	9105      	str	r1, [sp, #20]
 8005c3c:	e7c4      	b.n	8005bc8 <_svfiprintf_r+0x130>
 8005c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c42:	4604      	mov	r4, r0
 8005c44:	2301      	movs	r3, #1
 8005c46:	e7f0      	b.n	8005c2a <_svfiprintf_r+0x192>
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <_svfiprintf_r+0x1f0>)
 8005c50:	a904      	add	r1, sp, #16
 8005c52:	4638      	mov	r0, r7
 8005c54:	f3af 8000 	nop.w
 8005c58:	1c42      	adds	r2, r0, #1
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	d1d6      	bne.n	8005c0c <_svfiprintf_r+0x174>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	065b      	lsls	r3, r3, #25
 8005c62:	f53f af2d 	bmi.w	8005ac0 <_svfiprintf_r+0x28>
 8005c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c68:	e72c      	b.n	8005ac4 <_svfiprintf_r+0x2c>
 8005c6a:	ab03      	add	r3, sp, #12
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <_svfiprintf_r+0x1f0>)
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	4638      	mov	r0, r7
 8005c76:	f000 f879 	bl	8005d6c <_printf_i>
 8005c7a:	e7ed      	b.n	8005c58 <_svfiprintf_r+0x1c0>
 8005c7c:	080060d0 	.word	0x080060d0
 8005c80:	080060da 	.word	0x080060da
 8005c84:	00000000 	.word	0x00000000
 8005c88:	080059e1 	.word	0x080059e1
 8005c8c:	080060d6 	.word	0x080060d6

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	4698      	mov	r8, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfb8      	it	lt
 8005ca4:	4613      	movlt	r3, r2
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_printf_common+0x26>
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	0699      	lsls	r1, r3, #26
 8005cba:	bf42      	ittt	mi
 8005cbc:	6833      	ldrmi	r3, [r6, #0]
 8005cbe:	3302      	addmi	r3, #2
 8005cc0:	6033      	strmi	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	f015 0506 	ands.w	r5, r5, #6
 8005cc8:	d106      	bne.n	8005cd8 <_printf_common+0x48>
 8005cca:	f104 0a19 	add.w	sl, r4, #25
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	6832      	ldr	r2, [r6, #0]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dc26      	bgt.n	8005d26 <_printf_common+0x96>
 8005cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	3b00      	subs	r3, #0
 8005ce0:	bf18      	it	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	0692      	lsls	r2, r2, #26
 8005ce6:	d42b      	bmi.n	8005d40 <_printf_common+0xb0>
 8005ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cec:	4641      	mov	r1, r8
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c8      	blx	r9
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d01e      	beq.n	8005d34 <_printf_common+0xa4>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	bf02      	ittt	eq
 8005d02:	68e5      	ldreq	r5, [r4, #12]
 8005d04:	6833      	ldreq	r3, [r6, #0]
 8005d06:	1aed      	subeq	r5, r5, r3
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	bf0c      	ite	eq
 8005d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d10:	2500      	movne	r5, #0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bfc4      	itt	gt
 8005d16:	1a9b      	subgt	r3, r3, r2
 8005d18:	18ed      	addgt	r5, r5, r3
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	341a      	adds	r4, #26
 8005d1e:	42b5      	cmp	r5, r6
 8005d20:	d11a      	bne.n	8005d58 <_printf_common+0xc8>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e008      	b.n	8005d38 <_printf_common+0xa8>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	47c8      	blx	r9
 8005d30:	3001      	adds	r0, #1
 8005d32:	d103      	bne.n	8005d3c <_printf_common+0xac>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	e7c6      	b.n	8005cce <_printf_common+0x3e>
 8005d40:	18e1      	adds	r1, r4, r3
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	2030      	movs	r0, #48	@ 0x30
 8005d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d4a:	4422      	add	r2, r4
 8005d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d54:	3302      	adds	r3, #2
 8005d56:	e7c7      	b.n	8005ce8 <_printf_common+0x58>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c8      	blx	r9
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0e6      	beq.n	8005d34 <_printf_common+0xa4>
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7d9      	b.n	8005d1e <_printf_common+0x8e>
	...

08005d6c <_printf_i>:
 8005d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	7e0f      	ldrb	r7, [r1, #24]
 8005d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d74:	2f78      	cmp	r7, #120	@ 0x78
 8005d76:	4691      	mov	r9, r2
 8005d78:	4680      	mov	r8, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d82:	d807      	bhi.n	8005d94 <_printf_i+0x28>
 8005d84:	2f62      	cmp	r7, #98	@ 0x62
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x32>
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f000 80d1 	beq.w	8005f30 <_printf_i+0x1c4>
 8005d8e:	2f58      	cmp	r7, #88	@ 0x58
 8005d90:	f000 80b8 	beq.w	8005f04 <_printf_i+0x198>
 8005d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d9c:	e03a      	b.n	8005e14 <_printf_i+0xa8>
 8005d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005da2:	2b15      	cmp	r3, #21
 8005da4:	d8f6      	bhi.n	8005d94 <_printf_i+0x28>
 8005da6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dac <_printf_i+0x40>)
 8005da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005d95 	.word	0x08005d95
 8005db8:	08005d95 	.word	0x08005d95
 8005dbc:	08005d95 	.word	0x08005d95
 8005dc0:	08005d95 	.word	0x08005d95
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005d95 	.word	0x08005d95
 8005dcc:	08005d95 	.word	0x08005d95
 8005dd0:	08005d95 	.word	0x08005d95
 8005dd4:	08005d95 	.word	0x08005d95
 8005dd8:	08005f17 	.word	0x08005f17
 8005ddc:	08005e43 	.word	0x08005e43
 8005de0:	08005ed1 	.word	0x08005ed1
 8005de4:	08005d95 	.word	0x08005d95
 8005de8:	08005d95 	.word	0x08005d95
 8005dec:	08005f39 	.word	0x08005f39
 8005df0:	08005d95 	.word	0x08005d95
 8005df4:	08005e43 	.word	0x08005e43
 8005df8:	08005d95 	.word	0x08005d95
 8005dfc:	08005d95 	.word	0x08005d95
 8005e00:	08005ed9 	.word	0x08005ed9
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6032      	str	r2, [r6, #0]
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e14:	2301      	movs	r3, #1
 8005e16:	e09c      	b.n	8005f52 <_printf_i+0x1e6>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	6031      	str	r1, [r6, #0]
 8005e20:	0606      	lsls	r6, r0, #24
 8005e22:	d501      	bpl.n	8005e28 <_printf_i+0xbc>
 8005e24:	681d      	ldr	r5, [r3, #0]
 8005e26:	e003      	b.n	8005e30 <_printf_i+0xc4>
 8005e28:	0645      	lsls	r5, r0, #25
 8005e2a:	d5fb      	bpl.n	8005e24 <_printf_i+0xb8>
 8005e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	da03      	bge.n	8005e3c <_printf_i+0xd0>
 8005e34:	232d      	movs	r3, #45	@ 0x2d
 8005e36:	426d      	negs	r5, r5
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e3c:	4858      	ldr	r0, [pc, #352]	@ (8005fa0 <_printf_i+0x234>)
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e011      	b.n	8005e66 <_printf_i+0xfa>
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	0608      	lsls	r0, r1, #24
 8005e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e4c:	d402      	bmi.n	8005e54 <_printf_i+0xe8>
 8005e4e:	0649      	lsls	r1, r1, #25
 8005e50:	bf48      	it	mi
 8005e52:	b2ad      	uxthmi	r5, r5
 8005e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e56:	4852      	ldr	r0, [pc, #328]	@ (8005fa0 <_printf_i+0x234>)
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	bf14      	ite	ne
 8005e5c:	230a      	movne	r3, #10
 8005e5e:	2308      	moveq	r3, #8
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e66:	6866      	ldr	r6, [r4, #4]
 8005e68:	60a6      	str	r6, [r4, #8]
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	db05      	blt.n	8005e7a <_printf_i+0x10e>
 8005e6e:	6821      	ldr	r1, [r4, #0]
 8005e70:	432e      	orrs	r6, r5
 8005e72:	f021 0104 	bic.w	r1, r1, #4
 8005e76:	6021      	str	r1, [r4, #0]
 8005e78:	d04b      	beq.n	8005f12 <_printf_i+0x1a6>
 8005e7a:	4616      	mov	r6, r2
 8005e7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e80:	fb03 5711 	mls	r7, r3, r1, r5
 8005e84:	5dc7      	ldrb	r7, [r0, r7]
 8005e86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	42bb      	cmp	r3, r7
 8005e8e:	460d      	mov	r5, r1
 8005e90:	d9f4      	bls.n	8005e7c <_printf_i+0x110>
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d10b      	bne.n	8005eae <_printf_i+0x142>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	07df      	lsls	r7, r3, #31
 8005e9a:	d508      	bpl.n	8005eae <_printf_i+0x142>
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	6861      	ldr	r1, [r4, #4]
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	bfde      	ittt	le
 8005ea4:	2330      	movle	r3, #48	@ 0x30
 8005ea6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eae:	1b92      	subs	r2, r2, r6
 8005eb0:	6122      	str	r2, [r4, #16]
 8005eb2:	f8cd a000 	str.w	sl, [sp]
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	aa03      	add	r2, sp, #12
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f7ff fee7 	bl	8005c90 <_printf_common>
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d14a      	bne.n	8005f5c <_printf_i+0x1f0>
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	b004      	add	sp, #16
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f043 0320 	orr.w	r3, r3, #32
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	4832      	ldr	r0, [pc, #200]	@ (8005fa4 <_printf_i+0x238>)
 8005eda:	2778      	movs	r7, #120	@ 0x78
 8005edc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	6831      	ldr	r1, [r6, #0]
 8005ee4:	061f      	lsls	r7, r3, #24
 8005ee6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eea:	d402      	bmi.n	8005ef2 <_printf_i+0x186>
 8005eec:	065f      	lsls	r7, r3, #25
 8005eee:	bf48      	it	mi
 8005ef0:	b2ad      	uxthmi	r5, r5
 8005ef2:	6031      	str	r1, [r6, #0]
 8005ef4:	07d9      	lsls	r1, r3, #31
 8005ef6:	bf44      	itt	mi
 8005ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8005efc:	6023      	strmi	r3, [r4, #0]
 8005efe:	b11d      	cbz	r5, 8005f08 <_printf_i+0x19c>
 8005f00:	2310      	movs	r3, #16
 8005f02:	e7ad      	b.n	8005e60 <_printf_i+0xf4>
 8005f04:	4826      	ldr	r0, [pc, #152]	@ (8005fa0 <_printf_i+0x234>)
 8005f06:	e7e9      	b.n	8005edc <_printf_i+0x170>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f023 0320 	bic.w	r3, r3, #32
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	e7f6      	b.n	8005f00 <_printf_i+0x194>
 8005f12:	4616      	mov	r6, r2
 8005f14:	e7bd      	b.n	8005e92 <_printf_i+0x126>
 8005f16:	6833      	ldr	r3, [r6, #0]
 8005f18:	6825      	ldr	r5, [r4, #0]
 8005f1a:	6961      	ldr	r1, [r4, #20]
 8005f1c:	1d18      	adds	r0, r3, #4
 8005f1e:	6030      	str	r0, [r6, #0]
 8005f20:	062e      	lsls	r6, r5, #24
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	d501      	bpl.n	8005f2a <_printf_i+0x1be>
 8005f26:	6019      	str	r1, [r3, #0]
 8005f28:	e002      	b.n	8005f30 <_printf_i+0x1c4>
 8005f2a:	0668      	lsls	r0, r5, #25
 8005f2c:	d5fb      	bpl.n	8005f26 <_printf_i+0x1ba>
 8005f2e:	8019      	strh	r1, [r3, #0]
 8005f30:	2300      	movs	r3, #0
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	4616      	mov	r6, r2
 8005f36:	e7bc      	b.n	8005eb2 <_printf_i+0x146>
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	6032      	str	r2, [r6, #0]
 8005f3e:	681e      	ldr	r6, [r3, #0]
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	2100      	movs	r1, #0
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7fa f97b 	bl	8000240 <memchr>
 8005f4a:	b108      	cbz	r0, 8005f50 <_printf_i+0x1e4>
 8005f4c:	1b80      	subs	r0, r0, r6
 8005f4e:	6060      	str	r0, [r4, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2300      	movs	r3, #0
 8005f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5a:	e7aa      	b.n	8005eb2 <_printf_i+0x146>
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	4632      	mov	r2, r6
 8005f60:	4649      	mov	r1, r9
 8005f62:	4640      	mov	r0, r8
 8005f64:	47d0      	blx	sl
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0ad      	beq.n	8005ec6 <_printf_i+0x15a>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	079b      	lsls	r3, r3, #30
 8005f6e:	d413      	bmi.n	8005f98 <_printf_i+0x22c>
 8005f70:	68e0      	ldr	r0, [r4, #12]
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	4298      	cmp	r0, r3
 8005f76:	bfb8      	it	lt
 8005f78:	4618      	movlt	r0, r3
 8005f7a:	e7a6      	b.n	8005eca <_printf_i+0x15e>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4649      	mov	r1, r9
 8005f82:	4640      	mov	r0, r8
 8005f84:	47d0      	blx	sl
 8005f86:	3001      	adds	r0, #1
 8005f88:	d09d      	beq.n	8005ec6 <_printf_i+0x15a>
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	9903      	ldr	r1, [sp, #12]
 8005f90:	1a5b      	subs	r3, r3, r1
 8005f92:	42ab      	cmp	r3, r5
 8005f94:	dcf2      	bgt.n	8005f7c <_printf_i+0x210>
 8005f96:	e7eb      	b.n	8005f70 <_printf_i+0x204>
 8005f98:	2500      	movs	r5, #0
 8005f9a:	f104 0619 	add.w	r6, r4, #25
 8005f9e:	e7f5      	b.n	8005f8c <_printf_i+0x220>
 8005fa0:	080060e1 	.word	0x080060e1
 8005fa4:	080060f2 	.word	0x080060f2

08005fa8 <memmove>:
 8005fa8:	4288      	cmp	r0, r1
 8005faa:	b510      	push	{r4, lr}
 8005fac:	eb01 0402 	add.w	r4, r1, r2
 8005fb0:	d902      	bls.n	8005fb8 <memmove+0x10>
 8005fb2:	4284      	cmp	r4, r0
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	d807      	bhi.n	8005fc8 <memmove+0x20>
 8005fb8:	1e43      	subs	r3, r0, #1
 8005fba:	42a1      	cmp	r1, r4
 8005fbc:	d008      	beq.n	8005fd0 <memmove+0x28>
 8005fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fc6:	e7f8      	b.n	8005fba <memmove+0x12>
 8005fc8:	4402      	add	r2, r0
 8005fca:	4601      	mov	r1, r0
 8005fcc:	428a      	cmp	r2, r1
 8005fce:	d100      	bne.n	8005fd2 <memmove+0x2a>
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fda:	e7f7      	b.n	8005fcc <memmove+0x24>

08005fdc <_sbrk_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d06      	ldr	r5, [pc, #24]	@ (8005ff8 <_sbrk_r+0x1c>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fb f97c 	bl	80012e4 <_sbrk>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_sbrk_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_sbrk_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000a64 	.word	0x20000a64

08005ffc <memcpy>:
 8005ffc:	440a      	add	r2, r1
 8005ffe:	4291      	cmp	r1, r2
 8006000:	f100 33ff 	add.w	r3, r0, #4294967295
 8006004:	d100      	bne.n	8006008 <memcpy+0xc>
 8006006:	4770      	bx	lr
 8006008:	b510      	push	{r4, lr}
 800600a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006012:	4291      	cmp	r1, r2
 8006014:	d1f9      	bne.n	800600a <memcpy+0xe>
 8006016:	bd10      	pop	{r4, pc}

08006018 <_realloc_r>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	4607      	mov	r7, r0
 800601e:	4614      	mov	r4, r2
 8006020:	460d      	mov	r5, r1
 8006022:	b921      	cbnz	r1, 800602e <_realloc_r+0x16>
 8006024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	4611      	mov	r1, r2
 800602a:	f7ff bc4d 	b.w	80058c8 <_malloc_r>
 800602e:	b92a      	cbnz	r2, 800603c <_realloc_r+0x24>
 8006030:	f7ff fbde 	bl	80057f0 <_free_r>
 8006034:	4625      	mov	r5, r4
 8006036:	4628      	mov	r0, r5
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603c:	f000 f81a 	bl	8006074 <_malloc_usable_size_r>
 8006040:	4284      	cmp	r4, r0
 8006042:	4606      	mov	r6, r0
 8006044:	d802      	bhi.n	800604c <_realloc_r+0x34>
 8006046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800604a:	d8f4      	bhi.n	8006036 <_realloc_r+0x1e>
 800604c:	4621      	mov	r1, r4
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff fc3a 	bl	80058c8 <_malloc_r>
 8006054:	4680      	mov	r8, r0
 8006056:	b908      	cbnz	r0, 800605c <_realloc_r+0x44>
 8006058:	4645      	mov	r5, r8
 800605a:	e7ec      	b.n	8006036 <_realloc_r+0x1e>
 800605c:	42b4      	cmp	r4, r6
 800605e:	4622      	mov	r2, r4
 8006060:	4629      	mov	r1, r5
 8006062:	bf28      	it	cs
 8006064:	4632      	movcs	r2, r6
 8006066:	f7ff ffc9 	bl	8005ffc <memcpy>
 800606a:	4629      	mov	r1, r5
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff fbbf 	bl	80057f0 <_free_r>
 8006072:	e7f1      	b.n	8006058 <_realloc_r+0x40>

08006074 <_malloc_usable_size_r>:
 8006074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006078:	1f18      	subs	r0, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfbc      	itt	lt
 800607e:	580b      	ldrlt	r3, [r1, r0]
 8006080:	18c0      	addlt	r0, r0, r3
 8006082:	4770      	bx	lr

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
